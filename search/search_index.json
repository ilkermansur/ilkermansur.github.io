{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ilker Mansur","text":"<p>Ben \u0130lker Mansur, 15 y\u0131l\u0131 a\u015fk\u0131n s\u00fcredir network uzman\u0131 olarak \u00e7al\u0131\u015f\u0131yorum. A\u011f\u0131rl\u0131kl\u0131 olarak Collaboration, Enterprise Network ve DevNet teknolojileriyle ilgileniyorum. CCIE Collaboration (#63555) ve DevNet Professional sertifikalar\u0131 ba\u015fta olmak \u00fczere bir\u00e7ok sertifikaya sahibim. Evliyim ve Ezo ad\u0131nda bir k\u0131z\u0131m var.</p> <p>I am \u0130lker Mansur, a network expert with over 15 years of experience. I specialize in Collaboration, Enterprise Network, and DevNet technologies. I hold several certifications, including CCIE Collaboration (#63555) and DevNet Professional. I am married and have a daughter named Ezo.</p>"},{"location":"collaboration/clauto/clauto/","title":"clauto","text":""},{"location":"collaboration/clauto/clauto/#virtualenv-and-pip","title":"Virtualenv and PIP","text":"<p>PIP</p> <p>For sharing project, you should share virtual environment libraries. There is a easy way. You can use <code>pip freeze</code> for this.</p> <pre><code>(newproject) PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts&gt; pip freeze &gt; requirements.txt\n(newproject) PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts&gt; dir\n\n\n    Directory: C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/26/2023  10:05 PM           2174 activate\n-a----         5/26/2023  10:05 PM           1027 activate.bat\n-a----         5/26/2023  10:05 PM           3051 activate.fish\n-a----         5/26/2023  10:05 PM           3370 activate.nu\n-a----         5/26/2023  10:05 PM           1758 activate.ps1\n-a----         5/26/2023  10:05 PM           1207 activate_this.py\n-a----         5/26/2023  10:05 PM            511 deactivate.bat\n-a----         5/26/2023  10:45 PM         108452 normalizer.exe\n-a----         5/26/2023  10:05 PM         108429 pip-3.11.exe\n-a----         5/26/2023  10:05 PM         108429 pip.exe\n-a----         5/26/2023  10:05 PM         108429 pip3.11.exe\n-a----         5/26/2023  10:05 PM         108429 pip3.exe\n-a----         5/26/2023  10:05 PM             24 pydoc.bat\n-a----         5/26/2023  10:05 PM         270616 python.exe\n-a----         5/26/2023  10:05 PM         259344 pythonw.exe\n-a----         5/26/2023  10:59 PM         #   560 requirements.txt\n-a----         5/26/2023  10:05 PM         108416 wheel-3.11.exe\n-a----         5/26/2023  10:05 PM         108416 wheel.exe\n-a----         5/26/2023  10:05 PM         108416 wheel3.11.exe\n-a----         5/26/2023  10:05 PM         108416 wheel3.exe\n</code></pre> <p>If you want to share your project you should share two things</p> <p>1 - Project code 2 - <code>requirements.txt</code> file.</p> <p>For installing libraries list  use this <code>requirements.txt</code> file:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>this command will install all required libraries. </p> <p>Virtual Enviroment</p> <p><code>virtualenv</code> is a tool in Python that allows you to create isolated Python environments. It helps you manage dependencies and keep the packages required by different projects separate from each other.</p> <p>When you create a virtual environment using virtualenv, it creates a directory that contains a Python interpreter and its own site-packages directory. This means that any packages you install or modify within the virtual environment will not affect the system-wide Python installation or other virtual environments.</p> <ul> <li>Install <code>virtualenv</code></li> </ul> <p><pre><code>python.exe -m pip install --user virtualenv\n!\nPS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\Scripts&gt; .\\pip.exe list                 \nPackage      Version\n------------ -------\ndistlib      0.3.6\nfilelock     3.12.0\npip          22.3.1\nplatformdirs 3.5.1\nsetuptools   65.5.0\nvirtualenv   20.23.0\n</code></pre> After installation <code>virtualenv</code> create new environment like <code>newproject</code></p> <p><pre><code>PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11&gt; .\\python.exe -m virtualenv newproject\ncreated virtual environment CPython3.11.3.final.0-64 in 6863ms\n  creator CPython3Windows(dest=C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject, clear=False, no_vcs_ignore=False, global=False)\n  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\\Users\\ILKER\\AppData\\Local\\pypa\\virtualenv)\n    added seed packages: pip==23.1.2, setuptools==67.7.2, wheel==0.40.0\n  activators BashActivator,BatchActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n</code></pre> Now, there is a new directory now.</p> <p><pre><code>PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11&gt; dir\n\n\n    Directory: C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         5/26/2023   9:34 PM                DLLs\nd-----         5/26/2023   9:33 PM                Doc\nd-----         5/26/2023   9:33 PM                include\nd-----         5/26/2023   9:33 PM                Lib\nd-----         5/26/2023   9:33 PM                libs\nd-----         5/26/2023  10:05 PM              # newproject\nd-----         5/26/2023   9:34 PM                Scripts\nd-----         5/26/2023   9:34 PM                tcl\nd-----         5/26/2023   9:33 PM                Tools\n-a----          4/5/2023  12:04 AM          32768 LICENSE.txt\n-a----          4/5/2023  12:05 AM        1481302 NEWS.txt\n-a----          4/5/2023  12:04 AM         103192 python.exe\n-a----          4/5/2023  12:04 AM          67344 python3.dll\n-a----          4/5/2023  12:04 AM        5760784 python311.dll\n-a----          4/5/2023  12:04 AM         101648 pythonw.exe\n-a----          4/5/2023  12:04 AM         109392 vcruntime140.dll\n-a----          4/5/2023  12:04 AM          49520 vcruntime140_1.dll\n</code></pre> which is include its own <code>Lib</code> and <code>Scripts</code> directory</p> <pre><code>PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11&gt; cd .\\newproject\\\nPS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject&gt; dir\n\n\n    Directory: C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         5/26/2023  10:05 PM                Lib\nd-----         5/26/2023  10:05 PM                Scripts\n-a----         5/26/2023  10:05 PM             42 .gitignore\n-a----         5/26/2023  10:05 PM            354 pyvenv.cfg\n\n\nPS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject&gt; \n</code></pre> <p>Note</p> <p>If you are using <code>VSCODE Terminal</code> you might getting error about permission. Set below parameter on power shell for permission.</p> <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre> <p>then activate <code>virtualenv</code></p> <p><pre><code>PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11&gt; cd .\\newproject\\Scripts\nPS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts&gt; .\\activate\n(newproject) PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts&gt; \n</code></pre>  Now you are in relevant virtual environment. You can download <code>Python Library</code> which you want. These libraries is in just this virtual environment.</p>   Install Library with    ---&gt;   <code>pip install ciscoaxl</code> <p>(newproject) PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts&gt; .\\pip.exe install ciscoaxl Collecting ciscoaxl   Downloading ciscoaxl-0.163-py3-none-any.whl (2.5 MB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.5/2.5 MB 532.0 kB/s eta 0:00:00 Collecting requests&lt;3.0.0,&gt;=2.27.1 (from ciscoaxl)   Downloading requests-2.31.0-py3-none-any.whl (62 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 418.7 kB/s eta 0:00:00 Collecting termcolor&lt;2.0.0,&gt;=1.1.0 (from ciscoaxl)   Downloading termcolor-1.1.0.tar.gz (3.9 kB)   Preparing metadata (setup.py) ... done Collecting zeep&lt;5.0.0,&gt;=4.1.0 (from ciscoaxl)   Downloading zeep-4.2.1-py3-none-any.whl (101 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 101.2/101.2 kB 448.1 kB/s eta 0:00:00 Collecting charset-normalizer&lt;4,&gt;=2 (from requests&lt;3.0.0,&gt;=2.27.1-&gt;ciscoaxl)   Downloading charset_normalizer-3.1.0-cp311-cp311-win_amd64.whl (96 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.7/96.7 kB 691.6 kB/s eta 0:00:00 Collecting idna&lt;4,&gt;=2.5 (from requests&lt;3.0.0,&gt;=2.27.1-&gt;ciscoaxl)   Downloading idna-3.4-py3-none-any.whl (61 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 219.2 kB/s eta 0:00:00 Collecting urllib3&lt;3,&gt;=1.21.1 (from requests&lt;3.0.0,&gt;=2.27.1-&gt;ciscoaxl)   Downloading urllib3-2.0.2-py3-none-any.whl (123 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.2/123.2 kB 482.9 kB/s eta 0:00:00 Collecting certifi&gt;=2017.4.17 (from requests&lt;3.0.0,&gt;=2.27.1-&gt;ciscoaxl)   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 494.0 kB/s eta 0:00:00 Collecting attrs&gt;=17.2.0 (from zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 361.1 kB/s eta 0:00:00 Collecting isodate&gt;=0.5.4 (from zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Downloading isodate-0.6.1-py2.py3-none-any.whl (41 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.7/41.7 kB ? eta 0:00:00 Collecting lxml&gt;=4.6.0 (from zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Downloading lxml-4.9.2-cp311-cp311-win_amd64.whl (3.8 MB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.8/3.8 MB 520.4 kB/s eta 0:00:00 Collecting platformdirs&gt;=1.4.0 (from zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Using cached platformdirs-3.5.1-py3-none-any.whl (15 kB) Collecting requests-toolbelt&gt;=0.7.1 (from zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.5/54.5 kB 313.8 kB/s eta 0:00:00 Collecting requests-file&gt;=1.5.1 (from zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Downloading requests_file-1.5.1-py2.py3-none-any.whl (3.7 kB) Collecting pytz (from zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 492.1 kB/s eta 0:00:00 Collecting six (from isodate&gt;=0.5.4-&gt;zeep&lt;5.0.0,&gt;=4.1.0-&gt;ciscoaxl)   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB) Building wheels for collected packages: termcolor   Building wheel for termcolor (setup.py) ... done   Created wheel for termcolor: filename=termcolor-1.1.0-py3-none-any.whl size=4855 sha256=e9524761cce50dfcece5932fb4a385d31a2091fe904f4da696ff01839cccb4c2   Stored in directory: c:\\users\\ilker\\appdata\\local\\pip\\cache\\wheels\\9f\\ca\\d7\\8f2399d70f5d641d4fef951a78d6aa4ab64cc582e1c4dec9a3 Successfully built termcolor Installing collected packages: termcolor, pytz, urllib3, six, platformdirs, lxml, idna, charset-normalizer, certifi, attrs, requests, isodate, requests-toolbelt, requests-file, zeep, ciscoaxl Successfully installed attrs-23.1.0 certifi-2023.5.7 charset-normalizer-3.1.0 ciscoaxl-0.163 idna-3.4 isodate-0.6.1 lxml-4.9.2 platformdirs-3.5.1 pytz-2023.3 requests-2.31.0 requests-file-1.5.1 requests-toolbelt-1.0.0 six-1.16.0 termcolor-1.1.0 urllib3-2.0.2 zeep-4.2.1</p> <pre><code>(newproject) PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts&gt; pip list \nPackage            Version\n------------------ --------\nattrs              23.1.0\ncertifi            2023.5.7\ncharset-normalizer 3.1.0\nciscoaxl           0.163\nidna               3.4\nisodate            0.6.1\nlxml               4.9.2\npip                23.1.2\nplatformdirs       3.5.1\npytz               2023.3\nrequests           2.31.0\nrequests-file      1.5.1\nrequests-toolbelt  1.0.0\nsetuptools         67.7.2\nsix                1.16.0\ntermcolor          1.1.0\nurllib3            2.0.2\nwheel              0.40.0\nzeep               4.2.1\n</code></pre> Attention <p>But These libraries are not in global python library. Lets test it</p> <p>(newproject) PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\newproject\\Scripts&gt; deactivate  </p> <p>PS C:\\Users\\ILKER\\Desktop\\Devnet\\python3.11\\Scripts&gt; .\\pip.exe list</p> <p>Package      Version</p> <p>distlib      0.3.6</p> <p>filelock     3.12.0</p> <p>pip          23.1.2</p> <p>platformdirs 3.5.1</p> <p>setuptools   65.5.0</p> <p>virtualenv   20.23.0</p> <p>Fundamental Of Python</p> <p>Devices can be manage by human with three ways. Python can be sumilate these with Python Libraries</p> <pre><code>graph TD\nA[Device Management] --&gt; B[GUI];\nB[GUI] --&gt; C([BeatifulSoup]);\nB[GUI] --&gt; D([Selenium]);\nA[Device Management] --&gt; E[Telnet / SSH];\nE[Telnet / SSH] --&gt; F([Netmiko]);\nE[Telnet / SSH] --&gt; G([Telnetlib]);\nA[Device Management] --&gt; H([API]);\nH([API]) --&gt; I([request]);\nH([API]) --&gt; J([zeep]);\n</code></pre> <p>Python can be used for network devices with below reason</p> <ul> <li>[x] Backup Configuration</li> <li>[x] Daily routine</li> <li>[x] Automation Bulk Configuration</li> <li>[x] Configuration Depend on Condition</li> <li>[x] Pull information from device</li> <li>[x] Health check</li> </ul> <p></p>"},{"location":"collaboration/clauto/clauto/#data-type-in-python","title":"Data type in PYTHON","text":"<p>String</p> <ul> <li>String can use single, double quotes</li> </ul> <pre><code>  ip_1 = '10.0.0.1'\n  print (ip_1)\n  print (len(ip_1))\n</code></pre> <p>10.0.0.1</p> <p>8</p> <pre><code>  ip_2 = \"10.0.0.2\"\n  print (ip_2) \n</code></pre> <p>10.0.0.2</p> <ul> <li>or both</li> </ul> <pre><code>  Einstein = \"If you can't explain it simply, you don't understand it well enough\"\n  print (Einstein)\n  print (len(Einstein))\n</code></pre> <p>If you can't explain it simply, you don't understand it well enough</p> <p>67</p> <ul> <li> <p>STRING OPERATIONS</p> </li> <li> <p>You can add strings together to concatenate them</p> </li> </ul> <pre><code>  ipaddr = ip_1 + ip_2\n  print (ipaddr)                      \n</code></pre> <p>10.0.0.110.0.0.2</p> <ul> <li>You can use whitespace between strings</li> </ul> <pre><code>  ipaddr = ip_1 + ' ' +ip_2\n  print (ipaddr)                      \n</code></pre> <p>10.0.0.1 10.0.0.2</p> <ul> <li>Easy way to add more whitespace between strings another words strings can be multiply</li> </ul> <pre><code>  ipaddr = ip_1 + ' '*10 +ip_2\n  print(ipaddr)                      \n</code></pre> <p>10.0.0.1          10.0.0.2</p> <ul> <li>You can't add strings and numbers</li> </ul> <pre><code>  age=40\n  print(\"You are \" + age)           \n</code></pre> <p>TypeError: can only concatenate str (not \"int\") to str</p> <ul> <li>But you can if you turn the number into a string first:</li> </ul> <pre><code>  age=40\n  age_as_string = str(40)\n  print(\"You are \" + age_as_string) \n</code></pre> <p>You are 40</p> <ul> <li>SOME ESCAPE CHARACTERS</li> </ul> <pre><code>  Einstein = \"If you can't explain it simply,\\n you don't understand it well enough\"\n  print (Einstein)\n</code></pre> <p>If you can't explain it simply, you don't understand it well enough</p> <pre><code>Einstein = \"If you can't explain it simply,\\n\\n you don't understand it well enough\"\n  print (Einstein)\n</code></pre> <p>If you can't explain it simply,</p> <p>you don't understand it well enough</p> <pre><code>  nameandsurname = 'ilker\\tmansur'\n  print (nameandsurname)\n  ```\n&gt; ilker    mansur\n\n```python\n  Einstein = 'If you can\\'t explain it simply, you don\\'t understand it well enough'\n  print (Einstein)\n</code></pre> <p>'If you can\\'t explain it simply, you don\\'t understand it well enough'</p> <ul> <li>INDEX of STRING</li> </ul> <pre><code>  adsoyad = 'ilker mansur'\n  print(adsoyad[0])\n</code></pre> <p>i</p> <pre><code>  print(adsoyad[1])\n</code></pre> <p>l</p> <pre><code>  print(adsoyad[2])\n</code></pre> <p>k</p> <pre><code>print(adsoyad[3])\n</code></pre> <p>e</p> <pre><code>print(adsoyad[4])\n</code></pre> <p>r</p> <ul> <li>or specific part of string</li> </ul> <pre><code>  print (adsoyad[0:])\n</code></pre> <p>ilker mansur</p> <pre><code>  print (adsoyad[6:])\n</code></pre> <p>mansur</p> <pre><code>  print (adsoyad[:6])\n</code></pre> <p>ilker</p> <pre><code>  print(adsoyad[2:4])\n</code></pre> <p>ke</p> <ul> <li>Actually data types ,that we use, are classes at the same time <pre><code>  print (type (adsoyad))\n</code></pre> <p> <ul> <li>SOME METHOD of STR CLASS</li> </ul> <pre><code>  adsoyad = \"    \u0130lker Mansur    \"\n\n  print(adsoyad.count('r'))\n</code></pre> <p>2</p> <pre><code>  print(adsoyad.endswith('r'))\n</code></pre> <p>False</p> <pre><code>  print(adsoyad.endswith(' '))\n</code></pre> <p>True</p> <pre><code>  print(adsoyad.startwith('\u0130'))\n</code></pre> <p>True</p> <pre><code>  print(adsoyad.lower())\n</code></pre> <pre><code>ilker mansur\n</code></pre> <pre><code>  print(adsoyad.upper())\n</code></pre> <pre><code>\u0130LKER MANSUR\n</code></pre> <pre><code>  print(adsoyad.strip())\n</code></pre> <p>\u0130lker Mansur</p> <pre><code>  print(adsoyad.rstrip())\n</code></pre> <pre><code>\u0130lker Mansur\n</code></pre> <pre><code>  print(adsoyad.lstrip())\n</code></pre> <p>\u0130lker Mansur</p> <pre><code>  ip_address = \"10.0.0.1 255.255.255.0\"\n\n  print(ip_address.split(' '))\n</code></pre> <p>['10.0.0.1', '255.255.255.0']</p> <pre><code>  print (ip_address.split('.'))\n</code></pre> <p>['10', '0', '0', '1 255', '255', '255', '0']</p> <pre><code>  new_ip_address = ip_address.replace('10','20')\n  print(new_ip_address)\n</code></pre> <p>20.0.0.1 255.255.255.0</p> <p>PS: <code>replace</code> converts all parameters which is match the given parameter, if you want to use one time or specific times, you should use extra parameter like ('10','20',2). </p> <pre><code>  new_ip_address = ip_address[::-1]\n</code></pre> <p>0.552.552.552 1.0.0.01</p> <p>Integer &amp; Float</p> <pre><code>  number = 10\n  print(type(number))\n</code></pre> <p> <pre><code>  number = 10.0\n  print(type(number))\n</code></pre> <p> <ul> <li>In network automation scripts, use str for expressing ip address instead of integer because of syntax</li> </ul> <pre><code>ipaddr_int = 10.0.0.1\nipaddr_str = '10.0.0.1'\n</code></pre> <ul> <li>MATH with operator ('+' '-' '*' '/' '//' '%')</li> </ul> <pre><code>  a = 9\n  b = 2\n\n  c = a + b\n  print (c)\n</code></pre> <p>11</p> <pre><code>  c = a - b\n  print (c)\n</code></pre> <p>7</p> <pre><code>  c = a / b\n  print (c)\n</code></pre> <p>4.5</p> <pre><code>  c = a // b\n  print (c)\n</code></pre> <p>4</p> <pre><code>  c = a % b\n  print (c)\n</code></pre> <p>1</p> <ul> <li>It is possibble to convert int &lt;-&gt; float</li> </ul> <pre><code>  a = 9\n  b = float(a)\n  print(b)\n</code></pre> <p>9.0</p> <pre><code>  c = 7.0\n  d = int(c)\n  print (d)\n</code></pre> <p>7</p> <pre><code>  e = 5.9\n  f = int(e)\n  print (f)\n</code></pre> <p>5</p> <p>Boolean</p> <ul> <li>Booleans returns only 'True' or 'False'</li> </ul> <pre><code>  a = 9\n  b = 6\n  print (a == b)\n  print (a != b)\n</code></pre> <p>False</p> <p>True</p> <pre><code>  a = 'Router01'\n  b = 'router_02'\n  print (a == b)\n</code></pre> <p>False</p> <pre><code>  a = True\n  b = False\n\n  print (a or b)\n  print (a and b)\n  print (a or a)\n  print (a and a)\n  print (b and b)\n</code></pre> <p>True</p> <p>False</p> <p>True</p> <p>True</p> <p>False</p> <p>List</p> <ul> <li>Lists are the object type called list, and at their most basic level are an ordered sequence of objects.</li> </ul> <pre><code>  hostnames = ['r1' , 'r2' , 'r3' , 'r4' , 'r5']\n  commands = ['conf t' , 'interface Ethernet1/1' , 'no shutdown']\n</code></pre> <ul> <li>Each object can be different data type</li> </ul> <pre><code>  my_list = ['router1' , False , 3]\n</code></pre> <ul> <li>Can be use each element from list</li> </ul> <pre><code>  voiceinterfaces = ['Eth1/1' , 'Eth1/2' , 'Eth1/3' , 'Eth1/4']\n\n  print(voiceinterfaces[0])           \n</code></pre> <p>Eth1/1</p> <pre><code>  print(voiceinterfaces[1])           \n</code></pre> <p>Eth1/2</p> <ul> <li>SOME METHOD of LIST</li> </ul> <pre><code>  voice_interfaces = ['Eth1/1' , 'Eth1/2']\n  data_interfaces = ['Eth1/1' , 'Eth1/2' , 'Eth1/3' , 'Eth1/4']\n\n  voice_interfaces.append('Eth1/3')\n  print(voice_interfaces)\n</code></pre> <p>['Eth1/1', 'Eth1/2', 'Eth1/3']</p> <pre><code>  voice_interfaces.clear()\n  print(voice_interfaces)\n</code></pre> <p>[]</p> <pre><code>  print (data_interfaces.index('Eth1/4'))\n</code></pre> <p>3</p> <pre><code>  data_interfaces.insert(3, 'Eth1/5')\n  print (data_interfaces)\n</code></pre> <p>['Eth1/1', 'Eth1/2', 'Eth1/3', 'Eth1/5', 'Eth1/4']</p> <pre><code>  data_interfaces.append('Eth1/6')\n  print(data_interfaces)\n</code></pre> <p>['Eth1/1', 'Eth1/2', 'Eth1/3', 'Eth1/5', 'Eth1/4', 'Eth1/6']</p> <pre><code>  data_interfaces.remove('Eth1/2')\n  print (data_interfaces)\n</code></pre> <p>['Eth1/1', 'Eth1/3', 'Eth1/5', 'Eth1/4', 'Eth1/6']</p> <pre><code>  data_interfaces.pop()\n  print(data_interfaces)\n</code></pre> <p>['Eth1/1', 'Eth1/3', 'Eth1/5', 'Eth1/4']</p> <pre><code>  data_interfaces.pop(1)\n  print(data_interfaces)\n</code></pre> <p>['Eth1/1', 'Eth1/5', 'Eth1/4']</p> <pre><code>  data_interfaces.sort()\n  print(data_interfaces)\n</code></pre> <p>['Eth1/1', 'Eth1/4', 'Eth1/5']</p> <pre><code>  port_status = ['connected' , 'notconnected', 'notconnected', 'notconnected' , 'connected']\n\n  print (port_status.count('connected'))\n  print (port_status.count('notconnected'))\n</code></pre> <p>2</p> <p>3</p> <p>Tuple</p> <p>The tuple is an interesting  data type and also best understood when compared to a list. It is like a list, but cannot be modified. We saw that lists are  mutable, meaning that it is  possible to update, extend, and modify them. Tuples, on the other hand, are immutable, and it is not possible to modify them once they\u2019re created. Also, like lists, it\u2019s possible to   access individual elements of tuples.</p> <pre><code>  deviceslist = ['cisco', 'juniper', 'HP', 'Dell', 'Huawei', 'cisco']\n  print(type(devicelist))\n</code></pre> <p> <pre><code>  devicetuple = tuple(deviceslist)\n  print (devicetuple)\n  print(type(devicetuple))\n</code></pre> <p>('cisco', 'juniper', 'HP', 'Dell', 'Huawei', 'cisco')</p> <p> <pre><code>  print (devicetuple.count('cisco'))\n</code></pre> <p>2</p> <pre><code>  print (devicetuple.index ('cisco'))\n</code></pre> <p>0</p> <pre><code>  print (devicetuple[1])\n</code></pre> <p>juniper</p> <pre><code>  print (devicetuple[1:3])\n</code></pre> <p>('juniper', 'HP')</p> <pre><code>  device_short_list = devicetuple[0:2]\n  print (device_short_list)\n  print (type(device_short_list))\n</code></pre> <p>('cisco', 'juniper')</p> <p>class 'tuple'&gt;</p> <p>Set</p> <p>If you understand lists, you\u2019ll understand sets. Sets are a list of elements, but there can only be one of a given element in a set, and additionally elements cannot be indexed.</p> <pre><code>  deviceslist = ['cisco', 'juniper', 'HP', 'Dell', 'Huawei', 'cisco']\n\n  device_set = set (deviceslist)\n  print (device_set)\n</code></pre> <p>{'Huawei', 'HP', 'Dell', 'juniper', 'cisco'}</p> <pre><code>  device_set.pop()\n  print (device_set)\n</code></pre> <p>{'Dell', 'Huawei', 'cisco', 'juniper'}</p> <ul> <li>The pop() method removes a random item from the set. This method returns the removed item.</li> </ul> <pre><code>  device_set.pop(0)\n  print (device_set)\n</code></pre> <p>TypeError: pop() takes no arguments (1 given)</p> <pre><code>  device_set.remove('Dell')\n  print (device_set)\n</code></pre> <p>{'Huawei', 'cisco', 'juniper'}</p> <ul> <li>ADD \\OR UPDATE USING SET</li> </ul> <pre><code>  deviceset_1 = {'Huawei', 'Cisco', 'Juniper'}\n  deviceset_2 = {'Arista', 'Dell'}\n\n  deviceset_1.update(deviceset_2)\n  print (deviceset_1)\n</code></pre> <p>{'Arista', 'Juniper', 'Cisco', 'Dell', 'Huawei'}</p> <pre><code>  deviceset_1.add('Apple')\n  print (deviceset_1)\n</code></pre> <p>{'Arista', 'Juniper', 'Cisco', 'Apple', 'Dell', 'Huawei'}</p> <pre><code>  deviceset_1.update('Meraki')\n  print (deviceset_1)\n</code></pre> <p>{'r', 'Dell', 'Huawei', 'e', 'a', 'Arista', 'M', 'i', 'k', 'Juniper', 'Cisco', 'Apple'}</p> <p>Dictionary</p> <p>We\u2019ve now reviewed  some of the most common data types, including strings, integers, booleans, and lists, which exist across all programming languages. In this section we take a look at  the dictionary, which is a  Python-specific data type. In other    languages, they  are known  as associative arrays, maps, or hash  maps. Dictionaries are unordered lists and their values are  accessed  by names, otherwise known as keys, instead of by index (integer). Dictionaries are simply a collection of unordered   key-value pairs called items.</p> <pre><code>  devices = {'vendor': 'cisco', 'hostname': 'router01', 'OS': 'IOS-XE'}\n  print(type(devices))\n</code></pre> <p> <pre><code>  print(devices.keys())\n</code></pre> <p>dict_keys(['vendor', 'hostname', 'OS'])</p> <pre><code>  print(devices.values())\n</code></pre> <p>dict_values(['cisco', 'router01', 'IOS-XE'])</p> <pre><code>  print (devices.items())\n</code></pre> <p>dict_items([('vendor', 'cisco'), ('hostname', 'router01'), ('OS', 'IOS-XE')])</p> <pre><code>  print(devices['vendor'])\n</code></pre> <p>cisco</p> <pre><code>  copy_devices = devices.copy()\n  print (copy_devices)\n</code></pre> <p>{'vendor': 'cisco', 'hostname': 'router01', 'OS': 'IOS-XE'}</p>"},{"location":"collaboration/clauto/clauto/#working-with-file","title":"Working with File","text":"<p>The key function for working with files in Python is the open() function. The open() function takes two parameters; filename and mode.</p> <p>\"r\" - Read - Default value. Opens a file for reading, error if the file does not exist</p> <p>\"a\" - Append - Opens a file for appending, creates the file if it does not exist</p> <p>\"w\" - Write - Opens a file for writing, creates the file if it does not exist</p> <p>\"x\" - Create - Creates the specified file, returns an error if the file exists</p> <ul> <li>EXP-1</li> </ul> <p><pre><code>  test_file = open(\"testfile.txt\", \"w\")\n  test_file.write(\"Bu bir deneme yaz\u0131s\u0131d\u0131r\")\n  test_file.close()\n\n  x = open('testfile.txt')\n  print(x.read())\n</code></pre> * EXP-2</p> <pre><code>  dosya = open('RT_01.txt', 'x')\n  dosya.write('conf t\\ninterface gigabitethernet0/1\\nno shutdown\\n')\n  dosya.close()\n\n  x = open('RT_01.txt')\n  print(x.read())\n</code></pre>"},{"location":"collaboration/clauto/clauto/#conditions-in-python","title":"Conditions in Python","text":"<ul> <li> <p>There are two things to take note of with regard to syntax when you\u2019re working with an if statement. First, all if statements end with a colon (:). Second, the code that gets executed if your condition is true is part of an indented block of code</p> </li> <li> <p>EXP - 1</p> </li> </ul> <pre><code>a = 5\n  b = 4\n  c = a + b\n\n  if c == 10:\n      print ('c is equal \"10\" ')\n  else:\n      print ('c is not equal 10')\n</code></pre> <p>c is not equal 10</p> <pre><code>if c != 10:\n      print ('c is not equal \"10\" ')\n  else:\n      print ('c is equal \"10\" ')\n</code></pre> <p>c is not equal \"10\"</p> <ul> <li>EXP - 2</li> </ul> <pre><code>  number = input('Enter a number: ')\n  number = int(number)\n\n  if 50 &lt;= number &lt;= 100:\n      print (\" your number is between 50 and 100\")\n  elif number &lt;= 50:\n      print (\" Your number is smaller then 50\")\n  else:\n      print (\" Your number is bigger then 100\")\n</code></pre> <ul> <li>EXP - 3</li> </ul> <pre><code>our_staff_list = ['ahmet', 'ayla', 'bilal', 'berrin']\n  staff = input ('Please enter your name :')\n\n  if staff in our_staff_list:\n  print ('Hello '+staff+ ' you are welcome')\n  else :\n  print ('You are not our staff')\n</code></pre> <ul> <li>EXP - 4</li> </ul> <pre><code>version = \"CSR1000V Software (X86_64_LINUX_IOSD-UNIVERSALK9-M), Version 16.3.1, RELEASE\"\n  if '16.3' in version:\n  print ('Your device is up to date')\n</code></pre> <p>Your device is up to date</p>"},{"location":"collaboration/clauto/clauto/#loops-in-python","title":"Loops in Python","text":"<ul> <li> <p>The general premise behind a while loop is that some set of code is executed while some condition is true. The syntax required is similar to what we used when creating if-elif-else statements. The while statement is completed with a colon (:) and the code to be executed is also indented four spaces.</p> </li> <li> <p>EXP - 1 </p> </li> </ul> <pre><code>  counter = 1\n\n  while counter &lt;= 5:\n      print (counter)\n      counter += 1\n  print ('End of loop')\n</code></pre> <p>1</p> <p>2</p> <p>3</p> <p>4</p> <p>5</p> <p>End of loop</p> <ul> <li>EXP - 2</li> </ul> <pre><code>  counter = 1\n\n  while counter &lt;= 5:\n      if counter % 2 == 0:\n          print (counter, ' is even number')\n          counter += 1 \n      else:\n          print (counter, ' is odd number')\n          counter += 1 \n  print ('End of loop')\n</code></pre> <p>1 is odd number</p> <p>2 is even number</p> <p>3 is odd number</p> <p>4 is even number</p> <p>5 is odd number</p> <p>End of loop</p> <ul> <li>EXP - 3</li> </ul> <pre><code>  vendor_list = ['cisco', 'juniper', 'dell']\n  for vendor in vendor_list:\n      print (vendor)\n</code></pre> <p>cisco</p> <p>juniper</p> <p>dell</p> <ul> <li> <p>EXP - 4</p> </li> <li> <p>find prime number between two numbers</p> </li> </ul> <pre><code>num_1 = 1\nnum_2 = 15\n\nfor num in range (int(num_1),int(num_2)+1):\n    if num &gt; 1:\n        for i in range (2,num):\n            if num % i ==0:\n                break\n            else:\n              print (str(num)+ ' is prime number')\n</code></pre> <p>2 is prime number</p> <p>3 is prime number</p> <p>5 is prime number</p> <p>7 is prime number</p> <p>11 is prime number</p> <p>13 is prime number</p>"},{"location":"collaboration/clauto/clauto/#break-continue-pass-usage","title":"Break / Continue / Pass usage","text":"<p><code>Break</code> stop the loop</p> <pre><code>Devices = ['RT01','RT02','RT03','SW01','SW02']\n\nfor dev in Devices:\n    if dev == 'RT03':\n        break\n    print (dev)\nprint ('end of loop')\n</code></pre> <p>RT01 RT02 end of loop</p> <p><code>Continue</code> bypass the item but not stop the loop</p> <pre><code>Devices = ['RT01','RT02','RT03','SW01','SW02']\n\nfor dev in Devices:\n    if dev == 'RT03':\n        continue\n    print (dev)\nprint ('end of loop')\n</code></pre> <p>RT01 RT02 SW01 SW02 end of loop</p> <p>The <code>pass</code> statement is used as a placeholder for future code. When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed. Empty code is not allowed in loops, function definitions, class definitions, or in if statements.</p> <pre><code>def passFunc ():\n    pass\n\npassFunc()\n</code></pre>"},{"location":"collaboration/clauto/clauto/#functions","title":"Functions","text":"<p>If you want to use code block againg and again, you should use <code>function</code>.</p> <pre><code>def firstFunc ():\n    print ('this is first function')\n\nfirstFunc()\n</code></pre> <p>this is first function</p> <p>Functions insert between codes then continue after execution from this point</p> <pre><code>print ('this is 1')\nprint ('this is 2')\nfirstFunc()\nprint ('this is 3')\nprint ('this is 4')\nfirstFunc()\nprint ('this is 5')\n</code></pre> <p>this is 1 this is 2 this is function this is 3 this is 4 this is function this is 5</p> <p>You can use parameter</p> <pre><code>def config_sw_port (interface,VlanID):\n    cfgstr = f'''\nInterface {interface}\nSwitchport mode access\nSwitchport access vlan {VlanID}\n'''\n    return cfgstr\n\nprint (config_sw_port ('gi0/1/0','10'))\nprint (config_sw_port ('gi0/1/1','20'))\n</code></pre> <p>Interface gi0/1/0 Switchport mode access Switchport access vlan 10</p> <p>Interface gi0/1/1 Switchport mode access Switchport access vlan 20</p> <p>PS: You have to use all parameters.</p> <p>If you want to use parameter as optional:</p> <pre><code>def sum (num1,num2=5):\n    print (num1 + num2)\n\nsum (13)\nsum (13,10)\n</code></pre> <p>18 23</p> <p>For using result of function, there is an option 'return'. Lets test on example</p> <pre><code>def sum (num1,num2=5):\n    print (num1 + num2)\n\na = sum(5,15)\n\nb = a + 5\nprint (b)\n</code></pre> <p>TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'</p> <pre><code>def sum (num1,num2=5):\n    return (num1 + num2)\n\na = sum(5,15)\n\nb = a + 5\nprint (b)\n</code></pre> <p>25</p> <p>When first return execute, function will end. Attention!</p> <pre><code>def sum (num1,num2=5):\n    return num1\n    return (num1 + num2)\n\na = sum(5,15)\n\nb = a + 5\nprint (b)\n</code></pre> <p>10</p>"},{"location":"collaboration/clauto/clauto/#arg-and-kwarg-usage","title":"ARG and KWARG Usage","text":"<p>If you don't know that how many argument is insert to founction, you should use 'ARGS'</p> <pre><code>def sum (num1, num2):\n    print (num1 + num2)\n\nsum(14,15) # 29\n\n#\u00a0lets use with 3 argument\n\nsum (12,13,14)\n</code></pre> <p>TypeError: sum() takes 2 positional arguments but 3 were given</p> <p>you should use <code>arg</code></p> <pre><code>def sum (Val):\n    print (type(Val))\nsum(14) # type is 'int'\nsum ('14') #\u00a0type is 'str'\nsum ({'hostname':'RT01'}) #\u00a0type is 'dict'\n</code></pre> <p> <pre><code>def sum (*Val): \n    result = 0\n    for item in Val:\n        result += item\n    print (result)\nsum(14,17,19,10) \n</code></pre> <p>60</p> <p>If your values are dict, you should use 'kwargs'</p> <pre><code>def sum (**Val):\n    print (type(Val))\nsum() \n</code></pre> <p> <pre><code>def get_pers (**detail):\n    for data in detail:\n        print (data)\n\nget_pers(username='cisco',password='Cisco1',port = 22)\n</code></pre> <p>username password port</p> <pre><code>def get_pers (**detail):\n    for data in detail.keys():\n        print (data)\n\nget_pers(username='cisco',password='Cisco1',port = 22)\n</code></pre> <p>username password port</p> <pre><code>def get_pers (**detail):\n    for data in detail.values():\n        print (data)\n\nget_pers(username='cisco',password='Cisco1',port = 22)\n</code></pre> <p>cisco Cisco1 22</p> <pre><code>def get_pers (**detail):\n    for data in detail.items():\n        print (data)\n\nget_pers(username='cisco',password='Cisco1',port = 22)\n</code></pre> <p>('username', 'cisco') ('password', 'Cisco1') ('port', 22)</p> <pre><code>def get_pers (**detail):\n    for key,val in detail.items():\n        print (key,val)\n\nget_pers(username='cisco',password='Cisco1',port = 22)\n</code></pre> <p>username cisco password Cisco1 port 22</p>"},{"location":"collaboration/clauto/clauto/#zip-function-usage","title":"ZIP Function Usage","text":"<p>The zip() function returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together, and then the second item in each passed iterator are paired together etc.</p> <pre><code>VlanIDs = [10,20,30]\nInterfaceList = ['Gi0/1', 'Gi0/2', 'Gi0/3']\n\nfor intcfg in zip (VlanIDs, InterfaceList):\n    vlan, interface = intcfg [0], intcfg [1]\n    cfgstr = f'''inter {interface}\\nswitchport mode access\\nswitchport access vlan {vlan}\\n'''\n    print (cfgstr)\n</code></pre> <p>inter Gi0/1 switchport mode access switchport access vlan 10</p> <p>inter Gi0/2 switchport mode access switchport access vlan 20</p> <p>inter Gi0/3 switchport mode access switchport access vlan 30</p>"},{"location":"collaboration/clauto/clauto/#class-structure","title":"Class Structure","text":"<p>Python is an object oriented programming language.Almost everything in Python is an object, with its properties and methods.</p> <p>Lets compare with class and without class</p> <pre><code>dev1host = 'RT01'\ndev1user = 'admin'\ndev1password = 'admin1'\n\ndev2host = 'SW01'\ndev2user = 'cisco'\ndev2password = 'cisco1'\n</code></pre> <pre><code>class device ():\n    def __init__ (self,devhost,devusr,devpass):\n        self.host = devhost\n        self.user = devusr\n        self.password = devpass\n\ndev1 = device('RT01','admin','admin1')\nprint (dev1.ad)\ndev2 = device ('SW01','cisco','cisco1')\nprint (dev2.password)\n</code></pre> <p><code>device</code> class has three parameters: devhost,devusr,devpass. We clone a copy from this class and create an <code>object</code> which has name <code>dev1</code>. And we can create <code>dev2</code> easly.</p>"},{"location":"collaboration/clauto/clauto/#some-python-libraries-and-examples","title":"Some Python Libraries and Examples","text":"<ul> <li>EXP - 1 (First netmiko program)</li> </ul> <p>for website of netmiko</p> <pre><code>import netmiko\n\nip = \"192.168.81.101\"\nuser = \"cisco\"\npw = \"cisco1\"\ndevice_type = \"cisco_ios\"\nport = \"22\"\n\nnet_connect = netmiko.ConnectHandler(ip = ip, device_type = device_type, username = user, password = pw, port = port)\nshow_version = net_connect.send_command(\"show ip int brief\")\nprint (show_version)\n</code></pre> <ul> <li>Alternative</li> </ul> <p><pre><code>import netmiko\n\nCisco_IOSXE = {\n\n\"host\" : \"192.168.81.101\",\n\"username\" : \"cisco\",\n\"password\" : \"cisco1\",\n\"device_type\" : \"cisco_ios\"\n}\n\nnet_connect = netmiko.ConnectHandler(**Cisco_IOSXE)\noutput = net_connect.send_command(\"show ip int brief\")\nprint (output)\n</code></pre> output</p> <pre><code>GigabitEthernet1 192.168.81.112 YES NVRAM up up\nGigabitEthernet2 unassigned YES NVRAM administratively down down\nGigabitEthernet3 unassigned YES NVRAM administratively down down\n</code></pre> <ul> <li>EXP - 2 (While loop usage)</li> </ul> <pre><code>import netmiko\n\nfirst_3_Octet = \"192.168.81.\"\nlast_Octet = 101\n\nwhile last_Octet &lt;= 103 :\n\n    ip_ADDR = first_3_Octet + str(last_Octet)\n    Cisco_IOSXE = {\n    \"ip\" : ip_ADDR,\n    \"username\" : \"cisco\",\n    \"password\" : \"cisco1\",\n    \"device_type\" : \"cisco_ios\"\n}\n    net_connect = netmiko.ConnectHandler(**Cisco_IOSXE)\n    output = net_connect.send_command(\"show ip int brief\")\n    print (output)\n    print (\"-\"*80)\n    last_Octet += 1\n</code></pre> <p>output </p> <pre><code>----------------------------------- OUTPUT -------------------------------------\n--------------------------------------------------------------------------------\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.101  YES manual up                    up      \nGigabitEthernet2       unassigned      YES NVRAM  administratively down down    \nGigabitEthernet3       unassigned      YES NVRAM  administratively down down       \n--------------------------------------------------------------------------------\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.102  YES manual up                    up\nGigabitEthernet2       unassigned      YES NVRAM  administratively down down\nGigabitEthernet3       unassigned      YES NVRAM  administratively down down\n--------------------------------------------------------------------------------\n\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.103  YES manual up                    up\nGigabitEthernet2       unassigned      YES NVRAM  administratively down down\nGigabitEthernet3       unassigned      YES NVRAM  administratively down down\n--------------------------------------------------------------------------------\n</code></pre> <ul> <li>EXP - 3 (Define function)</li> </ul> <pre><code>import netmiko\n\nfirst_Three_Octet = \"192.168.81.\"\nlast_Octet = 101\n\nusername = \"cisco\"\npassword = \"cisco1\"\ndevice_type = \"cisco_ios\"\n\ndef sorgu(ip_Addr):\n    net_connect = netmiko.ConnectHandler(ip=ip_Addr, username=username, password=password, device_type=device_type)\n    return net_connect.send_command(\"show ip int brief\")\n\nwhile last_Octet &lt;= 103:\n    ip_Addr = first_Three_Octet + str(last_Octet)\n    ip_Int_Br = sorgu(ip_Addr)\n    print (ip_Int_Br)\n    print (\"-\"*80)\n    last_Octet += 1\n</code></pre> <p>output</p> <p><pre><code>----------------------------------- OUTPUT -------------------------------------\n--------------------------------------------------------------------------------\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.101  YES manual up                    up      \nGigabitEthernet2       unassigned      YES NVRAM  administratively down down    \nGigabitEthernet3       unassigned      YES NVRAM  administratively down down       \n--------------------------------------------------------------------------------\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.102  YES manual up                    up\nGigabitEthernet2       unassigned      YES NVRAM  administratively down down\nGigabitEthernet3       unassigned      YES NVRAM  administratively down down\n--------------------------------------------------------------------------------\n\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.103  YES manual up                    up\nGigabitEthernet2       unassigned      YES NVRAM  administratively down down\nGigabitEthernet3       unassigned      YES NVRAM  administratively down down\n--------------------------------------------------------------------------------\n</code></pre> * EXP - 4 (For loop usage in list)</p> <p><pre><code>import netmiko\n\ndevice_List = [\"192.168.81.101\", \"192.168.81.102\", \"192.168.81.103\"]\n\n\nfor ip in device_List :\n\n    Cisco_IOSXE = {\n    \"ip\" : ip,\n    \"username\" : \"cisco\",\n    \"password\" : \"cisco1\",\n    \"device_type\" : \"cisco_ios\"\n    }\n\n    net_connect = netmiko.ConnectHandler(**Cisco_IOSXE)\n    output = net_connect.send_command(\"show ip int brief\")\n    print (output)\n    print (\"-\"*80)\n</code></pre> output</p> <p><pre><code>----------------------------------- OUTPUT -------------------------------------\n--------------------------------------------------------------------------------\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.101  YES manual up                    up      \nGigabitEthernet2       unassigned      YES NVRAM  administratively down down    \nGigabitEthernet3       unassigned      YES NVRAM  administratively down down       \n--------------------------------------------------------------------------------\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.102  YES manual up                    up\nGigabitEthernet2       unassigned      YES NVRAM  administratively down down\nGigabitEthernet3       unassigned      YES NVRAM  administratively down down\n--------------------------------------------------------------------------------\n\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       192.168.81.103  YES manual up                    up\nGigabitEthernet2       unassigned      YES NVRAM  administratively down down\nGigabitEthernet3       unassigned      YES NVRAM  administratively down down\n--------------------------------------------------------------------------------\n</code></pre> * EXP - 5 (File Operations) </p> <pre><code>import netmiko\n\nCisco_IOSXE = {\n\"ip\" : \"192.168.81.101\",\n\"username\" : \"cisco\",\n\"password\" : \"cisco1\",\n\"device_type\" : \"cisco_ios\"\n}\n\nnet_connect = netmiko.ConnectHandler(**Cisco_IOSXE)\noutput = net_connect.send_command(\"show ip int brief\")\nprint (output)\n\n# for writing output to .txt file\n\nwriting_output = open (\"config_file.txt\",\"w\")\nwriting_output.write(output)\nwriting_output.write(\"\\n\")\nwriting_output.write(\"-\" * 80)\nwriting_output.write(\"\\n\")\nwriting_output.close()\n\n# add some data to existing file\n\n\nshow_cpu = net_connect.send_command(\"show process cpu\")\n\nadd_data = open (\"config_file.txt\", \"a\")\nadd_data.write(show_cpu)\nadd_data.close\n</code></pre>"},{"location":"collaboration/clauto/clauto/#python-for-ios-devices","title":"Python for ios devices","text":"<p>SSH for Cisco Devices</p> <pre><code>from netmiko import ConnectHandler\n\ncisco_ios = {\n    'device_type': 'cisco_ios',\n    'host':   '192.168.71.204',\n    'username': 'cisco',\n    'password': 'cisco1',\n    'port' : 22,          # optional, defaults to 22\n}\n\nnet_connect = ConnectHandler(**cisco_ios)\noutput = net_connect.send_command('show ip int brief')\n\nprint(output)\n</code></pre> <p>Using <code>send_config_set</code></p> <p><pre><code>from netmiko import ConnectHandler\n\ncisco_ios = {\n    'device_type': 'cisco_ios',\n    'host':   '192.168.71.204',\n    'username': 'cisco',\n    'password': 'cisco1',\n    'port' : 22,          # optional, defaults to 22\n}\n\nnet_connect = ConnectHandler(**cisco_ios)\n\ncommand_set = ['show ip int brief']\n\noutput = net_connect.send_config_set(command_set)\n\nprint(output)\n</code></pre> Parse Configuration</p> <pre><code>from netmiko import ConnectHandler\n\ncisco_ios = {\n    'device_type': 'cisco_ios',\n    'host':   '192.168.71.204',\n    'username': 'cisco',\n    'password': 'cisco1',\n    'port' : 22,          # optional, defaults to 22\n}\n\nnet_connect = ConnectHandler(**cisco_ios)\noutput = net_connect.send_command('show ip int brief')\n\nfor lines in output.split('\\n'):\n    if 'up' in lines:\n        print(lines.split()[0])\n</code></pre> <p>File Operations</p> <pre><code>from netmiko import ConnectHandler\n\ncisco_ios = {\n    'device_type': 'cisco_ios',\n    'host':   '192.168.71.204',\n    'username': 'cisco',\n    'password': 'cisco1',\n    'port' : 22,          # optional, defaults to 22\n}\n\nnet_connect = ConnectHandler(**cisco_ios)\noutput = net_connect.send_command('show ip int brief')\n\nwith open ('show_ip_int_brief.txt', 'w') as f:\n    f.write(output)\n    f.close()\n</code></pre> <p>Using <code>textfsm</code> </p> <pre><code>from netmiko import ConnectHandler\nfrom pprint import pprint\n\ncisco_ios = {\n    'device_type': 'cisco_ios',\n    'host':   '192.168.71.204',\n    'username': 'cisco',\n    'password': 'cisco1',\n    'port' : 22,          # optional, defaults to 22\n}\n\nnet_connect = ConnectHandler(**cisco_ios)\noutput = net_connect.send_command('show ip int brief',use_textfsm=True)\n\ndict01 = output[0]\n# print(dict01)\n\nprint(dict01['intf'])\n</code></pre> <p>Switch Configuration</p> <p><pre><code>for n in range (1,22):\n   access_port_template = ['GigabitEthernet 0/{}','switchport mode access', 'switchport access vlan 10',\n   'switchport voice vlan 5','spanning-tree portfast','spanning-tree bpduguard enable']\n\n   a = '\\n'.join(access_port_template).format(n)\n\n   print (a)\n\n'''\n\nlist01 = ['a','b','c']\n\ncfg01 = '\\n'.join(list01)\nprint (type(cfg01))\nprint (cfg01)\n\na\nb\nc\n\n'''\n</code></pre> <code>Telnet</code> for Cisco Device</p> <pre><code>import getpass\nimport telnetlib\n\nHOST = \"192.168.71.204\"\nuser = input(\"Enter your remote account: \")\npassword = getpass.getpass()\n\ntn = telnetlib.Telnet(HOST)\n\ntn.read_until(b\"Username: \")\ntn.write(user.encode('ascii') + b\"\\n\")\nif password:\n    tn.read_until(b\"Password: \")\n    tn.write(password.encode('ascii') + b\"\\n\")\n\ntn.write(b\"sh ip int brief\\n\")\ntn.write(b\"exit\\n\")\n\nprint(tn.read_all().decode('ascii'))\n</code></pre> <p>try / except / finally Usage</p> <pre><code>list01 = ['a','b','c']\ntry:\n    print (list01[2])\n\nexcept:\n    print ('someting went wrong')\nfinally:\n    print ('run in every conditition')\n</code></pre> <p><code>Schedule</code> Usage</p> <pre><code># Schedule Library imported\nimport schedule\nimport time\n\n# Functions setup\ndef tv_time():\n    print(\"TV series time\")\n\ndef good_luck():\n    print(\"Good Luck for Test\")\n\ndef work():\n    print(\"Study and work hard\")\n\ndef bedtime():\n    print(\"It is bed time go rest\")\n\ndef geeks():\n    print(\"Shaurya says Geeksforgeeks\")\n\n# Task scheduling\n# After every 10mins geeks() is called.\nschedule.every(10).minutes.do(geeks)\n\n# After every hour geeks() is called.\nschedule.every().hour.do(geeks)\n\n# Every day at 12am or 00:00 time bedtime() is called.\nschedule.every().day.at(\"00:00\").do(bedtime)\n\n# After every 5 to 10mins in between run work()\nschedule.every(5).to(10).minutes.do(work)\n\n# Every monday good_luck() is called\nschedule.every().monday.do(good_luck)\n\n# Every tuesday at 18:00 sudo_placement() is called\nschedule.every().tuesday.at(\"18:00\").do(tv_time)\n\n# Loop so that the scheduling task\n# keeps on running all time.\nwhile True:\n\n    # Checks whether a scheduled task\n    # is pending to run or not\n    schedule.run_pending()\n    time.sleep(1)\n</code></pre> <p>re Usage</p> <p><pre><code>import re\n\ntext = \"ilker isminde  55 adet karakter ve 2 adet hece vardir.\"\n\n\nnumbers = re.findall(r'\\d', text)\nnumbers2 = re.findall(r'\\d{2}', text) # 2 digitlik ifadeleri bul\n\nprint(numbers2)\n\n# print(numbers)\n\nmatch01 = re.match('i',text) # Match fonksiyonu sadece ilk kelimenin e\u015fle\u015fmesi i\u00e7in kullan\u0131l\u0131r\nprint(match01.group())\n\n\nsearch01 = re.search('5',text)\nprint (search01.group())\n\n\nfindall01 = re.findall('5',text)\nprint(findall01)\n\n\nip_address = '192.168.20.15 255.255.255.0'\n\nip_test = re.search('168',ip_address)\nprint(ip_test)\n</code></pre> Mail Operations</p> <pre><code>import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nmessage = MIMEMultipart()\nmessage[\"To\"] = 'saintcisco68@gmail.com'\nmessage[\"From\"] = 'ilker.p4ne@gmail.com'\nmessage[\"Subject\"] = 'Alert !'\n\ntitle = '&lt;b&gt; Title line here. &lt;/b&gt;'\nmessageText = MIMEText('''Yuksek CPU uyarisi''','html')\nmessage.attach(messageText)\n\nemail = 'ilker.p4ne@gmail.com'\npassword = 'urpellkcjqixlbxd' # Gmail i\u00e7in uygulama password\u00fc gerekli.\n\nserver = smtplib.SMTP('smtp.gmail.com:587')\nserver.ehlo('Gmail')\nserver.starttls()\nserver.login(email,password)\nfromaddr = 'ilker.p4ne@gmail.com'\ntoaddrs  = 'saintcisco68@gmail.com'\nserver.sendmail(fromaddr,toaddrs,message.as_string())\n\nserver.quit()\n</code></pre>"},{"location":"collaboration/clauto/clauto/#connection-to-cucm-with-python","title":"Connection to CUCM with Python","text":"<p>For connecting to CUCM with <code>PYTHON</code> you need some libraries. Most important one is <code>ZEEP</code>. <code>ZEEP</code> convert your imput to <code>SOAP</code>. Other zeep functions <code>cache</code>, <code>HistoryPlugin</code>, <code>helpers</code> use for resource and fault management. The last library is <code>request</code>. <code>request</code> uses for request and authentication. </p> <p><code>SOAP</code> stands for Simple Object Access Protocol, and it is a messaging protocol used in web services to exchange structured information between applications over a network, typically the internet.</p> <p><code>SOAP</code> defines a standard XML-based format for sending messages that includes a header and a body. The header contains information about the message, such as its content type and destination, while the body contains the actual data being transmitted.</p> <p><code>SOAP</code> messages can be sent using a variety of transport protocols, including HTTP, SMTP, and TCP. The SOAP protocol is often used in enterprise-level applications, where interoperability between different systems is critical.</p> <p><code>URLLIB3</code> use generally for bypass certificate warnning.   </p> <pre><code>from requests import Session\nfrom zeep import Client\nfrom zeep.transports import Transport\nfrom urllib3 import disable_warnings\nfrom urllib3.exceptions import InsecureRequestWarning\nfrom zeep.cache import SqliteCache\nfrom zeep.plugins import HistoryPlugin\nfrom zeep.exceptions import Fault\nfrom zeep.helpers import serialize_object\nfrom lxml import etree\nfrom requests.auth import HTTPBasicAuth\n</code></pre> <p>If you want to ignore insecure request warning you should use :</p> <pre><code>disable_warnings(InsecureRequestWarning)\n</code></pre> <p>If you want to connect <code>CUCM</code> you need session like below:</p> <pre><code>session = Session()\nsession.verify = False\nsession.auth = HTTPBasicAuth(username, password)\ntransport = Transport(cache=SqliteCache(), session=session, timeout=20)\nhistory = HistoryPlugin()\nclient = Client(wsdl=wsdl, transport=transport, plugins=[history])\naxl = client.create_service(binding, address)\n</code></pre> <p>When you get an error, for analysis this error you should see converted xml data. Below function helps you for this analysis.</p> <pre><code>def show_history():\n    for item in [history.last_sent, history.last_received]:\n        print(etree.tostring(item[\"envelope\"], encoding=\"unicode\", pretty_print=True))  \n</code></pre> <p>Lastly you need credentials:</p> <p><pre><code>username = 'username'\npassword = 'password'\nfqdn = 'Ip_Address_of_Cucm'\naddress = 'https://{}:8443/axl/'.format(fqdn)\nwsdl = 'file://C:/Users/imansur/Desktop/Clauto/schema/current/AXLAPI.wsdl'\nbinding = \"{http://www.cisco.com/AXLAPIService/}AXLAPIBinding\"\n</code></pre> * Full Script example for connection <code>CUCM</code></p> <pre><code>from requests import Session\nfrom zeep import Client\nfrom zeep.transports import Transport\nfrom urllib3 import disable_warnings\nfrom urllib3.exceptions import InsecureRequestWarning\nfrom zeep.cache import SqliteCache\nfrom zeep.plugins import HistoryPlugin\nfrom zeep.exceptions import Fault\nfrom zeep.helpers import serialize_object\nfrom lxml import etree\nfrom requests.auth import HTTPBasicAuth\n\ndisable_warnings(InsecureRequestWarning)\n\nusername = 'username'\npassword = 'password'\nfqdn = 'Ip_Address_of_Cucm'\naddress = 'https://{}:8443/axl/'.format(fqdn)\nwsdl = 'file://C:/Users/imansur/Desktop/Clauto/schema/current/AXLAPI.wsdl'\nbinding = \"{http://www.cisco.com/AXLAPIService/}AXLAPIBinding\"\n\nsession = Session()\nsession.verify = False\nsession.auth = HTTPBasicAuth(username, password)\ntransport = Transport(cache=SqliteCache(), session=session, timeout=20)\nhistory = HistoryPlugin()\nclient = Client(wsdl=wsdl, transport=transport, plugins=[history])\naxl = client.create_service(binding, address)\n\ndef show_history():\n    for item in [history.last_sent, history.last_received]:\n        print(etree.tostring(item[\"envelope\"], encoding=\"unicode\", pretty_print=True))    \n</code></pre> <p>Partition</p> <p>For Adding Partition</p> <pre><code>pt_list = ['pt_1', 'pt_2', 'pt_3']\ndescription_list = ['desc_pt_1','desc_pt_2','desc_pt_3']\n\nfor i in range(len(pt_list)):\n\n    try:\n        addPartition = axl.addRoutePartition(routePartition = {'name' : pt_list[i],\n                                                               'description' : description_list[i]})\n    except Fault:\n        print(show_history)\n</code></pre> <p>For Updating Partition</p> <pre><code>pt_name = 'pt_1'\n\ntry:\n    updatePartition = axl.updateRoutePartition(name = '{}'.format(pt_name),\n                                     newName = 'pt_1_updated')\nexcept Fault:\n    print(show_history)\n</code></pre> <p>For Removing Partition</p> <pre><code>pt_name =  'pt_2'\n\ntry:\n    removePartition = axl.removeRoutePartition(name = '{}'.format(pt_name))\n\nexcept Fault:\n    print(show_history)\n</code></pre> <p>For List Partitions</p> <pre><code>try:\n    partitions = axl.listRoutePartition(searchCriteria = {'name':'%'}, returnedTags = {'name':'','description':''})\n    for pt in partitions['return']['routePartition']:\n        print(pt['name'])\n\nexcept Fault:\n    print (show_history)\n</code></pre> <p>Calling Search Space</p> <p>For Adding CSS</p> <pre><code>css_name = 'css_1'\ndescription = 'desc_1'\npartitions = 'pt_1, pt_2'\n\ntry:\n    addPartition = axl.addCss(css = {'name' : '{}'.format(css_name),\n                                     'description' : '{}'.format(description),\n                                     'members' : {'member': [{'routePartitionName' : 'pt_1',\n                                                             'index' : '1'},\n                                                            {'routePartitionName' : 'pt_2',\n                                                             'index' : '2'}]}})\nexcept Fault:\n    print(show_history)\n</code></pre> <p>For Updating CSS</p> <pre><code>css_name = 'css_1'\ndescription = 'desc_1_updated'\n\ntry:\n    addPartition = axl.updateCss(name = '{}'.format(css_name),\n                              description = '{}'.format(description),\n                              members = {'member': {'routePartitionName' : 'pt_3',\n                                                    'index' : '1'}})\nexcept Fault:\n    print(show_history)\n</code></pre> <p>For Remoce CSS</p> <pre><code>css_name = 'css_1'\n\ntry:\n    addPartition = axl.removeCss(name = '{}'.format(css_name))\n\nexcept Fault:\n    print(show_history)\n</code></pre> <p>For List CSS</p> <pre><code>try:\n    listCss = axl.listCss(searchCriteria = {'name':'%'},returnedTags = {'name':''})\n    print (listCss)\n\n\nexcept Fault:\n    show_history()\n</code></pre> <p>Phone</p> <p>For Adding Phone</p> <pre><code>phone_mac = '000100020003'\nphone_model = '7945'\nfull_name = 'P4Collab Test Device'\nphone_protocol = 'SCCP'\nphone_css = 'CSS_DEMO'\nphone_dp = 'Default'\nphone_loc = 'Hub_None'\nphone_mrgl = 'MRGL'\nline_no = '2500'\nline_pt = 'ABQ_PT'\nline_mask = '2XXX'\n\ntry:\n    add_phone = axl.addPhone (phone={'name':'SEP{}'.format(phone_mac),\n                                     'description':'{}'.format(full_name),\n                                     'product' : 'Cisco {}'.format(phone_model),\n                                     'class':'Phone',\n                                     'protocol':'{}'.format(phone_protocol),\n                                     'callingSearchSpaceName':'{}'.format(phone_css),\n                                     'devicePoolName':'{}'.format(phone_dp),\n                                     'locationName':'{}'.format(phone_loc),\n                                     'mediaResourceListName':'{}'.format(phone_mrgl),\n                                     'commonPhoneConfigName' : 'Standard Common Phone Profile',\n                                     'softkeyTemplateName' : 'Standard User',\n                                     'enableExtensionMobility' : 'True',\n                                     'phoneTemplateName' : 'Standard {0} {1}'.format(phone_model,phone_protocol),\n                                     'securityProfileName':'Cisco {0} - Standard {1} Non-Secure Profile'.format(phone_model,phone_protocol),\n                                     'lines':{'line':{'index':'1',\n                                                      'display':'{}'.format(full_name),\n                                                      'displayAscii':'{}'.format(full_name),\n                                                      'label':'{}'.format(full_name),\n                                                      'e164Mask':'{}'.format(line_mask),\n                                                      'dirn': {'pattern':'{}'.format(line_no),\n                                                               'routePartitionName':'{}'.format(line_pt)}}}})\n\n\nexcept :\n    print (show_history)\n</code></pre> <p>For Update Phone</p> <pre><code>phone_mac = '000100020003'\nphone_model = '7945'\nfull_name = 'P4Collab Test Device Update'\nphone_protocol = 'SCCP'\nphone_css = 'CSS_DEMO'\nphone_dp = 'Default'\nphone_loc = 'Hub_None'\nphone_mrgl = 'MRGL'\nline_no = '2501'\nline_pt = 'ABQ_PT'\nline_mask = '2XXX'\n\ntry:\n    add_phone = axl.updatePhone (name ='SEP{}'.format(phone_mac),\n                                 description ='{}'.format(full_name),\n                                 lines = {'line':{'index':'1',\n                                          'display':'{}'.format(full_name),\n                                          'displayAscii':'{}'.format(full_name),\n                                          'label':'{}'.format(full_name),\n                                          'dirn': {'pattern':'{}'.format(line_no),\n                                                   'routePartitionName':'{}'.format(line_pt)}}})    \n</code></pre> <p>For Listing Phone</p> <p><pre><code>try:\n    phones = axl.listPhone(searchCriteria={'name': '%'}, returnedTags={'name': '', 'description':''})\n\n    for phone in phones['return']['phone']:\n       print(phone['name'], phone['description'])\n    except Fault:\n        print(show_history)\n</code></pre> <code>%</code> means any name. You can use regular expression like <code>%2222%</code>. This means phones which name includes <code>2222</code></p> <p>For Adding Jabber Device</p> <p><pre><code>userId = 'imansur'\njabber_model = 'CSF'\njabber_type = 'Unified Client Services Framework'\nfull_name = 'P4Collab Test Device'\nphone_css = 'CSS_DEMO'\nphone_dp = 'Default'\nphone_loc = 'Hub_None'\nphone_mrgl = 'MRGL'\nline_no = '2500'\nline_pt = 'ABQ_PT'\nline_mask = '2XXX'\n\ntry:\n    add_phone = axl.addPhone (phone={'name':'{0}{1}'.format(jabber_model,userId),\n                                     'description':'{}'.format(full_name),\n                                     'product' : 'Cisco {}'.format(jabber_type),\n                                     'class':'Phone',\n                                     'protocol':'SIP',\n                                     'ownerUserName':'{}'.format(userId),\n                                     'callingSearchSpaceName':'{}'.format(phone_css),\n                                     'devicePoolName':'{}'.format(phone_dp),\n                                     'locationName':'{}'.format(phone_loc),\n                                     'mediaResourceListName':'{}'.format(phone_mrgl),\n                                     'commonPhoneConfigName' : 'Standard Common Phone Profile',\n                                     'securityProfileName':'Cisco {0} - Standard SIP Non-Secure Profile'.format(jabber_type),\n                                     'lines':{'line':{'index':'1',\n                                                      'display':'{}'.format(full_name),\n                                                      'displayAscii':'{}'.format(full_name),\n                                                      'label':'{}'.format(full_name),\n                                                      'e164Mask':'{}'.format(line_mask),\n                                                      'dirn': {'pattern':'{}'.format(line_no),\n                                                               'routePartitionName':'{}'.format(line_pt)},\n                                                               'associatedEndusers':{'enduser':'{}'.format(userId)}}}})\n\n\nexcept :\n    print (show_history)\n</code></pre> For Getting Phone</p> <pre><code>try:\n    phone = axl.getPhone(name='SEP001EF7C34A49')\n    spc_phone = phone['return']['phone']\n    print (spc_phone)\n    lines = phone['return']['phone']['lines']['line'][0]['dirn']['pattern']\n    print (lines)\n\nexcept Fault:\n    show_history()\n</code></pre> <p>Line</p> <p>For Adding Line</p> <p><pre><code>line_no = '1002'\nline_pt = 'ABQ_PT'\nfull_name = 'P4Collab'\nline_CSS = 'CSS_DEMO'\nvm_profile = 'Default'\nvm_enable = True\n\ntry:\n    phones = axl.addLine(line={'pattern':'{}'.format(line_no),\n                               'usage':'Device',\n                               #'routePartitionName':'{}'.format(line_pt),\n                               #'description':'{}'.format(full_name),\n                               #'alertingName':'{}'.format(full_name),\n                               #'asciiAlertingName':'{}'.format(full_name),\n                               #'shareLineAppearanceCssName':'{}'.format(line_CSS),\n                               #'voiceMailProfileName':'{}'.format(vm_profile),\n                               'callForwardAll':{'callingSearchSpaceName':'{}'.format(line_CSS),\n                                                 'forwardToVoiceMail':f'{vm_enable}'}\n                               })\nexcept Fault:\n    print (show_history)\n</code></pre> For Adding Multiple line</p> <pre><code>line_pt = 'ABQ_PT'\nfull_name = 'P4Collab'\nline_CSS = 'CSS_DEMO'\nvm_profile = 'Default'\nvm_enable = True\n\nfor line_no in range (2010,2020):\n    str_line_no = str(line_no)\n    try:\n        phones = axl.addLine(line={'pattern':'{}'.format(str_line_no),\n                                'usage':'Device',\n                                'routePartitionName':'{}'.format(line_pt),\n                                'description':'{}'.format(full_name),\n                                'alertingName':'{}'.format(full_name),\n                                'asciiAlertingName':'{}'.format(full_name),\n                                'shareLineAppearanceCssName':'{}'.format(line_CSS),\n                                'voiceMailProfileName':'{}'.format(vm_profile),\n                                'callForwardAll':{'callingSearchSpaceName':'{}'.format(line_CSS),\n                                                    'forwardToVoiceMail':f'{vm_enable}'}\n                                })\n    except Fault:\n        print (show_history)\n</code></pre> <p>For Updating Multiple Line</p> <p><pre><code>full_name = 'P4Collab-Updated'\n\nfor line_no in range (2010,2015):\n    str_line_no = str(line_no)\n    try:\n        phones = axl.updateLine(pattern='{}'.format(str_line_no),\n                                description='{}'.format(full_name)\n                                )\n    except Fault:\n        print (show_history)\n</code></pre> For Updating Line with New Pattern</p> <p><pre><code>str_line_no = '2010'\nnew_line_no = '2030'\n\ntry:\n    phones = axl.updateLine(pattern='{}'.format(str_line_no),\n                            newPattern = '{}'.format(new_line_no)\n                            )\nexcept Fault:\n    print (show_history)\n</code></pre> For getting Line</p> <pre><code>try:\n    phone = axl.getLine(pattern='9555',routePartitionName='ABQ_PT')\n    print (phone)\n\n\nexcept Fault:\n    show_history()\n</code></pre> <p>Pattern</p> <p>Listing Route Pattern</p> <pre><code>try:\n    phones = axl.listRoutePattern(searchCriteria={'pattern': '%'}, returnedTags={'pattern': ''})\n    list_pattern = phones['return']['routePattern']\n    for i in list_pattern:\n        print(i['pattern'])\n\nexcept Fault:\n    show_history()\n</code></pre> <p>Route Plan Report</p> <p>For Listing Route Plan Report</p> <p><pre><code>try:\n    phones = axl.listRoutePlan(searchCriteria={'dnOrPattern': '%'}, returnedTags={'dnOrPattern': '', 'routeDetail':'','type':''})\n\n    route_plan = phones['return']['routePlan']\n    for i in route_plan:\n        if i['type']=='Route':\n            print (i['dnOrPattern'])\n\nexcept Fault:\n    show_history()\n</code></pre> User</p> <p>For Adding User</p> <pre><code>firstName = 'ezo'\nlastName = 'mansur'\nuserid= 'emansur'\npin = '1234'\npassword = '123456'\n\ntry:\n    addUser = axl.addUser (user = {'userid' : '{}'.format(userid),\n                                  'firstName' : '{}'.format(firstName),\n                                  'lastName' : '{}'.format(lastName),\n                                  'associatedDevices' : {'device' : 'CSFimansur'},\n                                  'pin' : '1234',\n                                  'presenceGroupName': 'Standard Presence Group',\n                                  'password' : '123456',\n                                  'homeCluster' : 'true',\n                                  'associatedGroups' : {'userGroup' : {'name' : 'jabber_user',\n                                                                      'userRoles' : {'userRole' : 'jabber_user'}}}})\n    print (addUser)                                   \n\nexcept :\n    print (show_history)\n</code></pre> <p>For Getting User</p> <pre><code>try:\n    getUser = axl.addUser (userid ='imansur')\n    print (getUser)                                   \n\nexcept :\n    print (show_history)\n</code></pre> <p>Device Profile</p> <p>For Adding Device Profile</p> <pre><code>userId = 'imansur'\nfull_name = 'P4Collab Extension Mob'\nline_no = '2501'\nudp_name = 'UDPTEST'\nudp_model = 'Cisco 8865'\nmodel = '8865'\nudp_protocol = 'SIP'\nline_mask = '25XX'\nline_pt = 'ABQ_PT'\nudp_service = 'EM'\n\ntry:\n    axl_add_udp = axl.addDeviceProfile(deviceProfile = {'name' : 'UDP{}'.format(userId),\n                                                        'description' : '{}'.format(full_name),\n                                                        'product' : '{}'.format(udp_model),\n                                                        'class' : 'Device Profile',\n                                                        'protocol' : '{}'.format(udp_protocol),\n                                                        'lines':{\n                                                            'line':{\n                                                                'index':'1',\n                                                                'display':'{}'.format(full_name),\n                                                                'displayAscii':'{}'.format(full_name),\n                                                                'label':'{}'.format(full_name),\n                                                                'e164Mask':'{}'.format(line_mask),\n                                                                'dirn': {\n                                                                    'pattern':'{}'.format(line_no),\n                                                                    'routePartitionName':'{}'.format(line_pt)}}},\n                                                        'services' : {\n                                                            'service' : {\n                                                                'telecasterServiceName' : '{}'.format(udp_service),\n                                                                'name' : '{}'.format(udp_service)}},\n                                                        'phoneTemplateName' : 'Standard {0} {1}'.format(model,udp_protocol),\n                                                        'softkeyTemplateName' : 'Standard User'})\nexcept:\n    print(show_history)\n</code></pre> <p>For Getting Device Profile</p> <pre><code>userId = 'imansur'\nfull_name = 'P4Collab Extension Mob'\nline_no = '2500'\nudp_name = 'UDPTEST'\n\ntry:\n    axl_get_profile = axl.getDeviceProfile(name='{}'.format(udp_name))\n    print(axl_get_profile)                                 \n\nexcept :\n    print (show_history)\n</code></pre>"},{"location":"collaboration/clauto/clauto/#git-usage","title":"GIT Usage","text":"<p>Git Installation</p> <ul> <li>Step - 1</li> </ul> <p>Download git app from https://git-scm.com/downloads which is suitable for your <code>os</code></p> <p></p> <ul> <li>Step - 2</li> </ul> <p>Install app generally next-next and choose <code>Use git from bash only</code></p> <p></p> <p>use default settings on later steps</p> <p> </p> <ul> <li>Step - 3</li> </ul> <p>Open git bash</p> <p></p> <p>configure git account (username/email) and check it</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~\n$ git config --global user.name \"Ilker MANSUR\"\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~\n$ git config --global user.email \"ilker.p4ne@gmail.com\"\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~\n$ git config --global user.name\nIlker MANSUR\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~\n$ git config --global user.email\nilker.p4ne@gmail.com\n</code></pre> Create Project  * Create project directory on desktop and define this directory as a git project</p> <p>PS : Some usefull bash commands</p> <pre><code>pwd                                                     - Print Working Directory\ncd                                                      - Change Directory\nls                                                      - LiSt\nls -a                                                   - List hidden file\nclear / ctrl+l                                          - Erase terminal\nmkdir                                                   - MaKe DIRectory\nrmdir                                                   - ReMove DIRectory\n</code></pre> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop\n$ mkdir Project_01\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop\n$ cd Project_01/\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01\n$ git init\nInitialized empty Git repository in C:/Users/workstation01/Desktop/Project_01/.git/\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ ls -a\n./  ../  .git/\n</code></pre> <p>Adding File</p> <p>Create a file which is about your project. It may be .py file or another format. Git support lots of file format. Before adding .py file, check the status with <code>git status</code> command.</p> <pre><code>$ git status\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>now add .py file to project directory then check status again</p> <pre><code>$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        test.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>this means, there is a file but you didnt add this file to git repository.</p> <p>Use <code>git add .</code> command for adding all file in this directory to git repository.</p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git add .\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   test.py\n\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>\u0131t is not enough <code>git add .</code> command you should <code>commit</code> with <code>git commit -m \"comment etc\"</code> command.</p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git commit -m \"First Commit\"\n[master (root-commit) 4338f62] First Commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 test.py\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <ul> <li>Git Log</li> </ul> <p>Add another file which has name test2.py and add then commit this file. You can check all version with <code>git log</code></p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git log\ncommit ad8b1f6ea2cb23558efe078ceb00061f1007abd7 (HEAD -&gt; master)\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:45:21 2023 +0300\n\n    Second Commit\n\ncommit 4338f62d47ec563a255708792160a86c4804015d\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:39:55 2023 +0300\n\n    First Commit\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>Git Diff</p> <p>Make some changes on test.py</p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ nano test.py\n</code></pre> <p></p> <p>check again with <code>git status</code></p> <p><pre><code>$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   test.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <code>modified</code> means \"someone change this file. If you want to see modification, you should use <code>git diff</code> command.</p> <pre><code>$ git diff\nwarning: in the working copy of 'test.py', LF will be replaced by CRLF the next time Git touches it\ndiff --git a/test.py b/test.py\nindex e69de29..fdb8af5 100644\n--- a/test.py\n+++ b/test.py\n@@ -0,0 +1,2 @@\n+print  ('Merhaba Dunya')\n+\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>If you want to approve changes repeat same procedure.</p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git add .\nwarning: in the working copy of 'test.py', LF will be replaced by CRLF the next time Git touches it\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git commit -m \"modified commit\"\n[master 4389a6e] modified commit\n 1 file changed, 2 insertions(+)\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git log\ncommit 4389a6e712e65256f938235005e1aec00dbcdd80 (HEAD -&gt; master)\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:09:48 2023 +0300\n\n    modified commit\n\ncommit ad8b1f6ea2cb23558efe078ceb00061f1007abd7\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:45:21 2023 +0300\n\n    Second Commit\n\ncommit 4338f62d47ec563a255708792160a86c4804015d\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:39:55 2023 +0300\n\n    First Commit\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>PS: <code>git diff</code> command show differences between working directory and git repository. If you want to see differences between staging area and git repository, you should use <code>git diff staged</code></p> <p>Remove Directory</p> <p>If you want to remove file from git directory. you can use manuel deletion.</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        deleted:    test2.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> PS: you can use add or rm command to inform git staging area.</p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git add .\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git commit -m \"Delete file commit\"\n[master 0c053c1] Delete file commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 test2.py\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git log\ncommit 0c053c1a02f09a9e2e59926ff328b0f8e57da5b1 (HEAD -&gt; master)\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:24:44 2023 +0300\n\n    Delete file commit\n\ncommit 4389a6e712e65256f938235005e1aec00dbcdd80\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:09:48 2023 +0300\n\n    modified commit\n\ncommit ad8b1f6ea2cb23558efe078ceb00061f1007abd7\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:45:21 2023 +0300\n\n    Second Commit\n\ncommit 4338f62d47ec563a255708792160a86c4804015d\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:39:55 2023 +0300\n\n    First Commit\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>you can use <code>git rm</code> command directly. For example</p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ ls\ntest.py\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git rm test.py\nrm 'test.py'\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        deleted:    test.py\n\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git commit -m \"delete file with git command\"\n[master aa3a3d1] delete file with git command\n 1 file changed, 2 deletions(-)\n delete mode 100644 test.py\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git log\ncommit aa3a3d187742c3c381f1c090c8b6b17c3b28617a (HEAD -&gt; master)\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:27:40 2023 +0300\n\n    delete file with git command\n\ncommit 0c053c1a02f09a9e2e59926ff328b0f8e57da5b1\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:24:44 2023 +0300\n\n    Delete file commit\n\ncommit 4389a6e712e65256f938235005e1aec00dbcdd80\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:09:48 2023 +0300\n\n    modified commit\n\ncommit ad8b1f6ea2cb23558efe078ceb00061f1007abd7\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:45:21 2023 +0300\n\n    Second Commit\n\ncommit 4338f62d47ec563a255708792160a86c4804015d\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:39:55 2023 +0300\n\n    First Commit\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>PS: If you want to erase folder you should use <code>git rm -r deleted-folder/</code></p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git rm delete_files/\nfatal: not removing 'delete_files/' recursively without -r\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git rm -r delete_files/\nrm 'delete_files/bir.txt'\nrm 'delete_files/iki.txt'\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        deleted:    delete_files/bir.txt\n        deleted:    delete_files/iki.txt\n\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git commit -m \"delete folder\"\n[master 608e47b] delete folder\n 2 files changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 delete_files/bir.txt\n delete mode 100644 delete_files/iki.txt\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>Rollback git Version</p> <p>Roleback from working directory. For example. I erase words in this file then check with <code>git status</code></p> <pre><code>$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   first_file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>you should use <code>git restore</code></p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git restore  first_file.txt\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\nnothing to commit, working tree clean\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>Roleback from Staging area. I erase words in this file then check with <code>git status</code> then add staging area with <code>git add .</code> command</p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git add .\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   first_file.txt\n\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git restore --staged first_file.txt\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   first_file.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git restore first_file.txt\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <ul> <li>Roleback from git repository. </li> </ul> <pre><code>$ git log\ncommit eb5e513f00d6fd60695a21382b6aac0109849e34 (HEAD -&gt; master)\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:43:43 2023 +0300\n\n    New File added\n\ncommit 608e47bfa86564b4247566c9bea74dab421ee939\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:34:06 2023 +0300\n\n    delete folder\n\ncommit e5b40a1b25c00dfd3b75107c534e496d77f42f09\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:32:49 2023 +0300\n\n    Add folder delete_files\n\ncommit aa3a3d187742c3c381f1c090c8b6b17c3b28617a\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:27:40 2023 +0300\n\n    delete file with git command\n\ncommit 0c053c1a02f09a9e2e59926ff328b0f8e57da5b1\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:24:44 2023 +0300\n\n    Delete file commit\n\ncommit 4389a6e712e65256f938235005e1aec00dbcdd80\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 16:09:48 2023 +0300\n\n    modified commit\n\ncommit ad8b1f6ea2cb23558efe078ceb00061f1007abd7\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:45:21 2023 +0300\n\n    Second Commit\n\ncommit 4338f62d47ec563a255708792160a86c4804015d\nAuthor: Ilker MANSUR &lt;ilker.p4ne@gmail.com&gt;\nDate:   Sat May 20 15:39:55 2023 +0300\n\n    First Commit\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>copy <code>commit</code> hash which version do you want to go then:</p> <pre><code>git checkout 4338f62d47ec563a255708792160a86c4804015d -- .\n</code></pre> <p>GitHub Access</p> <p>GitHub is a git repository. It is not related to GIT just works with GIT like <code>gitlab</code> etc. Create a github account and new repository for the lab and clone access path.</p> <p></p> <p>add this repository to local machine.</p> <p><pre><code>$ git remote add GitHubRepo https://github.com/ilkermansur/git-courses.git\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <pre><code>git remote add                                      - Add remote\nGitHubRepo                                          - Name of repo you can use anything\nhttps://github.com/ilkermansur/git-courses.git      - PATH of repository\n</code></pre></p> <p>Browser ask a username/password credential for github.</p> <p>then check for adding repo with <code>git remote</code> and add <code>$git push -u GitHubRepo master</code></p> <pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git remote\nGitHubRepo\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git push -u GitHubRepo master\nEnumerating objects: 19, done.\nCounting objects: 100% (19/19), done.\nDelta compression using up to 2 threads\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (19/19), 1.66 KiB | 423.00 KiB/s, done.\nTotal 19 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), done.\nTo https://github.com/ilkermansur/git-courses.git\n * [new branch]      master -&gt; master\nbranch 'master' set up to track 'GitHubRepo/master'.\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p><pre><code>git push                                            - Push files\n- u                                                 - All files \nGitHubRepo                                          - where do you push\nmaster                                              - This is master not branch\n</code></pre> Push to Github</p> <p>Add a new file and commit/push the github</p> <p><pre><code>$ git status\nOn branch master\nYour branch is up to date with 'GitHubRepo/master'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        new file:   test.py\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        new_file.txt\n\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git add .\n$ git commit -m \"add file commit\"\n[master ad0a5a4] add file commit\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 new_file.txt\n create mode 100644 test.py\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git push -u GitHubRepo master\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 2 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 294 bytes | 294.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/ilkermansur/git-courses.git\n   eb5e513..ad0a5a4  master -&gt; master\nbranch 'master' set up to track 'GitHubRepo/master'.\n</code></pre> PS: You can use <code>git remote -v</code> to show all added remote repositories.</p> <p></p> <p>GitIgnore</p> <p>If you dont want to push any directory on your project you can add your directory to gitignore.Example Lets create a directory which name is <code>database</code> and .gitignore file. Then in .gitignore, write the directory name you dont want to push.</p> <p></p> <pre><code>$ git status\nOn branch master\nYour branch is up to date with 'GitHubRepo/master'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .gitignore\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> <p>as you see we see <code>.gitignore</code> file but dont see <code>database</code> file.</p> <p>now add <code>.gitignore</code> file to git repo and push github</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git add .\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git commit -m \".gitignore added\"\n[master 7a42c5c] .gitignore added\n 1 file changed, 1 insertion(+)\n create mode 100644 .gitignore\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git push -u GitHubRepo master\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 2 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 341 bytes | 341.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/ilkermansur/git-courses.git\n   ad0a5a4..7a42c5c  master -&gt; master\nbranch 'master' set up to track 'GitHubRepo/master'.\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> Ps:If you have a directory and include files, but you want to push a specific file not all files in directory. You can write <code>.gitignore</code> file like this</p> <p></p> <p>Branch Github</p> <p>first of all lets create a branch on github which name is <code>branch-one</code> and add a file to this branch. </p> <p></p> <p>then check on master branch</p> <p></p> <p>if you want to merge differences to master branch</p> <p> </p> <p>check diffrences</p> <p></p> <p>and <code>merge</code></p> <p></p> <p>Github Pull</p> <p>Now there is a file <code>br-one.txt</code> just on github.com not local machine. Lets <code>pull</code> it to local git repository.</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git pull\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 4 (delta 1), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (4/4), 1.26 KiB | 99.00 KiB/s, done.\nFrom https://github.com/ilkermansur/git-courses\n   2d3b91b..49b3c3a  master     -&gt; GitHubRepo/master\n * [new branch]      branch-one -&gt; GitHubRepo/branch-one\nUpdating 2d3b91b..49b3c3a\nFast-forward\n br-one.txt | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 br-one.txt\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> Branch Local Repo</p> <p>lets look at branches</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git branch\n* master\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git branch --all\n* master\n  remotes/GitHubRepo/branch-one\n  remotes/GitHubRepo/master\n</code></pre> Create new branch</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git branch branch-two\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git branch\n  branch-two\n* master\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git checkout branch-two\nSwitched to branch 'branch-two'\n</code></pre> Create new file br-two.txt on this branch. Then switch again to <code>master</code> branch and check differences</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (branch-two)\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up to date with 'GitHubRepo/master'.\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git diff master branch-two\ndiff --git a/br-two.txt b/br-two.txt\nnew file mode 100644\nindex 0000000..e69de29\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> lets <code>merge</code> these two branches</p> <p><pre><code>workstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git merge branch-two\nUpdating 49b3c3a..8034137\nFast-forward\n br-two.txt | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 br-two.txt\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git status\nOn branch master\nYour branch is ahead of 'GitHubRepo/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n$ git push -u GitHubRepo master\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nDelta compression using up to 2 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 262 bytes | 262.00 KiB/s, done.\nTotal 2 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo https://github.com/ilkermansur/git-courses.git\n   49b3c3a..8034137  master -&gt; master\nbranch 'master' set up to track 'GitHubRepo/master'.\n\nworkstation01@DESKTOP-DTR3GCL MINGW64 ~/Desktop/Project_01 (master)\n</code></pre> Watch, Star and Fork</p> <p>If you want to follow any project you can choose <code>watch</code>. When any changes is occure  watching project, system inform you on your main page.</p> <p>If you give a <code>star</code> to a any project this shows your faworites. You can show these project on you profile <code>your stars</code>. </p> <p>You want to copy any project, you can <code>fork</code> it.</p> <p>Issues</p> <p>If you have a problem on your project you can use this <code>issue</code> feature for helping.</p>"},{"location":"collaboration/clica/cucm_cuc_integration/","title":"CUCM &amp; Unity Integration","text":"<ul> <li>Step 1 - Install Unity Connection like CUP or CUCM server. It is classic deployment like next next</li> <li>Step 2 - First of all configure Authentication rule that is below <code>System Settings</code></li> </ul> <ul> <li>Step 3 - Configure <code>User Templates</code></li> </ul> <ul> <li>Step 4 - Change <code>Password Settings</code></li> </ul> <ul> <li>Step 5 - Set <code>Change Password</code></li> </ul> <p>For SIP integration</p> <ul> <li>Step 6 - Configure SIP Trunk Security Profile and 3 <code>accept</code> and use in to <code>SIP Trunk</code>.</li> </ul> <p> </p> <ul> <li>Step 7 - Create <code>Route pattern</code> for voice mail pilot number.</li> </ul> <p></p> <ul> <li>Step 8 - Configure <code>Voice Mail Pilot</code></li> </ul> <p> </p> <ul> <li>Step 9 - Configure <code>Voice Mail Profile</code></li> </ul> <p> </p> <ul> <li>Step 10 - In CUC site, Create <code>Phone System</code> or use default. If you create new one edit <code>User Template</code>. Dont Forget</li> </ul> <p> </p> <p>also add <code>AXL User</code> for Pull User from CUCM. Use CUCM as a AXL user.</p> <p> </p> <ul> <li>Step 11 - Configure <code>Port Group</code></li> </ul> <p> </p> <ul> <li>Step 12 - Configure <code>Port</code></li> </ul> <p> </p> <p>After Port creation, you should reset <code>Port Group</code>. Dont Forget.</p> <ul> <li>Step 13 - After this, Add user with using <code>AXL</code></li> </ul> <p></p> <p>PS: User must have <code>Primary Extension</code> for to be found by AXL.</p> <ul> <li>Step 14 - Create <code>UC Service</code> for Jabber User <code>Service Profile</code></li> </ul> <p></p> <ul> <li>Step 15 - Add UC service which is created in previous step to <code>Service Profile</code></li> </ul> <p></p> <ul> <li>Step 16 - Configure Phone for voice mail and test it.</li> </ul> <p>Call Handler</p> <ul> <li>Step 1 - Create <code>CTI Route Point</code> for redirection of calling and configure line then <code>forward all</code> to voice mail</li> </ul> <p> </p> <ul> <li>Step 2 - Create <code>System Call Handler</code> with extension. Upload <code>voice sample</code> which is 8bit, mono, ulaw</li> </ul> <p> </p> <ul> <li>Step 3 - Configure <code>transfer rule</code> uncheck <code>Play prompt ...</code></li> </ul> <p></p> <ul> <li>Step 4 - Configure <code>Caller input</code> for your scenario.</li> </ul> <p></p> <p>PS: If you need, configure schedule and holiday.</p>"},{"location":"collaboration/clica/cucm_exp_integration/","title":"CUCM &amp; Expressway Integration","text":"<ul> <li> <p>Step 1 - Deploy .ova template. Ova template helps you to configure basic network parameters like :</p> <p>Ip address Network Mask Gateway DnS server NTP Server Hostname</p> <p> </p> </li> <li> <p>Step 2 - Deploy .ova template again for expressway-e with same procedure.</p> </li> <li>Step 3 - Create <code>Host-A</code>record for expc and expe</li> </ul> <p></p> <ul> <li>Step 4 -  After power on the virtual machine configure roo and admin password from colsole for expc and expe</li> </ul> <p></p> <ul> <li>Step 5 - Login on <code>GUI</code> secure connection with admin user and password.</li> </ul> <p></p> <ul> <li>Step 6 - Choose <code>type</code> and <code>Service</code> for node. Chose <code>Exressway-C</code> for expc and <code>expressway-E</code> for expe as a type, <code>Mobile and Remote Access including Meeting Server Web Proxy</code> for both device.</li> </ul> <p> </p> <ul> <li>Step 7 - Check configuration for any mistake. This area is configured at while .ova template deployment.</li> </ul> <p></p> <ul> <li>Step 8 - finish intial configuration and restart servers.</li> </ul> <p></p> <ul> <li>Step 9 - Configure <code>System Name</code> on expc and expe</li> </ul> <p></p> <ul> <li>Step 10 - Generate CSR fron expc and expe</li> </ul> <p>Mainteance -&gt; Security -&gt; Server Certificate</p> <p></p> <ul> <li>Step 11 - Sign CSR on CA with configured certificate template (web and client authentication). Download certificate with Base 64 encoded.</li> </ul> <p> </p> <ul> <li>Step 12 - Download ca root certificate and upload to server for trusted CA certificate. Mainteance -&gt; Security -&gt; Trusted CA certificate</li> </ul> <p> </p> <ul> <li>Step 13 - Upload signed certificate to expc and expe Mainteance -&gt; Security -&gt; Server Certificate</li> </ul> <p></p> <ul> <li>Step 14 - Repeat this all procedures for expe</li> <li>Step 15 - Enable <code>SIP</code> TCP / UDP / TLS on expc and expe</li> </ul> <p>Configuration -&gt; Protocols -&gt; SIP</p> <p></p> <ul> <li>Step 16 - Enable <code>MRA</code> from expc and expe Configuration -&gt; Unified Commnications -&gt; Configuration</li> </ul> <p> </p> <ul> <li>Step 17 - Create <code>Domain</code></li> </ul> <p>Configuration -&gt; Domains</p> <p> </p> <ul> <li>Step 18 - Add CUCM to expc Configuration -&gt; Unified Commnications -&gt; Configuration -&gt; Unified CM Servers</li> </ul> <p></p> <ul> <li>Step 19 - Add IMP to expc Configuration -&gt; Unified Commnications -&gt; Configuration -&gt; IMP</li> </ul> <p></p> <ul> <li>Step 20 - Create user on Local database on expe Configuration -&gt; Authentication -&gt; Local Database</li> </ul> <p> </p> <ul> <li>Step 21 - Create <code>zone</code> on expe for expc Configuration -&gt; Zone -&gt; Zones</li> </ul> <p></p> <ul> <li>Step 22 - Create <code>zone</code> on expc Configuration -&gt; Zone -&gt; Zones</li> </ul> <p> </p> <ul> <li>Step 23 - Check Connection between expc and expe</li> </ul> <p> </p>"},{"location":"collaboration/clica/cucm_imp_integration/","title":"CUCM &amp; IMP Integration","text":"<p>CUCM Side</p> <p>PS: All UC components (CUCM,CUP) <code>Host-A</code>, <code>PTR</code>, <code>SRV</code> record must be made. </p> <pre><code>hqcucmpub.cciecollab.com (HOST-A)\nhqcuppub.cciecollab.com (HOST-A)\n_cisco-uds._tcp.cciecollab.com (SRV)\n</code></pre> <ul> <li>Step 1 - Add IMP ip address to CUCM as a server.</li> </ul> <p> </p> <ul> <li>Step 2 - While the installation is runnig backstage, create <code>SIP TRUNK SECURITY PROFILE</code> for trunk.</li> </ul> <p>System -&gt; Security -&gt; Sip Trunk Security Profile then <code>add new</code> </p> <p></p> <ul> <li>Step 3 - Create <code>TRUNK</code> for cup server</li> </ul> <p>Device -&gt; Trunk then <code>add new</code></p> <p></p> <p>Configure <code>TRUNK</code> parameters</p> <p> </p> <ul> <li>Step 4 - Use previous trunk for Service parameter</li> </ul> <p>System -&gt; Service Parameters</p> <p></p> <p></p> <ul> <li>Step 5 - Create <code>UC SERVICES</code> for 'CTI' and 'CUP Services'</li> </ul> <p>User Management -&gt; User Settings -&gt; UC Services then <code>add new</code></p> <p> </p> <ul> <li>Step 6 - Create <code>SERVICE PROFILE</code> for Jabber Devices.</li> </ul> <p>User Management -&gt; User Settings -&gt; Service Profile then <code>add new</code></p> <p> </p> <ul> <li>Step 7 - Create <code>Access Control Group</code> for Jabber User</li> </ul> <p>User Management -&gt; User Settings -&gt; Access Control Group</p> <p> </p> <ul> <li>Step 8 - Enable <code>LDAP Server</code> on cucm</li> </ul> <p>System -&gt; Ldap -&gt; Ldap System</p> <p></p> <ul> <li>Step 9 - Add <code>LDAP Directory</code> from </li> </ul> <p>System -&gt; Ldap -&gt; Ldap Directory then <code>add new</code></p> <p> </p> <p>then configure <code>LDAP Authentication</code> for enduser authentication</p> <p></p> <ul> <li>Step 10 - Pull User for Ldap</li> </ul> <p></p> <ul> <li>Step 11 - Use <code>Service profile</code>  and <code>Access Control Group</code> ,which are created previous steps, to user who use jabber device</li> </ul> <p> </p> <ul> <li>Step 12 - Create Jabber Device with this user</li> </ul> <p> </p> <p>under line configuration</p> <p></p> <ul> <li>Step 13 - Add device to User under <code>End User</code> configuration</li> </ul> <p></p> <p>CUP Side</p> <ul> <li>Step 1 - Complate <code>CUP</code> server console configuration like below</li> </ul> <p> </p> <ul> <li>Step 2 - After installation is finished activate <code>CUP</code> services from CUCM</li> </ul> <p>Cisco Unified Servicebility -&gt; Tools -&gt; Service Activation and Check all Services</p> <p> </p> <ul> <li>Step 3 - Check sip trunk which is created on CUCM from </li> </ul> <p>Presence -&gt; Settings -&gt; Standard Configuration</p> <p></p> <ul> <li>Step 4 - Add CUCM as gateway to CUP Server from</li> </ul> <p>Presence -&gt; Gateway then <code>add new</code></p> <p></p> <ul> <li>Step 5 - Configure <code>Default Cisco SIP Proxy TCP Listener</code> as a preferred proxy listener </li> </ul> <p></p> <ul> <li>Step 6 - Create <code>CCMCIP Profile</code> from </li> </ul> <p>Application -&gt; CCMCIP Profile then <code>add new</code> configure cucm pub and sub</p> <p></p> <ul> <li>Step 7 - Reboot <code>CUP Server</code> gracefully</li> </ul>"},{"location":"collaboration/fosip/fosip/","title":"Fundamental of SIP","text":"<p>FoSIP</p> <ul> <li> <p>[x] SIP is a signaling protocol used to <code>create</code>, <code>modify</code>, and <code>terminate</code> a multimedia session over the Internet Protocol. A session could be established between two endpoints or more. An endpoint can be a smartphone, a laptop, or any device that can receive and send multimedia content over the Internet.</p> </li> <li> <p>[x] SIP is an application layer protocol defined by IETF (Internet Engineering Task Force) standard. It is defined in RFC 3261. (june 2002)</p> </li> <li> <p>[x] SIPembodies client-server architecture and the use of URI from HTTP and a text encoding scheme and a header style from SMTP.SIP-URI = sip:x@y:port or sips:x@y:port where x=Username and y=host (domain or IP)</p> </li> <li> <p>[x] SIP takes the help of SDP (Session Description Protocol) which describes a session and RTP (Real Time Transport Protocol) used for delivering voice and video over IP network.</p> </li> <li> <p>[x] SIP can be used for two-party (unicast) or multiparty (multicast) sessions.</p> </li> <li> <p>[x] Other SIP applications include file transfer, instant messaging, video conferencing, online games, and steaming multimedia distribution</p> </li> </ul> <p>Facts for Establishing and Terminating Multimedia Communications Using SIP</p> <p><code>1 - User location:</code> Determination of the end system to be used for communication</p> <p><code>2 - User availability:</code> Determination of the willingness of the called party to engage in communications</p> <p><code>3 - User capabilities:</code> Determination of the media and media parameters to be used </p> <p><code>4 - Session setup:</code> \u201cRinging\", establishment of session parameters at both calling and called party</p> <p><code>5 - Session management:</code> Including transfer and termination of sessions, modifying session parameters, and invoking services</p> <p>It is the simplicity of SIP that makes it so versatile. SIP is an ASCII- or text-based protocol, similar to HTTP or SMTP. Like HTTP and SMTP, SIP is a request-response protocol, meaning that it makes a request of a server, and awaits a response. Once it has established a session, other protocols handle such tasks as negotiating the type of media to be exchanged, and transporting it between the endpoints. The reusing of existing protocols and their functions means that fewer resources are used, and minimizes the complexity of SIP.</p>"},{"location":"collaboration/fosip/fosip/#sip-components","title":"SIP Components","text":"<p>User Agent</p> <pre><code>- User Agent Client (UAC)\n- User Agent Server (UAS)\n</code></pre> <p></p> <p>SIP Server</p> <p>Registrar / Location Server</p> <p></p> <p>1 - The User Agent sends a <code>REGISTER</code> request to the SIP server in the registrar role  2 - Once the request is accepted, the Registrar adds the <code>Sip Address</code> and <code>IP Address</code> that the User agent provides to the location service.</p> <p>Proxy Server</p> <p></p> <p>1 - <code>invite</code> request is made to PROXY SRV to invite session with User Agent B 2 - PROXY SRV checks with locater service to determine ip address of User Agent B 3 - <code>invite</code> request is passed to User Agent B 4 - User Agent B accepts request and responses to User Agent A 5 - PROXY SRV passes response to User Agent A 6 - Once invitation is accepted User Agent A and User Agent B can now establish a session.</p> <p>Redirect Server</p> <p></p> <p>1 - <code>invite</code> request is sent to <code>Redirect Server</code> 2 - <code>Redirect Server</code> checks location service to find IP Address of User agent B 3 - <code>Redirect server</code> sends information back to the requesting User Agent A 4 - User agent A sends <code>invite</code> to User Agent B 5 - User Agent B responds to User Agent A 6 - Once invitation is accepted User Agent A and User Agent B can now establish a session </p>"},{"location":"collaboration/fosip/fosip/#basic-sip-call-flow","title":"Basic SIP Call Flow","text":"<p>PS : We will discuss every packet and <code>METHOD</code> after <code>Wireshark</code>.</p>"},{"location":"collaboration/fosip/fosip/#wireshark-usage","title":"Wireshark Usage","text":"<p>Wireshark is a network packet analyzer. A network packet analyzer presents captured packet data in as much detail as possible. You could think of a network packet analyzer as a measuring device for examining what\u2019s happening inside a network cable, just like an electrician uses a voltmeter for examining what\u2019s happening inside an electric cable (but at a higher level, of course).</p> <p>In the past, such tools were either very expensive, proprietary, or both. However, with the advent of Wireshark, that has changed. Wireshark is available for free, is open source, and is one of the best packet analyzers available today.</p> <p>Here are some reasons people use Wireshark:</p> <ul> <li>Network administrators use it to troubleshoot network problems</li> <li>Network security engineers use it to examine security problems</li> <li>QA engineers use it to verify network applications</li> <li>Developers use it to debug protocol implementations</li> <li>People use it to learn network protocol internals</li> </ul> <p>Main program in <code>wireshark</code> is <code>tshark</code>. This name comes from terminal keyword. Lets see interfaces in tshark.</p> <p>C:\\Program Files\\Wireshark&gt;tshark.exe -D</p> <p></p> <p>we will choose <code>Wi-Fi</code> interface. Its index number is <code>5</code></p> <p>C:\\Program Files\\Wireshark&gt;tshark.exe -i 5</p> <p></p> <p>There are two kind of filters:</p> <pre><code>     Traffic\n     Traffic\n     Traffic\n   x Traffic x\n    x       x\n     x     x\n      x   x\n       x x\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Capture filter\u2502 \u2500\u2500\u2500\u25ba \u2502 Capture Engine \u2502 \u2500\u2500\u2500\u25ba \u2502 Core Engine \u2502 \u2500\u2500\u2500\u25ba \u2502 Display Filter \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                                                                    \u2502\n        \u2502                                                                    \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                     \u2502  \u2502\n                                     \u2502  \u2502\n                                     \u25bc  \u25bc\n</code></pre> <p>Capture filter : Capture filter, capture specific data which you want then show them. ! Attention. </p> <p>Example</p> <p><pre><code>host 172.18.5.4\nnet 192.168.0.0/24\nsrc net 192.168.0.0/24\ndst net 192.168.0.0/24\nport 5060\ntcp portrange 1501-1549\n</code></pre> </p> <p>Display filter : Display Filter, Capture all traffic but shows which you want.</p> <p><pre><code>ip.addr==172.18.5.4\nip.src==192.168.0.0/16 and ip.dst==192.168.0.0/16\ntcp.port eq 25 or icmp\nip.addr != 10.43.54.65\nudp.dstport == 5060\nudp.port == 5060\n</code></pre> </p> <p>We can see <code>SIP Signalling</code> from two method. Every method has different detail level.</p> <ol> <li>From Analyze page</li> </ol> <p></p> <pre><code>INVITE sip:192.168.80.12 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport;branch=z9hG4bKPj15728c40ffd34c83b084dc67d9e93d9c\nMax-Forwards: 70\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;\nContact: &lt;sip:192.168.80.11:50952;ob&gt;\nCall-ID: 6c46d346e3084913a77014b523c9e389\nCSeq: 6521 INVITE\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nSupported: replaces, 100rel, timer, norefersub\nSession-Expires: 1800\nMin-SE: 90\nUser-Agent: MicroSIP/3.21.3\nContent-Type: application/sdp\nContent-Length:   346\n\nv=0\no=- 3902655284 3902655284 IN IP4 192.168.71.146\ns=pjmedia\nb=AS:84\nt=0 0\na=X-nat:0\nm=audio 4008 RTP/AVP 8 0 101\nc=IN IP4 192.168.71.146\nb=TIAS:64000\na=rtcp:4009 IN IP4 192.168.71.146\na=sendrecv\na=rtpmap:8 PCMA/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-16\na=ssrc:1913920969 cname:1ebf1ac11af82313\nSIP/2.0 100 Trying\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport=50952;received=192.168.80.11;branch=z9hG4bKPj15728c40ffd34c83b084dc67d9e93d9c\nCall-ID: 6c46d346e3084913a77014b523c9e389\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;\nCSeq: 6521 INVITE\nContent-Length:  0\n\nSIP/2.0 180 Ringing\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport=50952;received=192.168.80.11;branch=z9hG4bKPj15728c40ffd34c83b084dc67d9e93d9c\nCall-ID: 6c46d346e3084913a77014b523c9e389\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;;tag=9d6ab2e6da5e4ad09aea771ed6a12343\nCSeq: 6521 INVITE\nContact: &lt;sip:192.168.80.12:63043&gt;\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nContent-Length:  0\n\nSIP/2.0 200 OK\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport=50952;received=192.168.80.11;branch=z9hG4bKPj15728c40ffd34c83b084dc67d9e93d9c\nCall-ID: 6c46d346e3084913a77014b523c9e389\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;;tag=9d6ab2e6da5e4ad09aea771ed6a12343\nCSeq: 6521 INVITE\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nContact: &lt;sip:192.168.80.12:63043&gt;\nSupported: replaces, 100rel, timer, norefersub\nSession-Expires: 1800;refresher=uac\nRequire: timer\nContent-Type: application/sdp\nContent-Length:   319\n\nv=0\no=- 3902655283 3902655284 IN IP4 192.168.80.12\ns=pjmedia\nb=AS:84\nt=0 0\na=X-nat:0\nm=audio 4008 RTP/AVP 8 101\nc=IN IP4 192.168.80.12\nb=TIAS:64000\na=rtcp:4009 IN IP4 192.168.80.12\na=sendrecv\na=rtpmap:8 PCMA/8000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-16\na=ssrc:1170553184 cname:54d60ea93f0b3087\nACK sip:192.168.80.12:63043 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport;branch=z9hG4bKPj7547c750e9514daf911980bf590fcfae\nMax-Forwards: 70\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;;tag=9d6ab2e6da5e4ad09aea771ed6a12343\nCall-ID: 6c46d346e3084913a77014b523c9e389\nCSeq: 6521 ACK\nContent-Length:  0\n\nBYE sip:192.168.80.12:63043 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport;branch=z9hG4bKPja096382a15374b02ae4f3e3928adc9f5\nMax-Forwards: 70\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;;tag=9d6ab2e6da5e4ad09aea771ed6a12343\nCall-ID: 6c46d346e3084913a77014b523c9e389\nCSeq: 6522 BYE\nUser-Agent: MicroSIP/3.21.3\nContent-Length:  0\n\nSIP/2.0 200 OK\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport=50952;received=192.168.80.11;branch=z9hG4bKPja096382a15374b02ae4f3e3928adc9f5\nCall-ID: 6c46d346e3084913a77014b523c9e389\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;;tag=9d6ab2e6da5e4ad09aea771ed6a12343\nCSeq: 6522 BYE\nContent-Length:  0\n</code></pre> <ol> <li>From Telephony / Voip Calls</li> </ol> <p></p> <p>with export button, you can export this flow as <code>PDF</code> with time of Day, you can convert unix time to human readable time</p> <p>Export Output PCAP file</p> <p>There are some tricks PCAP OUTPUT. Lets discus on screenshoot</p> <p></p> <ul> <li>Choose <code>output</code> for export data</li> <li>Create folder for store log and input the pat of folder</li> <li>Decide how long PCAP file which you want to store. Actually there is no limit with pcap file but you sholud limit the <code>one file size</code>. I recommend maximum 1GB for one file or <code>ten minutes</code> for one file.</li> <li>Use <code>Use a ring buffer with</code></li> </ul> <p>As you see below example: I limit total 25 sec log with 5sec files. File 1 and 2 is erased because on <code>Use a ring buffer with</code> value. </p> <p></p>"},{"location":"collaboration/fosip/fosip/#rtp-analysis","title":"RTP Analysis","text":"<p>A <code>SIP CALL</code> consist of 2 parts. One of them is <code>signalling</code> and the other is <code>media</code>. In media transferring, SIP use Real Time Transport Protocol (RTP) which is define by RFC-3550. Real Time Protocol (RTP) carries the voice payload across the network from transmitter to receiver. This payload is a continuous stream of packets that traverses the network.</p> <p>RTP Effected basicly three network phenomenons.</p> <ol> <li> <p>Latency : VoIP over high latency links may not have any quality problems, but it creates awkward communications involving interruptions, talking on top of someone else, and strange silences because you don't know if the other person has stopped talking yet. One-way latency for VoIP/UC should be below <code>125ms (250ms round-trip)</code>. Users will tend to notice higher latencies.</p> </li> <li> <p>Jitter : In the real world, some packets may be delayed, thus causing some packets to arrive late, with the packets behind them all being bunched up and arriving too soon behind them. In general, jitter should be below <code>30ms</code> when received by the endpoint.</p> </li> <li> <p>Packet Lose : Packet loss affects real-time protocols like VoIP and video by creating drop-outs, clipped words, and video artifacts. Entire phrases might also be missing from the conversation. If the packet loss gets really bad, one side of the audio stream can completely disconnect causing one-way audio, or if packet loss is bi-directional, the entire call can drop. In general, packet loss should be below <code>1 %</code>  when received by the endpoint.</p> </li> </ol> <p>How Can we detect ?</p> <p>Answer is wireshark. We can analysis RTP performance with wireshark telephony / RTP / RTP Streams</p> <p> </p> <p>RTP and RTCP</p> <pre><code>                    +------------+-------------+-------------+-------------------------+\n                    | IP Headers | UDP Headers | RTP Headers |       RTP Payload       |\n                    |  20 Byte   |   8 Byte    |  12 Byte    |                         |\n                    +------------+-------------+-------------+-------------------------+\n</code></pre> <p>RTP is used in conjunction with the RTP Control Protocol (RTCP). While RTP carries the media streams (e.g., audio and video), RTCP is used to monitor transmission statistics and quality of service (QoS) and aids synchronization of multiple streams. RTP is originated and received on even port numbers and the associated RTCP communication uses the next higher odd port number.</p> <p></p> <p>RTP Header</p> <pre><code>                      0                   1                   2                   3\n                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                      |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                      |                           timestamp                           |\n                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                      |           synchronization source (SSRC) identifier            |\n                      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n                      |            contributing source (CSRC) identifiers             |\n                      |                             ....                              |\n                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n</code></pre> <p>Version - This 2-bit field defines version number. The current version is 2. Padding \u2013 The length of this field is 1-bit. If value is 1, then it denotes presence of padding at end of packet and if value is 0, then there is no padding. Extension \u2013 The length of this field is also 1-bit. If value of this field is set to 1, then its indicates an extra extension header between data and basic header and if value is 0 then, there is no extra extension. Contributor Count - This 4-bit field indicates number of contributors. Here maximum possible number of contributor is 15 as a 4-bit field can allows number from 0 to 15. Marker \u2013 The length of this field is 1-bit and it is used as end marker by application to indicate end of its data. Payload types - This field is of length 7-bit to indicate type of payload. We list applications of some common types of payload.</p> <p>Example :</p> <pre><code>+--------+--------------+\n| PT     |    FORMAT    |\n+--------+--------------+\n| 0      |    G711u-law |\n| 8      |    G711a-law |\n| 9      |    G722      |\n| 18     |    G729      |\n| 26     |    Jpeg      |\n| 34     |    H323      |\n| 101    |    DTMF      |\n| ...    |    ...       |\n+--------+--------------+\n</code></pre> <p>Sequence Number \u2013 The length of this field is 16 bits. It is used to give serial numbers to RTP packets. It helps in sequencing. The sequence number for first packet is given a random number and then every next packet\u2019s sequence number is incremented by 1. This field mainly helps in checking lost packets and order mismatch. Time Stamp \u2013 The length of this field is 32-bit. It is used to find relationship between times of different RTP packets. The timestamp for first packet is given randomly and then time stamp for next packets given by sum of previous timestamp and time taken to produce first byte of current packet. The value of 1 clock tick is varying from application to application. Synchronization Source Identifier \u2013 This is a 32-bit field used to identify and define the source. The value for this source identifier is a random number that is chosen by source itself. This mainly helps in solving conflict arises when two sources started with the same sequencing number. Contributor Identifier \u2013 This is also a 32-bit field used for source identification where there is more than one source present in session. The mixer source use Synchronization source identifier and other remaining sources (maximum 15) use Contributor identifier.</p> <p>Example of RTP Header</p>"},{"location":"collaboration/fosip/fosip/#_1","title":"Fundamental of SIP","text":"<p>Impact of Voice Samples and Packet Size on Bandwidth</p> <p>DSP coverts analog voice signal to digital voice signal using a particular codec. Based on the codec used, the DSP generates so many bits per second. The bits that are generated for 10 milliseconds (ms) of analog voice signal form one digital voice sample. The size of the digital voice sample depends on the codec used. </p> <p>For example, Assume that we are using g711 codec:</p> <p>in every 10ms period DSP generates 80 byte, there are 100 times 10ms in 1 second. Totally in 1 second DSP generates 8000 byte If we calculate as <code>bit</code> 8000 X 8 = 64000 for one second. </p> <p>for our wireshark output, timestamp shows us in between RTP Packets there are 160 byte, that means this payload contains 20ms data, that means there are 50 RTP packets for only one second. </p> <p></p> <p>Lets analysis all IP Packet, frame lenght is 214 byte</p> <p></p> <p>IP header shows us total lenght 200 byte, IP header is 20 byte. This means frame header is 14 byte (ethernet)</p> <p></p> <p>then if we calculate UDP header, RTP header and payload </p> <p></p> <p>Calculation is ok.</p> <pre><code>+-----------------------+\n| RTP Payload      160  |\n| RTP Header       12   |\n| UDP Header       8    |\n| IP Header        20   |\n| Frame Header     14   |\n+-----------------------+\n| TOTAL            214  |\n+-----------------------+\n</code></pre>"},{"location":"collaboration/fosip/fosip/#sip-methods-and-headers","title":"SIP Methods and Headers","text":"<ul> <li>Everything is <code>METHOD</code> in sip. SIP is an application layer protocol that is very similar to text based application layer protocols like HTTP. In fact, it is also uses request and response message transactions and header fields.</li> <li>For transport, SIP can run over TCP, UDP, or SCTP transport layer protocols. </li> <li>IP borrows the Method field from HTTP to likewise determine the type of request. SIP has 14 Method request types. The most commonly used Methods are INVITE, ACK, BYE, and REGISTER which are used during voice calls. The first line of a SIP request message includes the Method type and the request URI which is the current destination of the request. </li> </ul> <p>Example of SIP Request</p> <p></p> <p><pre><code>INVITE sip:192.168.80.12 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport;branch=z9hG4bKPj15728c40ffd34c83b084dc67d9e93d9c\nMax-Forwards: 70\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;\nContact: &lt;sip:192.168.80.11:50952;ob&gt;\nCall-ID: 6c46d346e3084913a77014b523c9e389\nCSeq: 6521 INVITE\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nSupported: replaces, 100rel, timer, norefersub\nSession-Expires: 1800\nMin-SE: 90\nUser-Agent: MicroSIP/3.21.3\nContent-Type: application/sdp\nContent-Length:   346\n</code></pre> Common SIP request Headers</p> <p>VIA : Contains an address that is used to route back replies. MAX-FORWARDS : Show max path like (TTL) FROM : Contains the SIP URI of the caller. TO : Contains the SIP URI of the callee. CONTACT : Contains the SIP URI to be used for future requests for this caller. CALL-ID : Contains the globally unique identification for this call using the caller's domain. CSEQ : Contains the sequence number of this message for this SIP conversation. ALLOW : Contains the support methods SUPPORTED : Contains the supported extentions SESSION-EXPRIRES : Show total sip session time. End of this time, sip session is refresh. MIN-SE : Show minimum session time USER-AGENT : Contains Information about agent  CONTENT-TYPE : Contains the content type for the message body. CONTENT-LENGHT : Contains the byte count length for the message body.</p> <p>SIP  METHODS</p> <p>- Invite : The invite message initiates a SIP dialog with the intent to establish a call. It is sent by a user agent client to a user agent server. When sent during an established dialog <code>(reinvite)</code> it modifies the sessions, for example placing a call on hold.  - ACK : Confirm that an entity has received a final response to an INVITE request. - BYE : This method signals termination of a dialog and ends a call. This message may be sent by either endpoint of a dialog. - CANCEL : Cancel any pending request.  Usually means terminating a SIP call while it is still ringing, before answer. - OPTIONS : Query the capabilities of an endpoint.  It is often used for keepalive purposes. - REGISTER : Register the SIP URI listed in the To header field with a location server and associates it with the network address given in a Contact header field.  It implements a location service. - REFER : Used for call transfer. - PRACK : PRACK is sent in response to provisional response (1xx). SIP defines two types of responses, provisional and final.Final responses convey the result of the request processing, and are sent reliably. Provisional responses provide information on the progress of the request processing, but are not sent reliably in RFC 3261 - SUBSCRIBE : Initiates a subscription for notification of events from a notifier, like presence information.  - NOTIFY : The NOTIFY message is used to notify other users or devices when there are changes in a monitored entity or event. It is used to send notifications when there are changes in a monitored presence or event, such as a change in online status or a call initiation event. - PUBLISH : The PUBLISH message is used by a user or device to report its own presence or status to a SIP server or other subscribers. It is commonly used to update one's status or to send instant messages. - MESSAGE : Transport text messages. -INFO : Send mid-session information that does not modify the session state. This method is often used for DTMF relay. -UPDATE : Modifies the state of a session without changing the state of the dialog.</p> <p>SIP Transaction &amp; Session &amp; Dialog</p> <p>Transaction : Consists of a Request and final (2-6)XX response  Session : Session  is just a media stream (e.g. audio or video) flowing between peers Dialog : Dialog is just a series of transactions between two SIP peers. The purpose of a dialog is to setup, possibly modify, and then teardown a session</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             Invite               \u2502                       \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba  \u2502                       \u2502\n\u2502          100 Trying              \u2502                       \u2502\n\u2502 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2502                       \u2502\n\u2502          180 Ringing             \u2502 \u2500\u2500\u2500\u2500\u25ba Transaction     \u2502\n\u2502 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2502                       \u2502\n\u2502            200 OK                \u2502                       \u2502\n\u2502 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2502                       \u2502\n\u2502                                  \u2502                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                       \u2502\n\u2502              ACK                 \u2502                       \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba  \u2502 \u2500\u2500\u2500\u2500\u25ba Transaction     \u251c\u2500\u2500\u2500\u2500\u25ba Dialog\n\u2502                                  \u2502                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                       \u2502\n\u2502            RTP Data              \u2502                       \u2502\n\u2502 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba \u2502 \u2500\u2500\u2500\u2500\u25ba Session         \u2502\n\u2502                                  \u2502                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                       \u2502\n\u2502                BYE               \u2502                       \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba \u2502                       \u2502\n\u2502              200 OK              \u2502 \u2500\u2500\u2500\u2500\u25ba Transaction     \u2502\n\u2502 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502                       \u2502\n\u2502                                  \u2502                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>There are two different defination about <code>requests</code>. In one dialog, there is one <code>initial request</code> others are sequential request.</p> <p>Initial Requests - Can be easily identified by the From-tag - Example: First INVITE</p> <p>Sequential (in-dialog) Requests - Same Call-ID, From tag and To tag - Example: BYE,ACK,RE-INVITE</p> <p>Branch, Call-ID and From/to Tag</p> <p>There are three deffination with hash in SIP. These definations guide us to folow sip message in mess sip log. This section is very important. </p> <p>Branch : Means transaction. As you know transaction is combination of request and its response. every transaction defined by a unique branch number.</p> <p>Lets flashback to wireshark capture of normal clear sip to sip basic call. You will see three branch-id it means there three transaction on this sip call.</p> <p></p> <p>Call-ID Means SIP call. Transactions which belogs to same call define bye same call-id.</p> <p></p> <p>From / To Tag From and To define <code>caller</code> and <code>callee</code>.</p> <p></p> <p>PS: why there is no <code>to tag</code> in first two sip message ?</p> <p>SDP and Early Offer / Delay Offer</p> <p>The SDP (Session Description Protocol) contains a description of the media format and protocols supported by a device. The SDP is sent by both sides of a connection during the call set up process. The difference between Early Offer and Late Offer is in which SIP Message the SDP is sent.</p> <p>In an Early Offer call, the SDP message is sent by the calling endpoint in the initial invite message. The receiving endpoint sends their SDP in the 200 OK message sent when the call is answered.</p> <pre><code>INVITE sip:192.168.80.12 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport;branch=z9hG4bKPj15728c40ffd34c83b084dc67d9e93d9c\nMax-Forwards: 70\nFrom: &lt;sip:192.168.71.146&gt;;tag=cb9e96b542084e3db354b9a6e98e5527\nTo: &lt;sip:192.168.80.12&gt;\nContact: &lt;sip:192.168.80.11:50952;ob&gt;\nCall-ID: 6c46d346e3084913a77014b523c9e389\nCSeq: 6521 INVITE\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nSupported: replaces, 100rel, timer, norefersub\nSession-Expires: 1800\nMin-SE: 90\nUser-Agent: MicroSIP/3.21.3\nContent-Type: application/sdp\nContent-Length:   346\n                                     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nv=0                                               \u2502\no=- 3902655284 3902655284 IN IP4 192.168.71.146   \u2502\ns=pjmedia                                         \u2502\nb=AS:84                                           \u2502\nt=0 0                                             \u2502\na=X-nat:0                                         \u2502\nm=audio 4008 RTP/AVP 8 0 101                      \u2502\nc=IN IP4 192.168.71.146                           \u2502\nb=TIAS:64000                                      \u251c\u2500\u2500\u2500\u2500\u25ba SDP\na=rtcp:4009 IN IP4 192.168.71.146                 \u2502\na=sendrecv                                        \u2502\na=rtpmap:8 PCMA/8000                              \u2502\na=rtpmap:0 PCMU/8000                              \u2502\na=rtpmap:101 telephone-event/8000                 \u2502\na=fmtp:101 0-16                                   \u2502\na=ssrc:1913920969 cname:1ebf1ac11af82313          \u2502\n                                                  \u2502\n                                    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Some lines in each description are REQUIRED and some are OPTIONAL,but all MUST appear in exactly the order given here (the fixed order greatly enhances error detection and allows for a simple parser).OPTIONAL items are marked with a \"*\".</p> <p>Session description</p> <pre><code>     v=  (protocol version)\n     o=  (originator and session identifier)\n     s=  (session name)\n     i=* (session information)\n     u=* (URI of description)\n     e=* (email address)\n     p=* (phone number)\n     c=* (connection information -- not required if included in\n          all media)\n     b=* (zero or more bandwidth information lines)\n     One or more time descriptions (\"t=\" and \"r=\" lines; see below)\n     z=* (time zone adjustments)\n     k=* (encryption key)\n     a=* (zero or more session attribute lines)\n     Zero or more media descriptions\n</code></pre> <p>Time description</p> <pre><code>     t=  (time the session is active)\n     r=* (zero or more repeat times)\n</code></pre> <p>Media description, if present</p> <pre><code>     m=  (media name and transport address)\n     i=* (media title)\n     c=* (connection information -- optional if included at\n          session level)\n     b=* (zero or more bandwidth information lines)\n     k=* (encryption key)\n     a=* (zero or more media attribute lines)\n</code></pre> <p>In a Late Offer call, the receiving endpoint still sends their SDP in the 200 OK message but the calling endpoint doesn't sent theirs until Acknowledgement message which is sent after they receive the 200 OK from the receiving endpoint.</p> <p>Some sip device use delay offer by default like <code>cisco unified call manager</code>, some sip device use early offer like <code>micro sip</code></p> <p>Cancel Method</p> <p>The CANCEL informs Jennifer that Andrew is releasing the session prematurely and Jennifer needs to do the same on her end. In other words, Jennifer\u2019s phone should stop ringing and return to an idle state.</p> <p><pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                Invite                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    ANDREW    \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba    \u2502  JENNIFER    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             100 Trying\n                    \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n                             180 Ringing\n                    \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n               Andrew hangs up before the call is answered\n\n                                CANCEL\n                    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\n\n                                200 OK\n                    \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n                       487 Request Terminated\n                    \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n                                 ACK\n                    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\n</code></pre> lets test in lab</p> <p></p> <p>Second senario for <code>CANCEL</code> method is stopping ringing the shared line. </p> <p><pre><code>                                                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                                        \u2502  JENNIFER    \u2502 3 - Turn on the phone\n                                                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                               \u25b2\n                                                               \u2502\n                                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u25022 - Ringging\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 1 - Call 1000   \u2502       \u2502                     \u2502\n\u2502    ANDREW    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502  PBX  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2502       \u2502                     \u2502\n                                 \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2518                     \u25022 - Ringging\n                                       \u2502                       \u2502\n                                       \u2502                       \u25bc\n                                       \u2502                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502  JENNIFER    \u2502\n                                         4 - PBX sends  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                         to CANCEL the\n                                         shared line\n</code></pre> Message Method</p> <p>The SIP MESSAGE method looks / acts very similar to a SIP INVITE, in that it\u2019s got all the standard SIP headers, but also a Message Body, in which our message body lives (funny about that), typically we\u2019ll send messages using the Content-Type: text/plain to denote we\u2019re sending a plaintext message.</p> <p>Lets check in our lab environment</p> <p></p> <p>on wireshark</p> <p></p> <pre><code>MESSAGE sip:192.168.80.12 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport;branch=z9hG4bKPjb3a637173a7749388acfa945363e2935\nMax-Forwards: 70\nFrom: &lt;sip:192.168.71.146&gt;;tag=1f230d794d874ff98d54cbc549915971\nTo: &lt;sip:192.168.80.12&gt;\nCall-ID: 135f6ded4f5c45dab6af3d5626e0b4ef\nCSeq: 11151 MESSAGE\nUser-Agent: MicroSIP/3.21.3\nContent-Type: text/plain\nContent-Length:     5\n\nselamSIP/2.0 200 OK\nVia: SIP/2.0/UDP 192.168.71.146:50952;rport=50952;received=192.168.80.11;branch=z9hG4bKPjb3a637173a7749388acfa945363e2935\nCall-ID: 135f6ded4f5c45dab6af3d5626e0b4ef\nFrom: &lt;sip:192.168.71.146&gt;;tag=1f230d794d874ff98d54cbc549915971\nTo: &lt;sip:192.168.80.12&gt;;tag=z9hG4bKPjb3a637173a7749388acfa945363e2935\nCSeq: 11151 MESSAGE\nContent-Length:  0\n</code></pre> <p>Option Method</p> <p>OPTIONS allows a user agent (UA) to query another UA or a proxy server as to its capabilities. This allows a client to discover information about the supported methods, content types, extensions, codecs, etc. without \u201cringing\u201d the other party.</p> <p>For testing <code>SIP Option</code> we use cisco Call Manager. send option from Cisco CUCM to  Micro Sip. For this test we need 2 configuration on CUCM:</p> <ol> <li>Sip Profile</li> <li>Sip trunk with sip profile which create previous step</li> </ol> <p>For sip profile. Choose sip profile then clone <code>Default sip profile</code> and rename as <code>SP_SIP_OPTION</code> or something you want. Enable <code>ping option</code> with default parameters. </p> <p> </p> <p>then create sip trunk to micro-sip with ip address of micro-sip. Use SP_SIP_OPTION as a sip proflie.</p> <p> </p> <p>After this configuration, restart SIP Trunk on CUCM then CUCM will begin to send sip option packet to Micro sip. Lets check on wireshark.</p> <p></p> <pre><code>OPTIONS sip:192.168.80.11:5060 SIP/2.0\nVia: SIP/2.0/TCP 192.168.80.100:5060;branch=z9hG4bK3220cd6291\nFrom: &lt;sip:192.168.80.100&gt;;tag=471242191\nTo: &lt;sip:192.168.80.11&gt;\nDate: Sun, 03 Sep 2023 20:11:53 GMT\nCall-ID: 1e55d000-1ef16899-13-6450a8c0@192.168.80.100\nUser-Agent: Cisco-CUCM14.0\nCSeq: 101 OPTIONS\nContact: &lt;sip:192.168.80.100:5060;transport=tcp&gt;\nMax-Forwards: 0\nContent-Length: 0\n\nSIP/2.0 200 OK\nVia: SIP/2.0/TCP 192.168.80.100:5060;received=192.168.80.100;branch=z9hG4bK3220cd6291\nCall-ID: 1e55d000-1ef16899-13-6450a8c0@192.168.80.100\nFrom: &lt;sip:192.168.80.100&gt;;tag=471242191\nTo: &lt;sip:192.168.80.11&gt;;tag=z9hG4bK3220cd6291\nCSeq: 101 OPTIONS\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nAccept: application/sdp, application/pidf+xml, application/xpidf+xml, application/simple-message-summary, message/sipfrag;version=2.0, application/im-iscomposing+xml, text/plain\nSupported: replaces, 100rel, timer, norefersub, trickle-ice\nAllow-Events: presence, message-summary, refer\nUser-Agent: MicroSIP/3.21.3\nContent-Length:  0\n</code></pre> <p>SIP Register Method</p> <p>SIP is a peer-to-peer protocol where the roles client \u2013 server and exchangeable depending on who starts a session. In reality most deployments foresee a process called registration (method: REGISTER) which allows a central server (registrar) to store the location of a SIP User-Agent.</p> <p>A SIP Phone is a client to the central Unified Communication Platform (registrar) \u2013 and the UC platform is a client to the SIP Server of the operator (registrar).</p> <p>Once the SIP Server gets to know the location of an SIP Client, it can deliver calls and other messages to it from other Clients connected to the same Server.</p> <p>Example</p> <p>Lets check procedure on CUCM as a server and MicroSIP as a client. Firstly prepare necessary defination on CUCM for registration. </p> <ol> <li>Creat <code>End User</code> on server</li> </ol> <p></p> <ol> <li>Define <code>Sip Phone</code> on server and associate with end user. <code>Line</code> is important. It is used for <code>login</code> name on Sip client side.</li> </ol> <p> </p> <ol> <li>Configure <code>Sip Device</code></li> </ol> <p></p> <p>Lets analysis on wireshark</p> <p></p> <pre><code>REGISTER sip:192.168.80.100 SIP/2.0\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPj70cbe03dbec1454ab54854d64c772539\nRoute: &lt;sip:192.168.80.100;lr&gt;\nMax-Forwards: 70\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=4a349d82ef46410d8d78fae931640634\nTo: &lt;sip:10001@192.168.80.100&gt;\nCall-ID: 26a8f5dd71574735a0224cee6701e1c5\nCSeq: 24081 REGISTER\nUser-Agent: MicroSIP/3.21.3\nContact: &lt;sip:10001@192.168.80.11:50952;ob&gt;\nExpires: 300\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nContent-Length:  0\n\nSIP/2.0 100 Trying\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPj70cbe03dbec1454ab54854d64c772539\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=4a349d82ef46410d8d78fae931640634\nTo: &lt;sip:10001@192.168.80.100&gt;\nDate: Mon, 04 Sep 2023 07:28:23 GMT\nCall-ID: 26a8f5dd71574735a0224cee6701e1c5\nCSeq: 24081 REGISTER\nContent-Length: 0\n\nSIP/2.0 401 Unauthorized\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPj70cbe03dbec1454ab54854d64c772539\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=4a349d82ef46410d8d78fae931640634\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=1745811662\nDate: Mon, 04 Sep 2023 07:28:23 GMT\nCall-ID: 26a8f5dd71574735a0224cee6701e1c5\nCSeq: 24081 REGISTER\nWWW-Authenticate: Digest realm=\"ccmsipline\", nonce=\"vP42jVSdIItGRD5nYmE71/4JD/ZYUQvL\", algorithm=MD5\nContent-Length: 0\n\nREGISTER sip:192.168.80.100 SIP/2.0\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPjfd6662cd9ec944759b6778b30e77395b\nRoute: &lt;sip:192.168.80.100;lr&gt;\nMax-Forwards: 70\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=4a349d82ef46410d8d78fae931640634\nTo: &lt;sip:10001@192.168.80.100&gt;\nCall-ID: 26a8f5dd71574735a0224cee6701e1c5\nCSeq: 24082 REGISTER\nUser-Agent: MicroSIP/3.21.3\nContact: &lt;sip:10001@192.168.80.11:50952;ob&gt;\nExpires: 300\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nAuthorization: Digest username=\"microsip01\", realm=\"ccmsipline\", nonce=\"vP42jVSdIItGRD5nYmE71/4JD/ZYUQvL\", uri=\"sip:192.168.80.100\", response=\"b70fca7c592084c62c51f1a5143ea339\", algorithm=MD5\nContent-Length:  0\n\nSIP/2.0 100 Trying\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPjfd6662cd9ec944759b6778b30e77395b\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=4a349d82ef46410d8d78fae931640634\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=1745811662\nDate: Mon, 04 Sep 2023 07:28:23 GMT\nCall-ID: 26a8f5dd71574735a0224cee6701e1c5\nCSeq: 24082 REGISTER\nContent-Length: 0\n\nSIP/2.0 200 OK\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPjfd6662cd9ec944759b6778b30e77395b\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=4a349d82ef46410d8d78fae931640634\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=1745811662\nDate: Mon, 04 Sep 2023 07:28:23 GMT\nCall-ID: 26a8f5dd71574735a0224cee6701e1c5\nServer: Cisco-CUCM14.0\nCSeq: 24082 REGISTER\nExpires: 120\nContact: &lt;sip:10001@192.168.80.11:50952;ob&gt;;x-cisco-newreg\nSupported: X-cisco-sis-10.0.0\nContent-Length: 0\n\nNOTIFY sip:10001@192.168.80.11:50952;ob SIP/2.0\nVia: SIP/2.0/UDP 192.168.80.100:5060;branch=z9hG4bK2cc6917b371\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=1676257482\nTo: &lt;sip:10001@192.168.80.11&gt;\nCall-ID: 9fdc4b00-1ef168f7-2ad-6450a8c0@192.168.80.100\nCSeq: 101 NOTIFY\nMax-Forwards: 70\nDate: Mon, 04 Sep 2023 07:28:23 GMT\nUser-Agent: Cisco-CUCM14.0\nEvent: message-summary\nSubscription-State: active\nContact: &lt;sip:10001@192.168.80.100:5060&gt;\nContent-Type: application/simple-message-summary\nContent-Length: 22\n\nMessages-Waiting: no\n</code></pre> <p>Attention : Sip device attempt with <code>Register</code> method two times. The second REGISTER includes a new header Authorization which contains the username, nonce and the response which is the overmentioned hash created from nonce  user and password in order to prevent the password from traveling in plaintext format over the internet. </p> <p>As we mention before CUCM use <code>delay offer</code> lets test it with registered sip phone. For this testting we need another defination on cucm to redirect call to out of CUCM. Our test flow is like below:</p> <pre><code>                                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     Register       \u2502       \u2502       Trunk        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Micro SIP 1 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  PBX  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Micro SIP 2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502       \u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     10001                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         10002\n</code></pre> <p>Lets define <code>route pattern</code> on cucm. It is like static route. If you want to redirect call, you need basicly two things :</p> <ol> <li>Trunk to destination</li> </ol> <p> </p> <ol> <li>Redirect for the pattern. Call Routing &gt; Route Hunt &gt; Route Pattern</li> </ol> <p></p> <p>there is a extra configuration here for Micro SIP. Micro SIP uses <code>UDP</code> but cucm use <code>TCP</code>. We should change on cucm with <code>sip trunk security profile</code> then use this profile on trunk to Micro SIP like below:</p> <p> </p> <p>Lets call from 10001 to 10002 and analysis delay offer or not.</p> <p></p> <p>there are two important things here one of them is call is delay offer that means SDP is not in invite, the other thing is call is not from microSIP-1 it is from Cucm by signalling. But if we use <code>sip or rtp</code> as display filter we will see that media flow is between microSIP-1 and microSIP-2.</p> <p></p> <p><pre><code>                                  Media Flow\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                                                                \u2502\n       \u2502                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u2502       \u2502                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Micro SIP 1 \u25c4\u2500\u2500\u2500\u2500\u2500Signalling\u2500\u2500\u2500\u2500 \u25ba PBX   \u25c4\u2500\u2500\u2500\u2500Signalling\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Micro SIP 2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502       \u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   10001                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                        10002\n</code></pre> Refer Method</p> <p><code>Refer Method</code> define in rfc3515 uses for call transfer. Lets analysis on lab like below:</p> <p><pre><code>                                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u2502       \u2502                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Micro SIP 1 \u25c4\u2500\u2500\u2500\u2500\u2500 Register \u2500\u2500\u2500\u2500\u2500\u25ba  PBX  \u25c4\u2500\u2500\u2500\u2500\u2500\u2500 Trunk \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Micro SIP 2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502       \u2502                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   10001                           \u2514\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2518                        10002\n                                       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502 10002 calls to 10001,         \u2502      \u2502\n\u2502 10001 transfer calls to 10003 \u2502      \u2502                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500Trunk\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Micro SIP 3 \u2502\n                                                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                                    10003\n</code></pre> Capture from Micro SIP 1:</p> <p></p> <pre><code>INVITE sip:10001@192.168.80.11:50952;ob SIP/2.0\nVia: SIP/2.0/UDP 192.168.80.100:5060;branch=z9hG4bK3661c5dc56f\nFrom: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nTo: &lt;sip:10001@192.168.80.100&gt;\nDate: Mon, 04 Sep 2023 09:50:43 GMT\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nSupported: timer,resource-priority,replaces\nMin-SE:  1800\nUser-Agent: Cisco-CUCM14.0\nAllow: INVITE, OPTIONS, INFO, BYE, CANCEL, ACK, PRACK, UPDATE, REFER, SUBSCRIBE, NOTIFY\nCSeq: 101 INVITE\nExpires: 180\nAllow-Events: presence\nSend-Info: conference, x-cisco-conference\nAlert-Info: &lt;file://Bellcore-dr2/&gt;\nSession-ID: 87881cd24ddf6a92abd7cfe7eab22129;remote=00000000000000000000000000000000\nRemote-Party-ID: &lt;sip:192.168.80.100&gt;;party=calling;screen=yes;privacy=off\nContact: &lt;sip:192.168.80.100:5060&gt;\nMax-Forwards: 69\nContent-Length: 0\n\nSIP/2.0 100 Trying\nVia: SIP/2.0/UDP 192.168.80.100:5060;received=192.168.80.100;branch=z9hG4bK3661c5dc56f\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nFrom: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nTo: &lt;sip:10001@192.168.80.100&gt;\nCSeq: 101 INVITE\nContent-Length:  0\n\nSIP/2.0 180 Ringing\nVia: SIP/2.0/UDP 192.168.80.100:5060;received=192.168.80.100;branch=z9hG4bK3661c5dc56f\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nFrom: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=5613b666f44041689c0c96620ef7e026\nCSeq: 101 INVITE\nContact: &lt;sip:10001@192.168.80.11:50952;ob&gt;\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nContent-Length:  0\n\nSIP/2.0 200 OK\nVia: SIP/2.0/UDP 192.168.80.100:5060;received=192.168.80.100;branch=z9hG4bK3661c5dc56f\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nFrom: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=5613b666f44041689c0c96620ef7e026\nCSeq: 101 INVITE\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nContact: &lt;sip:10001@192.168.80.11:50952;ob&gt;\nSupported: replaces, 100rel, timer, norefersub\nContent-Type: application/sdp\nContent-Length:   387\n\nv=0\no=- 3902820845 3902820845 IN IP4 192.168.71.146\ns=pjmedia\nb=AS:84\nt=0 0\na=X-nat:0\nm=audio 4028 RTP/AVP 8 0 101\nc=IN IP4 192.168.71.146\nb=TIAS:64000\na=rtcp:4029 IN IP4 192.168.71.146\na=sendrecv\na=rtpmap:8 PCMA/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-16\na=ssrc:917066532 cname:3f6028542ff246d5\nm=video 0 RTP/AVP 31\nc=IN IP4 127.0.0.1\nACK sip:10001@192.168.80.11:50952;ob SIP/2.0\nVia: SIP/2.0/UDP 192.168.80.100:5060;branch=z9hG4bK367239bc604\nFrom: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=5613b666f44041689c0c96620ef7e026\nDate: Mon, 04 Sep 2023 09:50:43 GMT\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nUser-Agent: Cisco-CUCM14.0\nMax-Forwards: 70\nCSeq: 101 ACK\nAllow-Events: presence\nSession-ID: 87881cd24ddf6a92abd7cfe7eab22129;remote=a3a189dd08a5f9750c5045c3eaa22130\nContent-Type: application/sdp\nContent-Length: 420\n\nv=0\no=CiscoSystemsCCM-SIP 22130 1 IN IP4 192.168.80.100\ns=SIP Call\nc=IN IP4 192.168.80.12\nb=AS:80\nt=0 0\nm=audio 4070 RTP/AVP 0 101\nb=TIAS:64000\na=rtpmap:0 PCMU/8000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-15\na=rtcp:4071 IN IP4 192.168.80.12\nm=video 0 RTP/AVP 31 34 96 97\na=rtpmap:31 H261/90000\na=rtpmap:34 H263/90000\na=rtpmap:96 H263-1998/90000\na=rtpmap:97 H264/90000\na=content:main\na=inactive\n\nREFER sip:192.168.80.100:5060 SIP/2.0\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPjf655869cdc6842058ffb2cc963f82a6e\nMax-Forwards: 70\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=5613b666f44041689c0c96620ef7e026\nTo: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nContact: &lt;sip:10001@192.168.80.11:50952;ob&gt;\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nCSeq: 15038 REFER\nEvent: refer\nExpires: 600\nSupported: replaces, 100rel, timer, norefersub, trickle-ice\nAccept: message/sipfrag;version=2.0\nAllow-Events: presence, message-summary, refer\nRefer-To: &lt;sip:10003@192.168.80.100&gt;\nReferred-By: &lt;sip:10001@192.168.80.100&gt;\nUser-Agent: MicroSIP/3.21.3\nContent-Length:  0\n\nSIP/2.0 202 Accepted\nVia: SIP/2.0/UDP 192.168.80.11:50952;rport;branch=z9hG4bKPjf655869cdc6842058ffb2cc963f82a6e\nFrom: &lt;sip:10001@192.168.80.100&gt;;tag=5613b666f44041689c0c96620ef7e026\nTo: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nDate: Mon, 04 Sep 2023 09:51:00 GMT\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nServer: Cisco-CUCM14.0\nCSeq: 15038 REFER\nContact: &lt;sip:192.168.80.100:5060&gt;\nContent-Length: 0\n\n\nBYE sip:10001@192.168.80.11:50952;ob SIP/2.0\nVia: SIP/2.0/UDP 192.168.80.100:5060;branch=z9hG4bK36f67f779d\nFrom: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=5613b666f44041689c0c96620ef7e026\nDate: Mon, 04 Sep 2023 09:51:00 GMT\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nUser-Agent: Cisco-CUCM14.0\nMax-Forwards: 70\nCSeq: 102 BYE\nSession-ID: 87881cd24ddf6a92abd7cfe7eab22129;remote=a3a189dd08a5f9750c5045c3eaa22130\nContent-Length: 0\n\nSIP/2.0 200 OK\nVia: SIP/2.0/UDP 192.168.80.100:5060;received=192.168.80.100;branch=z9hG4bK36f67f779d\nCall-ID: 8218e100-1ef1690b-2dc-6450a8c0@192.168.80.100\nFrom: &lt;sip:192.168.80.100&gt;;tag=22130~27aa66c8-2714-422d-b044-24d65024d146-29314073\nTo: &lt;sip:10001@192.168.80.100&gt;;tag=5613b666f44041689c0c96620ef7e026\nCSeq: 102 BYE\nContent-Length:  0\n</code></pre> <p>SIP Response Code</p> <p>There are six SIP response code class types\u2014the first digit of each code indicates the class of the code. Codes beginning with the number 1 are known as \u201cprovisional\u201d codes, and codes beginning with numbers 2-6 are known as \u201cfinal\u201d codes. Provisional codes are sent up until a call is connected; final codes confirm whether or not the connection was successful.</p> <p>You don\u2019t need to memorize the different types of SIP codes, but it can be helpful to have a reference sheet handy and a general idea of what each code indicates.</p> <p>List of SIP Response Codes</p> <p>1xx - Informational SIP Responses</p> <p>100 Trying \u2013 An extended search is being performed so a forking proxy must send a 100 Trying response. 180 Ringing \u2013 The Destination User Agent has received the INVITE message and is alerting the user of call. 181 Call Is Being Forwarded \u2013 Optional, send by Server to indicate a call is being forwarded. 182 Queued \u2013 Destination was temporarily unavailable, the server has queued the call until destination is available. 183 Session Progress \u2013 This response may be used to send extra information for a call which is still being set up. 199 Early Dialog Terminated \u2013 Send by the User Agent Server to indicate that an early dialog has been terminated.</p> <p>2xx - Success Responses</p> <p>200 OK \u2013 Shows that the request was successful 202 Accepted \u2013 Indicates that the request has been accepted for processing, mainly used for referrals. 204 No Notification \u2013 Indicates that the request was successful but no response will be received. 3xx - Redirection Responses 300 Multiple Choices \u2013 The address resolved to one of several options for the client to choose. 301 Moved Permanently \u2013 The original Request URI is no longer valid, the new address is given in the Contact header. 302 Moved Temporarily \u2013 The client should try at the address in the Contact field. 305 Use Proxy \u2013 The Contact field details a proxy that must be used to access the requested destination. 380 Alternative Service \u2013 The call failed, but alternatives are detailed in the message body.</p> <p>4xx - Request Failures</p> <p>400 Bad Request \u2013 The request could not be understood due to malformed syntax. 401 Unauthorized \u2013 The request requires user authentication. Only issued by registrars. NOTE: Proxies should use proxy authorization 407. 402 Payment Required \u2013 (reserved for future use). 403 Forbidden 404 Not Found \u2013 (User not found). 405 Method Not Allowed 406 Not Acceptable 407 Proxy Authentication Required \u2013 The request requires user authentication. 408 Request Timeout \u2013 Could not find the user in allowable time. 409 Conflict 410 Gone \u2013 The user existed once, but is not available here any more. 411 Length Required \u2013 The server will not accept the request without a valid content length (deprecated). 413 Request Entity Too Large \u2013 Request body too large. 414 Request URI Too Long \u2013 The server refuses to service the request. The Req-URI is longer than the server can interpret. 415 Unsupported Media Type 416 Unsupported URI Scheme 417 Unknown Resource-Priority \u2013 There was a resource-priority option tag, but no Resource-Priority header. 420 Bad Extension \u2013 Bad SIP Protocol Extension used, not understood by the server. 421 Extension Required \u2013 The server needs a specific extension not listed in the Supported header. 422 Session Interval Too Small 423 Interval Too Brief 424 Bad Location Information 433 Anonymity Disallowed \u2013 The request has been rejected because it was anonymous. 480 Temporarily Unavailable \u2013 Callee currently unavailable. 481 Call/Transaction Does Not Exist 482 Loop Detected 483 Too Many Hops 484 Address Incomplete 485 Ambiguous 486 Busy Here \u2013 Callee is busy. 487 Request Terminated \u2013 The request terminated by a bye or cancel. 488 Not Acceptable Here 491 Request Pending \u2013 Server has some pending request from the same dialog. 493 Undecipherable \u2013 Could not decrypt MIME body part. 494 Security Agreement Required \u2013 The server has received a request that requires a negotiated security mechanism.</p> <p>5xx - Server Errors</p> <p>500 Server Internal Error \u2013 The server could not fulfill the request due to some unexpected condition. 501 Not Implemented \u2013 The SIP request method is not implemented here. 502 Bad Gateway 503 Service Unavailable 504 Server Time-out 505 Version Not Supported \u2013 The SIP protocol version in the request is not supported by the server. 513 Message Too Large</p> <p>6xx - Global Failures</p> <p>600 Busy Everywhere \u2013 All possible destinations are busy. 603 Decline \u2013 Destination cannot/doesn't wish to participate in the call, no alternative destinations. 604 Does Not Exist Anywhere \u2013 The server has authoritative information that the requested user does not exist anywhere. 606 Not Acceptable</p>"},{"location":"collaboration/fosip/fosip/#dtmf","title":"DTMF","text":"<p>DTMF (Dual Tone Multi-Frequency) has clearly been extended to purposes beyond simply dialing a telephone number. InteractiveVoiceSystems(IVR)promptusforallsortsofthingsthatweanswerwithbuttonpresses. We log into our voicemail systems and retrieve our messages with DTMF.</p> <p><pre><code>       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502         DTMF          \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524\n697  \u2500\u25ba\u2502  1  \u2502  2  \u2502  3  \u2502  A  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n770  \u2500\u25ba\u2502  4  \u2502  5  \u2502  6  \u2502  B  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n852  \u2500\u25ba\u2502  7  \u2502  8  \u2502  9  \u2502  C  \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n941  \u2500\u25ba\u2502  *  \u2502  0  \u2502  #  \u2502  D  \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n          \u25b2     \u25b2     \u25b2     \u25b2\n          \u2502     \u2502     \u2502     \u2502\n\n        1209  1336  1477  1633\n\n    Standard DTMF Frequencies(Hz)\n</code></pre> DTMF wasn\u2019t a problem with digital and analog telephone systems because they both use a toll quality (64 kilobit, 8000 Hz) audio connection. The tones and speech easily mixed with one another and tone detection hardware was able to separate the DTMF out for applications that required it.</p> <p>\u2022 However, with VoIP and bandwidth concerns came voice compression and different techniques to send a legible voice stream using as little bytes as possible. \u2022 With RFC 2833 you don\u2019t send those DTMF signals on the same connection that you send your audio conversation.</p> <p>DTMF is used two different type in VOIP:\"in-band\" and \"out-of-band\" DTMF (Dual-Tone Multi-Frequency) dialing:</p> <ol> <li>In-Band DTMF Dialing:</li> <li>\"In-band\" DTMF dialing refers to the transmission of DTMF tones within the same voice channel, meaning they are sent as part of the audio signal.</li> <li>In this method, the DTMF tones dialed by the user are directly transmitted as part of the audio signal and can be heard by the human ear.</li> <li>In-band DTMF dialing is commonly used on traditional telephone lines.</li> <li> <p>The disadvantage is that DTMF tones can mix with other sounds and potentially lead to inadvertent dialing.</p> </li> <li> <p>Out-of-Band DTMF Dialing:</p> </li> <li>\"Out-of-band\" DTMF dialing involves transmitting DTMF tones outside of the voice channel, typically using a separate data channel or signaling channel.</li> <li>This method prevents DTMF tones from interfering with the audio signal and provides more reliable transmission.</li> <li>Out-of-band DTMF dialing is more commonly used in VoIP (Voice over IP) and digital telephone networks.</li> <li>The disadvantage is that it may require an additional signaling or data channel.</li> </ol> <p>In summary, in-band DTMF dialing is used on traditional telephone lines and some communication systems, while out-of-band DTMF dialing is more commonly preferred in modern digital communication infrastructures. The choice between these methods depends on the communication infrastructure and specific requirements.</p> <p>Here are the commonly used DTMF (Dual-Tone Multi-Frequency) relay methods:</p> <ol> <li>RFC 2833 (RTP Payload for DTMF Digits):</li> <li>RFC 2833 defines a method for relaying DTMF digits within the RTP (Real-time Transport Protocol) stream as a special payload. This allows DTMF digits to be transmitted outside of the audio channel, ensuring reliable transmission. RFC 2833 is frequently used in VoIP (Voice over IP) and digital communication networks.</li> </ol> <p> </p> <ol> <li>SIP INFO Method:</li> <li>The \"SIP INFO\" method is used in SIP (Session Initiation Protocol) to relay DTMF tones within SIP messages. This method carries DTMF tones as part of SIP messages and is commonly used in SIP-based communication systems.</li> </ol> <p> </p> <ol> <li>In-Band DTMF Relay:</li> <li>In-band DTMF relay refers to the method of transmitting DTMF tones <code>within the audio channel</code>. This means that DTMF tones are transmitted as part of the audio signal. It is often used on traditional phone lines, but DTMF tones can interfere with other sounds and potentially lead to errors.</li> </ol> <p> </p> <ol> <li>H.245 Signal:</li> <li>H.245 Signal is a method used in video conferencing systems that rely on the H.323 protocol. It allows for the transmission of DTMF tones as signals between H.323 devices.</li> </ol> <p>Each DTMF relay method can be compatible with specific communication infrastructures and protocols. The choice of which method to use depends on the characteristics of your communication systems and requirements. If you are using VoIP, SIP, H.323, or other communication protocols, you should select the appropriate DTMF relay method accordingly.</p>"},{"location":"collaboration/fosip/fosip/#ios-devices-and-sip","title":"IOS Devices and SIP","text":"<p>SIP (Session Initiation Protocol) is a protocol used for initiating, terminating, and managing communication sessions, particularly in Voice over IP (VoIP) applications. It plays a crucial role in facilitating communication between Cisco IOS (Internetwork Operating System) devices and other VoIP devices. Here's a description of the relationship between SIP protocol and Cisco IOS devices:</p> <ul> <li>Cisco IOS devices use the SIP protocol to initiate, terminate, and manage VoIP calls.</li> <li>SIP is a fundamental protocol for call control in both voice and video communication.</li> <li>Cisco devices establish communication using SIP by connecting to SIP servers or other SIP-based devices.</li> <li>Cisco IOS devices use for <code>media resource</code> like conference bridge, media termination point, music on hold etc.</li> </ul> <p>cisco ios devices could act two different roles one of them is <code>voice gateway</code>, the second one is <code>session border controller</code> (SBC).  In cisco terminology, SBC named as CUBE router, that means IP-to-IP gateway generally SIP-TO-SIP.</p> <p>We need some configuration for this feature, lets getting deep for this situation.</p> <pre><code>voice service voip\nallow-connection sip to sip            --&gt; this enable ip to ip communication (sip to sip)\n!\ndial-peer voice 1000 voip              --&gt; this is virtual gate, uses for outgoing or incoming call\n session protocol sipv2                --&gt; this virtual gate uses sip not h323 etc.\n incoming called-number 1              --&gt; this dial-peer for calling '1'\n session target ipv4:192.168.80.11     --&gt; this dial-peer communicate with this ip\n codec g711ulaw                        --&gt; only accept g711ulaw codec (default value g729)\n</code></pre> <p>after this configuration, our ios device now accept call from outsite. Lets test it from MicroSIP device and enable <code>debug</code> on IOS devices with <code>debug ccsip message</code>.</p> <pre><code>Received:\nINVITE sip:1@192.168.80.254 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50555;rport;branch=z9hG4bKPj4c1fe50f616945f5b4b9c4a4103efcec\nMax-Forwards: 70\nFrom: &lt;sip:31.145.1.90&gt;;tag=3b1d7dd63c2e42238a89541c88118e5d\nTo: &lt;sip:1@192.168.80.254&gt;\nContact: &lt;sip:192.168.80.11:50555;ob&gt;\nCall-ID: 23ccb54af191467ab6bceb00814a5a43\nCSeq: 13513 INVITE\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nSupported: replaces, 100rel, timer, norefersub\nSession-Expires: 1800\nMin-SE: 90\nUser-Agent: MicroSIP/3.21.3\nContent-Type: application/sdp\nContent-Length:   346\n\nv=0\no=- 3903069636 3903069636 IN IP4 192.168.71.146\ns=pjmedia\nb=AS:84\nt=0 0\na=X-nat:1\nm=audio 4022 RTP/AVP 8 0 101\nc=IN IP4 192.168.71.146\nb=TIAS:64000\na=rtcp:4023 IN IP4 192.168.71.146\na=sendrecv\na=rtpmap:8 PCMA/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-16\na=ssrc:1230049490 cname:10e14846533a1224\n\nSep  7 06:57:10.746: //-1/xxxxxxxxxxxx/SIP/Msg/ccsipDisplayMsg:\nReceived:\nINVITE sip:1@192.168.80.254 SIP/2.0\nVia: SIP/2.0/UDP 192.168.71.146:50555;rport;branch=z9hG4bKPj4c1fe50f616945f5b4b9c4a4103efcec\nMax-Forwards: 70\nFrom: &lt;sip:31.145.1.90&gt;;tag=3b1d7dd63c2e42238a89541c88118e5d\nTo: &lt;sip:1@192.168.80.254&gt;\nContact: &lt;sip:192.168.80.11:50555;ob&gt;\nCall-ID: 23ccb54af191467ab6bceb00814a5a43\nCSeq: 13513 INVITE\nAllow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS\nSupported: replaces, 100rel, timer, norefersub\nSession-Expires: 1800\nMin-SE: 90\nUser-Agent: MicroSIP/3.21.3\nContent-Type: application/sdp\nContent-Length:   346\n\nv=0\no=- 3903069636 3903069636 IN IP4 192.168.71.146\ns=pjmedia\nb=AS:84\nt=0 0\na=X-nat:1\nm=audio 4022 RTP/AVP 8 0 101\nc=IN IP4 192.168.71.146\nb=TIAS:64000\na=rtcp:4023 IN IP4 192.168.71.146\na=sendrecv\na=rtpmap:8 PCMA/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:101 telephone-event/8000\na=fmtp:101 0-16\na=ssrc:1230049490 cname:10e14846533a1224\n\nSep  7 06:57:11.746: //-1/xxxxxxxxxxxx/SIP/Msg/ccsipDisplayMsg:\n</code></pre> <p></p> <p>there are only <code>invite</code>. There is no redirection lets configure it to another MicroSIP device on workstation-2</p> <p><pre><code>dial-peer voice 1001 voip              --&gt; this is another virtual gate\n destination-pattern 1                 --&gt; this gate for specific destination '1'\n session protocol sipv2                --&gt; it is sip \n session target ipv4:192.168.80.12     --&gt; when match the destination pattern redirect call to this address\n codec g711ulaw                        --&gt; use this codec\n</code></pre> now it is ok</p> <p></p> <p>we can see active call from gateway with <code>show cube calls</code></p> <p><pre><code>CUBE-A#show cube calls\n\nSIP call leg info:\n=============================================================\nTotal SIP call legs:2, User Agent Client:1, User Agent Server:1\nSIP UAC CALL INFO\nNo.  CallId    Calling#       Called#        RmtSignalIP                                  RmtMediaIP\n     dstCallId SIPState       SIPSubState\n========================================================================================================================================\n1    4                        1              192.168.80.12                                192.168.80.12\n     3         STATE_ACTIVE   SUBSTATE_NONE\n   Number of SIP User Agent Client(UAC) calls: 1\n\nSIP UAS CALL INFO\nNo.  CallId    Calling#       Called#        RmtSignalIP                                  RmtMediaIP\n     dstCallId SIPState       SIPSubState\n========================================================================================================================================\n1    3                        1              192.168.80.11                                192.168.71.146\n     4         STATE_ACTIVE   SUBSTATE_NONE\n   Number of SIP User Agent Server(UAS) calls: 1\n\n\nshow call active voice: a total of 2 audio call-legs\n=============================================================\n\nTelephony call-legs: 0\nSIP call-legs: 2\nH323 call-legs: 0\nCall agent controlled call-legs: 0\nSCCP call-legs: 0\nSTCAPP call-legs: 0\nMulticast call-legs: 0\nTotal call-legs: 2\n\n show voip rtp connection:\n =============================================================\n\nVoIP RTP Port Usage Information:\nMax Ports Available: 19999, Ports Reserved: 101, Ports in Use: 2\nPort range not configured\n                                        Min   Max   Ports     Ports     Ports\nMedia-Address Range                     Port  Port  Available Reserved  In-use\n------------------------------------------------------------------------------\nGlobal Media Pool                       8000  48198 19999     101       2\n------------------------------------------------------------------------------\nVoIP RTP active connections :\nNo. CallId     dstCallId  LocalRTP RmtRTP   LocalIP                                     RemoteIP                                  MPSS  VRF\n1     3          4          8004     4008     2.2.2.2                                   192.168.71.146                            NO    NA\n2     4          3          8006     4008     192.168.80.254                            192.168.80.12                             NO    NA\nFound 2 active RTP connections\nNumber of Calls : 1\n---------- ---------- ---------- ----------- --------------- ---------------\n    confID correlator    AcallID     BcallID           state           event\n---------- ---------- ---------- ----------- --------------- ---------------\n         1          1          3          4       ALLOCATED DETAIL_STAT_RSP\n</code></pre> You dont have to choose a codec, if you dont know the codec you can use a group of codec that we called this <code>codec class</code></p> <p><pre><code>voice class codec 100\n codec preference 1 g711ulaw\n codec preference 2 g711alaw\n codec preference 3 g729r8\n</code></pre> then we should use this codec class in to dial-peer</p> <p><pre><code>dial-peer voice 1000 voip\n voice-class codec 100\n!\ndial-peer voice 1001 voip\n voice-class codec 100\n</code></pre> this means, i prefer g711ulaw firstly then g711alaw and g729r8</p> <p>We configured SIP OPTION on cucm. We can do same thing on IOS device like below:</p> <pre><code>!Configuring the SIP Keepalive Group\nvoice class sip-options-keepalive 10\nup-interval 60\nretry 5\n\n!Configuring an outbound SIP Dial Peer\ndial-peer voice 1001 voip\nvoice-class sip options-keepalive profile 10\n</code></pre> <p></p> <p>On the other hand we can modify sip packet on cisco ios with <code>sip profile</code> or cucm with <code>sip normalization</code>. Lets test on our topology</p> <p><pre><code>voice class sip-profiles 2\n request ANY sip-header User-Agent modify \"Cisco-SIPGateway/IOS-17.4.1a\" \"ilker MANSUR\"\n response ANY sip-header User-Agent modify \"Cisco-SIPGateway/IOS-17.4.1a\" \"ilker MANSUR\"\n!\nvoice service voip\n sip\n  sip-profile 2\n</code></pre> or you can use this into dial-peer</p> <pre><code>dial-peer voice 1001 voip\n voice-class sip profiles 2\n</code></pre> <p></p> <p>sometimes you need to capture from IOS Device. For this operation</p> <p><pre><code>ip access-list standard CUBE\n 10 permit 192.168.80.254\n 20 deny   any\n!\nmonitor capture ioslog access-list CUBE interface gigabitEthernet 1 both start\nmonitor capture ioslog stop\n!\nconf t\nip ftp username &lt;username&gt;\nip ftp password &lt;password&gt;\n!\nmonitor capture ioslog export ftp://192.168.80.11/ioslog.pcap\nor \nCUBE-A#show monitor capture ioslog buffer brief\n ----------------------------------------------------------------------------\n #   size   timestamp     source             destination      dscp    protocol\n ----------------------------------------------------------------------------\n   0   63    0.000000   192.168.80.254   -&gt;  192.168.80.11    48 CS6  TCP\n   1   54    1.827020   192.168.80.254   -&gt;  192.168.80.11    0  BE   TCP\n   2  445    2.971010   192.168.80.254   -&gt;  192.168.80.12    26 AF31 UDP\n   3   63    7.799962   192.168.80.254   -&gt;  192.168.80.11    48 CS6  TCP\n   4   81   15.347989   192.168.80.254   -&gt;  255.255.255.255  0  BE   UDP\n   5   81   19.347989   192.168.80.254   -&gt;  255.255.255.255  0  BE   UDP\n   6   54   20.522983   192.168.80.254   -&gt;  192.168.80.11    0  BE   TCP\n   7   90   22.187994   192.168.80.254   -&gt;  192.168.80.100   48 CS6  UDP\n   8   90   24.187994   192.168.80.254   -&gt;  192.168.80.100   48 CS6  UDP\n   9   55   26.157996   192.168.80.254   -&gt;  192.168.80.11    48 CS6  TCP\n  10   90   26.187994   192.168.80.254   -&gt;  192.168.80.100   48 CS6  UDP\n</code></pre> signalling is in .pcap but RTP not WHY?</p> <p></p> <p>There is a concept here <code>media flow around</code> or <code>media flow through</code></p> <p></p> <pre><code>! under dial-peer\ndial-peer voice 1 voip\nmedia flow-through/flow-around\n\n! or as a service parameter\nvoice service voip\nmedia flow-through/flow-around\n</code></pre> <p>Virtual cube do not support media flow-through because we need media resource as MTP feature.</p>"},{"location":"collaboration/fosip/fosip/#nat-in-sip","title":"NAT in SIP","text":"<pre><code>Source:192.168.80.11:1525                 Source:182.178.80.11:17255\nDestination:165.122.44.21:5060            Destination:165.122.44.21:5060\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                            \u2502            \u2502                             \u2502\n\u2502    Local SIP Device        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba            NAT              \u2502\n\u2502                            \u2502            \u2502                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n                                                   NAT Router\n\n                                                  NAT Binding\n\n                          Source:192.168.80.11:1525 &lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; Source:182.178.80.11:17255\n</code></pre> <p>NAT (Network Address Translation) is a network configuration technique that can introduce challenges, especially in the context of VoIP (Voice over IP) and SIP (Session Initiation Protocol) traffic. Here are the reasons explaining why NAT can create problems for SIP traffic and some tips on how to address these issues:</p> <p>Reasons:</p> <ol> <li> <p>IP Address Translation: NAT associates the IP addresses of devices within an internal network with a single external public IP address. This can lead to the translation of source and destination IP addresses in SIP traffic, causing routing issues.</p> </li> <li> <p>Port Mapping: NAT uses port mapping to distinguish between devices sharing the same public IP address. If port mapping is not properly configured or if it is misconfigured, incoming SIP traffic may not be correctly routed.</p> </li> <li> <p>Signaling Issues: NAT can introduce problems in the transmission of SIP signaling messages, such as call setup or termination. This can hinder the initiation or termination of calls.</p> </li> <li> <p>Voice Quality: SIP traffic includes not only signaling but also voice traffic. NAT may interfere with the proper transmission or introduce delays in voice packets, resulting in voice quality issues.</p> </li> <li> <p>Symmetric NAT: Some NAT types do not map incoming and outgoing traffic using the same port numbers. This can further complicate the correct routing of SIP traffic.</p> </li> </ol> <p>Solution Tips:</p> <ol> <li>STUN (Session Traversal Utilities for NAT): STUN servers can help you determine the real IP addresses and port numbers behind NAT devices. SIP clients can use STUN servers to discover the IP addresses and port numbers behind NAT.</li> </ol> <p>Lets check in MicroSIP</p> <p> </p> <ol> <li> <p>ICE (Interactive Connectivity Establishment): ICE is a protocol designed for NAT traversal and can automatically detect and bypass NAT devices. ICE provides a reliable solution for SIP communication.</p> </li> <li> <p>TURN (Traversal Using Relays around NAT): A TURN (Traversal Using Relays around NAT) server is often used in conjunction with SIP (Session Initiation Protocol) to facilitate communication when devices are behind NAT (Network Address Translation) and firewall barriers. Here's how a TURN server works in the context of SIP. A TURN server acts as a relay for SIP signaling and media traffic when NAT or firewall barriers prevent direct communication between SIP devices. It allocates public IP addresses and ports, facilitating the flow of data between devices, and enables end-to-end communication despite network address translation and firewall restrictions.</p> </li> </ol>"},{"location":"collaboration/icms/cms/","title":"CMS Deployment","text":"<p>Database: Allows some configuration, such as dial plan, spaces, and users to be aggregated. Supports clustering for high availability only (single master). Call Bridge: The audio and video conferencing bridge, including all call control and media processing. Supports clustering for high availability and scalability. XMPP server: Registration &amp; authentication for CMA and WebRTC clients as well as inter-component signaling. Can be clustered for high availability only. Web Bridge: Provides access for WebRTC clients Web Admin: Administration GUI and API access, including for Unified CM ad-hoc conferencing Recording &amp; Streaming: Call recording and streaming functionality</p> <p>Configuration Modes</p> <p>Command Line (CLI): The command-line interface, known as the MMP (or Mainboard Management Processor, from the Acano appliance days), for initial configuration tasks and certificates. Web Admin: Primarily for CallBridge-related configuration, especially when configuration a single, non-clustered server. REST API: Used for most advanced configuration tasks and those that involve a clustered database.</p> <p>In addition, the SFTP protocol is used to transfer files - typically licenses, certificates, or logs - to and from the CMS server. While there may be tools that can configure much of this, it is imperative for administrators to understand and be comfortable with each of these methods of access and the type of information each provides.</p> <p>Prerequests:</p> <ol> <li>DNS Host-A record for all cms node</li> </ol> <p></p> <p>do same record for all CMS nodes</p> <p></p> <p>Step 1 - Configure password</p> <p>Configure connectiom credential on console connection. CMS forces you to change password. Default username is <code>admin</code> and default password is also <code>admin</code>. Change password to for example <code>cisco</code>.</p> <p></p> <p>Step 2 - Configure Hostname and IP address</p> <p>For your reference, the following command was used to configure the IP address on the CMS1 server:</p> <p><pre><code>CMS&gt; hostname cms1\nA reboot is required for the change to take effect\n!\nipv4 a add 192.168.80.151/24 192.168.80.254\n!\n!\nCMS&gt; ipv4 a\nIPv4 configuration:\n    address         192.168.80.151\n    default         true\n    dhcp            false\n    enabled         true\n    gateway         192.168.80.254\n    macaddress      00:50:56:BC:FC:7D\n    prefixlen       24\nIPv4 observed values\nAddresses:\n192.168.80.151/24\nRoutes:\n    source          destination     gateway         global\n    0.0.0.0         192.168.80.151  0.0.0.0         false\n    0.0.0.0         192.168.80.0    0.0.0.0         false\n    0.0.0.0         192.168.80.0    0.0.0.0         false\n    0.0.0.0         192.168.80.255  0.0.0.0         false\n    0.0.0.0         0.0.0.0         192.168.80.254  true\nCMS&gt;\n</code></pre> Step 3 - Installation CMM</p> <p>CMM configuration assistant getting easy to CMS configuration DNS, Certification, NTP, Timezone, LDAP etc...</p> <p></p> <p></p> <p>After initial deployment, CMM generate random password for GUI</p> <p></p> <p>Step 4 - Configuration CMM</p> <ul> <li>renew password</li> </ul> <p></p> <ul> <li>Configure CDR for CMS servers</li> </ul> <p></p> <ul> <li>Configure NTP</li> </ul> <p></p> <p>then restart for applying configuration.</p> <p>Step 4 - Add CMSs to CMM</p> <p></p> <ul> <li>Enter CMS creadentials and add</li> </ul> <p></p> <ul> <li>choose deployment what you want to configuration Role </li> </ul> <p></p> <ul> <li>choose certificate parameter which you desired then click next</li> </ul> <p></p> <ul> <li>Configure FQDN and SIP domain. It is very important for certification. If you want to change this parameter later, you should regenerate certification.</li> </ul> <p></p> <ul> <li>Download CSR</li> </ul> <p></p> <ul> <li>Sign CSR on CA server with suitable template</li> </ul> <p></p> <ul> <li>Download signed certificate and root certificate with Base-64 format</li> </ul> <p></p> <p></p> <ul> <li>Add cms certificate and root certificate of CA server</li> </ul> <p></p> <ul> <li>Configure NTP, Timezone, DNS and Web Admin port</li> </ul> <p></p> <ul> <li>Configure call bridge what you want</li> </ul> <p></p> <ul> <li>Next this with default parameter</li> </ul> <p></p> <ul> <li>Enter LDAP or LDAPS credentials</li> </ul> <p></p> <ul> <li>Check summary configuration then if everything is ok, push configuration to CMS</li> </ul> <p></p> <p></p> <ul> <li>After pushing configuration add CMS to CMM again but in this time choose <code>configured server</code></li> </ul> <p></p> <p></p> <p>All this configuration for CMS1 then repeate Step 4 for all CMS servers</p> <p></p>"},{"location":"collaboration/icms/cms_db_cluster/","title":"CMS Cluster","text":""},{"location":"collaboration/icms/cms_db_cluster/#database-cluster","title":"Database Cluster","text":"<p>In this chapter, we will set up a database cluster between the three CMS nodes. Each Callbridge will connect to the primary database. The slave databases are in place for resilience. </p> <p></p> <p>Certificate</p> <p>CMS requires encrypted communications between various components and as a result, X.509 certificates are required for all CMS deployments. They help ensure that a service/server can be trusted by other devices/services.</p> <p>There are three types of certificates to consider: self-signed, private certificate authority (CA)-signed, and public CA-signed.</p> <p>Self-signed certificates are certificates that the device can generate itself. They are not recommended or supported for most clustered/scalable deployments. Only the all-in-one-box deployments support self-signed certificates, and even then, it is not recommended.</p> <p>Public CA-signed certificates require registration with a public certificate authority and are a requirement when interfacing with devices on the Internet. When deployed correctly, they are automatically trusted by browsers and mobile apps that connect to CMS. The downside is that these certificates cost money and require the domain to be registered with an external domain registrar.</p> <p>Private CA-signed certificates are similar to the public CA-signed certificate except the CA itself is controlled by the customer and therefore not automatically trusted by devices outside the administrative control of the company managing the CA. That said, trust can be achieved by installing the root certificate from the private CA onto the devices that need to trust the certificates signed by the CA.</p> <p>In this lab, you will be using a private CA to generate certificates for CMS. The CA for this lab is a Microsoft Windows Certificate Authority server. You will be installing the root CA certificate from this private CA on your various devices so that certificates generated by the CA will be trusted by the other devices in the lab. Often times this is what is found in internal customer networks, while public CA signed certificates are installed for externally facing services so that external customers or non-CMS users can trust that they are indeed communicating to your organization.</p> <p>Although every service requires a certificate, creating individual certificates for each service can add unnecessary complexity. Fortunately, you can generate a certificate public and private key pair, then re-use it for multiple services. For example, in this lab you will obtain a single certificate for Call Bridge, XMPP server, Web Bridge, and Web Admin. With some additional considerations, this certificate will also be able to integrate with on-premise Microsoft Lync / Skype for Business.</p> <p>Database clustering however, has some <code>special certificate requirements</code> and therefore requires its own certificates. It uses a <code>server certificate</code> that is similar to the certificates used by the other servers, but there is also a <code>client certificate</code> used for connections to the database. The database certificates are used for both authentication and encryption. Instead of presenting a username and password for the client to connect to the database, it presents the client certificate which is trusted by the server. Each server in the database cluster will share the same public and private key pair. This allows all the servers in the cluster to encrypt data in such a way that it can only be decrypted by other servers that also share the same key pair.</p> <p>For all CA-signed certificates (both public and private), the general process is as follows:</p> <ul> <li> <p>The pki csr command is used to generate certificate requests. This creates a new private key and a certificate signing request (CSR) file.</p> </li> <li> <p>Download the CSR file to the local PC via SFTP.</p> </li> <li> <p>Submit the CSR to the Certificate Authority to get the CSR signed. In this lab, you will submit the CSR and download the certificate issued by the CA via the command-line.</p> </li> <li> <p>Upload the issued certificate to CMS via SFTP.</p> </li> </ul> <p>Create CSR Certificate</p> <p>When used by itself, the CN is set to the Fully Qualified Domain Name (FQDN) of the CMS server as specified in DNS, e.g <code>cms1a.pod1.cms.lab</code>. It is needed to secure the DNS identity of the server, especially when used for a single, dedicated function. For instance, it allows for browsers to display the secure icon when specifying the name of single CMS server. When used for multiple roles, as we do in this lab, the CN field is less important for certificate verification, since browsers and most other devices should verify the server identity using the multiple subjectAltName fields (see below) instead of the CN. However, when integrating with Microsoft Lync / Skype for Business, which we will later on, the CN is still important, so we will set the CN now to a DNS name we have set up for the CMS cluster FQDN for that portion of the integration, cms1.pod1.cms.lab.</p> <p><code>The subjectAltName</code> includes the FQDN that users will use to access the CMS, cms1.pod1.cms.lab. This is the DNS name for the specific CMS server, not just thw whole cluster</p> <p><code>The subjectAltName</code> includes the XMPP domain, which is the domain portion of the URI that users will use when logging into CMS, e.g. conf.pod1.cms.lab</p> <p><code>The subjectAltName</code> includes the CMS domain (which users will use for their meeting spaces and IDs), <code>pod1.cms.lab</code></p> <p><code>The subjectAltName</code> includes the FQDN of the CMS server. This is included in case the FQDN is specified directly instead of a cluster DNS name. You could technically use cms1.pod1.cms.lab, but often it's good to use something that's easier to users to remember, or if you might have different hosts that are dedicated to the web bridge functionality. We'll use <code>join.pod1.cms.lab</code></p> <p>Example for any CMS</p> <p>cms1a&gt; pki csr cms1a CN:cms1.pod1.cms.lab subjectAltName:cms1a.pod1.cms.lab,pod1.cms.lab,conf.pod1.cms.lab,join.pod1.cms.lab</p> <p>Database Certification</p> <p>CMS uses a postgres database with a single master and multiple, fully-meshed replicas. There is only a single master database at a time (the \u201cdatabase server\u201d). The remaining cluster members are replicas or \u201cdatabase clients\u201d.</p> <p>For redundancy to work, database clusters must consist of at least 3 servers but no more than 5, with a <code>maximum round-trip time of 200ms</code> between any cluster members. This limit is more restrictive than Call Bridge clustering, so it is often the limiting factor in geographically dispersed deployments.</p> <p>The database role for CMS has some unique requirements. Unlike other roles, it requires a client and server certificate, where the client certificate has a specific CN field that is presented to the server.</p> <p>For the database cluster, a dedicated <code>server certificate</code> and <code>client certificate</code> are required. These must be signed certificates, typically by an internal private CA. Because any of the database cluster members may become the master, the database server and client certificate pairs (containing the public and private keys) must be copied to all of the servers so they can assume the identity of a database client or server. Additionally, the CA\u2019s <code>root certificate</code> must be loaded to ensure that the client and server certificates can be validated.</p> <p>Example DB Server CSR</p> <p>You can technically perform these actions on any server within the CMS cluster, but you will do this on cms1a.</p> <p>Like before, use the <code>pki csr</code> command to generate the CSR. Notice that this CSR includes the names of all three CMS servers because the same certificate will be copied to all the servers. Connect to cms1a and issue the command below.</p> <p>cms1a&gt; pki csr dbclusterserver CN:cms1a.pod1.cms.lab subjectAltName:cms1b.pod1.cms.lab,cms1c.pod1.cms.lab</p> <p>Example DB Server CSR</p> <p>Next, create the database client certificate. This one is unique in that it requires setting CN:postgres. No other fields, such as the machine FQDN or other information, is required.</p> <p>Download All CSRs and Database Key Files</p> <p>Now that you have created all the necessary certificate requests, you can download them. You will also download the dbclusterserver and dbclusterclient key files containing the private keys because you will use the dbclusterserver and dbclusterclient certificates on all of the CMS servers, as they will all be configured as database cluster members.</p> <p>The combined server certificate request, cms1a.csr The database cluster server certificate request, dbclusterserver.csr The database cluster client certificate request, dbclusterclient.csr The database cluster server private key, dbclusterserver.key The database cluster client private key, dbclusterclient.key</p> <p>Create a Certificate Bundle</p> <p>Some services, such as the XMPP clustering server, require a trust bundle to identify all certificates of clients that it will accept, as a form of authentication. To create such a bundle, you must create a file that contains all three server certificates (from cms1a, cms1b, and cms1c) in a single file.</p>"},{"location":"collaboration/icms/cms_db_cluster/#callbridge-cluster","title":"Callbridge Cluster","text":""},{"location":"collaboration/uccxd/uccxd/","title":"UCCXD - Deploying Cisco Unified Contact Center Express","text":""},{"location":"collaboration/uccxd/uccxd/#introduction-to-uccx","title":"Introduction to UCCX","text":"<p>Features </p> <ol> <li>(ACD) Automatic Call Distribution : Route calls, skills based route call</li> <li> <p>IVR Interactive voice responder : Interact with customer. Customer manage IVR with pressing button. </p> <p>1 for Sales,  2 for Human Resource, 3 for Information</p> </li> <li> <p>DB Information : UCCX interract with DB and pull information about customer and agent response to customer with this information.  </p> </li> </ol> <p>There are four types of <code>Contact Center</code> ,</p> <p>Unified Contact Center Express        : 400 Agent</p> <p>Packaged Contact Center Enterprise    : 12000 Agent</p> <p>Unified Contact Center Enterprise     : 24000 Agent</p> <p>Webex Contact Center                  : Cloud Based Contact Center.</p> <p>UCCX Terminology</p> <p>Computer Telephony Integration (CTI) :</p> <p>CTI Route Points : When you create <code>Application</code> on UCCX, CTI route point created automatically</p> <p></p> <p>Call Control Group : CCG is a group of concurrent port which is configure by manually.</p> <p> </p> <p>CTI Ports : When you configure <code>Call Control Group</code>, UCCX create <code>CTI PORTS</code> on Cucm due to API access.</p> <p></p> <p>Contact Service Queue (CSQ) : CSQ represents agent group. </p> <p></p> <p>JTAPI Application User : JTAPI user manage CTI ports and CTI route point</p> <p></p> <p>RmCm Application User : Resource manager  is about <code>Agent</code> - Contact manager is about <code>queue</code></p> <p></p> <p>Resource : Agents who can be used on CSQ etc</p> <p></p> <p>Skills : Used for speciality like language or expret level etc</p> <p></p> <p>Resource Group : RG used for grouping the agents. After creation you can assign agent to RG.</p> <p> </p> <p>Teams : Used for supervisors. Supervisors responsible the agents. Agents who belong to <code>Team</code>, managed by same supervisor.</p> <p></p> <p>UCCX Call Flow</p> <p></p> <p>1 Step - <code>CUBE</code> accept call from ITSP.</p> <p>2 Step - Call distribute from <code>CUBE</code>router with <code>dial-peer</code> to CUCM.</p> <p>3 Step - There is a CTI route point on CUCM, call goes to <code>CC</code> from CTI route point over CTI ports.</p> <p>4 Step - Contact Center accept call from trigger number and distribute to agent that you configure.</p> <p>Automatic Call Distribution (ACD)</p> <p><code>Resource groups</code> are a static group of agents that can be assigned to one or more queues.</p> <p><code>Skills</code> based routing can be configured to require an agent to be assigned one or more skills, and at a minimum level, before calls can be routed to them, and route the calls to agents based on the skill level assigned to them. Queues can be configured to route based on a number of functions based on the agent\u2019s skill level, high to low, low to high, and based on weighting.</p> <p>In UCCX, skills are a simple text tag, and a skill level from 1 to 10. Agents can be assigned skills, and queues can be configured to require them.</p> <p>Resource Group</p> <p><code>Resource Group</code> based queuing is much more like traditional hunt group routing, where a fixed group of resources (agents) is selected from. You lose flexibility compared to Skills Based routing, but gain some simplicity. </p> <p><code>Longest Idle</code> the person who has been off the phone the longest gets the next call</p> <p><code>Linear</code> Agent 1 always gets the call if the are available, if not, agent 2 gets the call. If neither are available, the call is delivered to agent 3, etc.</p> <p><code>Circular</code> Agent 1 gets a call, agent 2 gets the next one, and so on, unless the next scheduled agent is not available, when is skips to the next available agent in the ordered line.</p> <p>Most Handled Contacts &amp; Shortest Average Handle Time, (the system dynamically reorders the list based on efficiency metrics)</p> <p></p>"},{"location":"collaboration/uccxd/uccxd/#cucm-uccx-integration","title":"CUCM &amp; UCCX Integration","text":"<ul> <li>Step 1 - Create <code>Access Control Group</code> for UCCX.</li> </ul> <ul> <li>Step 2 - Add <code>Standard AXL API Access</code> role to <code>ACG</code> which is created in Step 1.</li> </ul> <ul> <li>Step 3 - Create <code>Application User</code> with this <code>Access Control Group</code></li> </ul> <ul> <li>Step 4 - On UCCX GUI, fill the information about <code>CUCM</code></li> </ul> <ul> <li>Step 5 - This exception begun with version 12.5. You should upload <code>Tomcat Trust</code> certificate to <code>UCCX tomcat trust store</code></li> </ul> <ul> <li>Step 6 - There are four <code>Tomcat Trust</code> certificate. Choose which belogs to <code>CUCM</code>.</li> </ul> <ul> <li>Step 7 - Download <code>Tomcat Trust</code> certificate as a .pem format, then upload it to <code>UCCX</code>. Then restart <code>UCCX</code> from cli with <code>utils system restart</code> command.</li> </ul> <ul> <li>Step 8 - Choose license type. For testing use <code>NFP</code> (Not for production).</li> </ul> <ul> <li>Step 9 - You can change license type on this page otherwise click <code>next</code> to continue.</li> </ul> <ul> <li>Step 10 - waiting for activating license then click <code>next</code></li> </ul> <ul> <li>Step 11 - Click <code>next</code></li> </ul> <ul> <li>Step 12 - Enter <code>cti</code> and <code>rmcm</code> user credential for managing agent and phones.</li> </ul> <ul> <li>Step 13 - Choose agent number then click <code>click</code></li> </ul> <ul> <li>Step 14 - Choose language then click <code>next</code></li> </ul> <ul> <li>Step 15 - Choose adminbetween users.</li> </ul> <ul> <li>Step 16 - Firstly you should assign extension as a <code>IPCC</code> Extension.</li> </ul> <ul> <li>Step 17 - Now you will see user as a resource in UCCX <code>Subsystems / RmCm /Resources</code></li> </ul> <ul> <li>Step 18 - Now create skill and assign it <code>Subsystems / RmCm / Skill</code> and add new</li> </ul> <ul> <li>Step 19 - Add <code>Skill</code> to <code>Resource</code></li> </ul> <ul> <li>Step 20 - Now assign supervisor capability <code>Wizard / RmCm Wizard / Add Supervisor</code> By default all users as agent capabilit. Then click <code>Next</code></li> </ul> <ul> <li>Step 21 - Step build <code>Contact Service Queues</code> then click <code>Next</code></li> </ul> <ul> <li>Automatic wrap UP</li> <li> <p>Wrap up time</p> </li> <li> <p>Step 22 - Choose <code>Skill</code> and <code>Resource Selection Criteria</code></p> </li> </ul> <p></p> <ul> <li>Step 23 - Congratulations you created a CSQ.</li> </ul> <p></p> <ul> <li>Step 24 - Lets configure <code>Call Control Group</code>. Subsystems / Cisco Unified CM Telephony / Call Control Group then click <code>Add</code>.</li> </ul> <p></p> <ul> <li>Step 25 - Check it on UCCX</li> </ul> <p></p> <p>and from CUCM site</p> <p></p>"},{"location":"collaboration/uccxd/uccxd/#uccx-creating-script","title":"UCCX Creating Script","text":"<p>For creating script, we need script editor. You can download it from uccx plugin page like below.</p> <p></p> <p>It is easy to install. a couple of <code>next</code> <code>next</code></p> <p></p> <ul> <li>There are four sites of <code>script editor</code>.Script editor has drop-down machanism, you dont need to know any scripting language.</li> </ul> <p></p> <ul> <li>example diagram</li> </ul> <p></p>"},{"location":"collaboration/uccxd/uccxd/#labs","title":"LABS","text":"<p>LAB 01 - Play prompt</p> <p>Purpose: </p> <p>Caller calls the trigger number, listen prompt and hang up line automatically. Use P_101.waw as a prompt.</p> <p>Answer:</p> <p></p> <p>LAB 02 - Real Scenarios</p> <p>Purpose:</p> <p>Caller calls the trigger number then listen prompt, prompt says in turkish \"BT Egitim'e ho\u015fgeldiniz muhasebe i\u00e7in 1'e, insan kaynaklar\u0131 i\u00e7in 2'ye, sat\u0131\u015f i\u00e7in 3'e, teknik destek i\u00e7in 4'e bas\u0131n\". Test every option and its call routing. Use P_201.waw as a prompt. In order of options:</p> <ol> <li> <p>Muhasebe (1021)</p> </li> <li> <p>Insan Kaynaklar\u0131 (1022)</p> </li> <li> <p>Sat\u0131\u015f (1023)</p> </li> <li> <p>Teknik Destek (1024)</p> </li> </ol> <p>Answer:</p> <p></p> <p>LAB 03 - Using SET in Script Editor</p> <p>Purpose:</p> <p>Use <code>SET</code> item for LAB-02 scenario. In <code>timeout</code> listen greeting prompt again and again.</p> <p>Answer:</p> <p></p> <p>LAB 04 - Multi-Language Usage</p> <p>Purpose:</p> <p>Use <code>English</code> as a second language in same scenario. </p> <p>Answer:</p> <p></p> <p>LAB 05 - Calendar Usage in UCCX Script</p> <p>Purpose:</p> <p>Use <code>calendar</code> in script for arranging propt and listen off business hours prompt to caller.</p> <p>Answer:</p> <p>First of all, you should arrange business hours / non-business hours on UCCX GUI <code>Calendar Management</code>. </p> <p></p> <p>Is there any special days cnofigure them on <code>schedule Custom Business Days</code> line below</p> <p></p> <p>In third step, you can schedule holidays,</p> <p></p> <p>PS : Earlies version of 12.X you shoud use <code>Day of week</code> and <code>time of day</code>.</p> <p></p> <p>LAB 06 - Get digit String</p> <p>Purpose:</p> <p>In addition to previous labs, If caller know the extensions, call is redirected the Auto Attendant. </p> <p>Answer:</p> <p>We should use <code>switch</code> and <code>get digit String</code> in this scenarios </p> <p></p> <p></p> <p>LAB 07 - CSQ Usage</p> <p>Purpose:</p> <p>Configure <code>CSQ</code> on uccx then set this <code>CSQ</code> on script.</p> <p>Answer:</p> <p></p> <p>LAB 08 Usage of Increment</p> <p>Purpose:</p> <p>If you want to do something exact times you can use <code>increment</code> for counting and <code>if</code> for conditional routing.</p> <p>Answer:</p> <p></p> <p>LAB 09 Position of Queue</p> <p>Purpose:</p> <p>Configure script and say caller that the <code>Position of the queue</code> with dynamically.</p> <p>Answer:</p> <p>Use <code>Get Reporting Statistic</code> for getting position, then use it in prompt.</p> <p></p> <p>LAB 10 Estimated Wait Time</p> <p>Puspose:</p> <p>In LAB 09 add <code>estimated wait time</code> to script. Caller lissten estimated wait time. Maybe he/she will wait maybe not. </p> <p>Answer:</p> <p></p> <p>PS: If there is no enough data for calculating estimated wait time, script output will -1. Thats mean not an error. </p>"},{"location":"collaboration/uccxd/uccxd/#database-integration","title":"Database Integration","text":"<p>UCCX can be <code>READ / WRITE</code> to external database. For this procedure, UCCX database subsystem should be runing that is under ccx engine.</p> <p></p> <p>and your license must be <code>Premium</code></p> <p></p> <p>You should check which database or which version is sutiple for your UCCX version. For example for uccx 12.5.1 compatibility documantation is UCCX 12.5 Compatibility</p> <p>In this document</p> <p></p> <p>In this course we use MS SQL. We need also <code>jbdc</code> driver for connection can be download this page. Use newer version and dowsload <code>jtds-x.x.x-dist</code> file. That is zip file extract it then use.</p> <p>add driver to uccx</p> <p> </p> <p>then add SQL server as a <code>database source</code></p> <p> </p> <p>we should see <code>Successful Test Connection</code> like below</p> <p></p> <p>## LAB - Database Integration</p> <p>Purpose:</p> <p>Set script on script editor. When customer input their customer number, script check customer number on database then return to script customer name surname, customer number and their support is gold or not. At the same time if customer has gold support, agents will deal this customer as soon as possible.</p> <p>Answer:</p> <p>first of all use <code>DB Read</code> with this configuration</p> <p></p> <p>Field Selection is the most impotant part of this</p> <p></p> <p>Next step is <code>DB Get</code>. In this stage we will pair the values</p> <p></p> <p>If <code>b_gold</code> is True, set <code>Priority</code> higher then default</p> <p></p> <p>and then close connection with <code>DB Release</code></p> <p></p> <p>At the same time. We will display this values to agent finesse screen with <code>Set Enterprise Call Info</code> like below.</p> <p></p>"},{"location":"collaboration/uccxd/uccxd/#finess-desktop","title":"Finess Desktop","text":"<p>Cisco Finesse is a web-based application and user interface framework developed by Cisco Systems. It is designed to provide a comprehensive <code>agent</code> and <code>supervisor</code> desktop for contact center environments. Finesse enables agents and supervisors to handle customer interactions across various communication channels, such as voice calls, email, web chat, and social media, all from a single interface.</p> <p>Key features of Cisco Finesse include</p> <p><code>Multi-channel support:</code> Finesse allows agents to manage customer interactions from different channels, ensuring a consistent experience across various communication mediums.</p> <p><code>Call control:</code> Agents can handle inbound and outbound voice calls using features like call transfer, hold, conference, and call recording.</p> <p><code>Integrated agent desktop:</code> Finesse provides a unified view of customer information, including their interaction history, allowing agents to deliver personalized and efficient service.</p> <p><code>Collaboration tools:</code> Finesse supports collaboration among agents and supervisors through features like chat, team messaging, and supervisor monitoring capabilities.</p> <p><code>Customization and integration:</code> Finesse can be customized and integrated with other applications to meet specific business needs. It provides APIs and development tools for building custom workflows and integrations.</p> <p><code>Reporting and analytics:</code> Finesse offers reporting and analytics capabilities to track contact center performance, monitor agent productivity, and gather insights for continuous improvement.</p> <p>Finesse Desktop URL : https://:8445 <p>PS : Agent phone must add to RmCm Application User controled device.</p> <p></p> <p>Finesse Administration</p> <p>Disable chat</p> <p><pre><code>          &lt;!--\n            &lt;headercolumn width=\"50px\"&gt;\n                &lt;component id=\"chat\"&gt;\n                    &lt;url&gt;/desktop/scripts/js/chat.component.js&lt;/url&gt;\n                &lt;/component&gt;\n            &lt;/headercolumn&gt;\n          --&gt;\n</code></pre> </p> <p>Add Title</p> <p>You can edit the title with changing this parameter:</p> <p><pre><code>&lt;config key=\"title\" value=\"Cisco Finesse\"/&gt;\n</code></pre> </p> <p>Add Logo</p> <p>For adding <code>LOGO</code> you need <code>3rd party gadget</code> credential. Firtly you should reset this user with below command</p> <p><pre><code>utils reset_3rdpartygadget_password\n</code></pre> after this, connect <code>UCCX</code> with this user over winSCP and upload <code>logo</code> to directory. (jpeg,png)</p> <p></p> <p>then, customize the XML file like below</p> <pre><code>&lt;config key=\"logo\" value=\"/3rdpartygadget/files/50logo.jpeg\"/&gt;\n</code></pre> <p>Workflow</p> <p>Firstly configure pop-up URL on <code>workflow</code> Finnesse Admin panel on UCCX. </p> <p></p> <p>then, determine the condition for pop-up</p> <p></p> <p>lastly add this flow to team</p> <p></p> <p>Finnesse Supervisor Screen</p> <p>Enable <code>advanced capabilities</code> on Finnesse Administrator screeen.</p> <pre><code>&lt;!--\n            The following gadget provides Supervisor with advanced capabilities. \n            Using this gadget, supervisors can manage Queues, Prompts, Calendars, and so on. \n            Before including this gadget in Desktop Layout, \n            ensure that the advanced capability is enabled in Unified CCX Administration.\n--&gt;\n            &lt;tab&gt;\n                &lt;id&gt;ASCGadget&lt;/id&gt;\n                &lt;icon&gt;admin&lt;/icon&gt;\n                &lt;label&gt;finesse.container.tabs.supervisor.advancedcapabilities&lt;/label&gt;\n                &lt;columns&gt;\n                    &lt;column&gt;\n                        &lt;gadgets&gt;\n                            &lt;gadget&gt;https://localhost:8445/ascgadget/gadgets/ascgadget.xml&lt;/gadget&gt;\n                        &lt;/gadgets&gt;\n                    &lt;/column&gt;\n                &lt;/columns&gt;\n            &lt;/tab&gt;\n</code></pre> <p>then give permission to <code>Supervisor</code> for manage prompt, application or calendar...</p> <p></p>"},{"location":"collaboration/uccxd/uccxd/#cuic-reporting","title":"CUIC (Reporting)","text":""},{"location":"collaboration/uccxd/uccxd/#troubleshoot-of-uccx","title":"Troubleshoot of UCCX","text":"<p>some <code>cli commands</code> which help to troubleshoot:</p> <pre><code>file dump install system-history.log\nshow network eth0 details\nshow tech network hosts\nutils diagnose test\nshow process load\n</code></pre>"},{"location":"devnet/docker4NE/","title":"Docker for Network Engineer","text":""},{"location":"devnet/python4NE/","title":"Python for Network Engineer","text":""},{"location":"devnet/python4NE/#programming-language","title":"Programming Language","text":"<p>Programming languages are used to write instructions that a computer can understand and execute. These languages provide a way for humans to communicate with computers, allowing the creation of software that performs a wide range of tasks. The use of programming languages is contrasted with machine language, which is the most fundamental level of instruction understood by a computer's hardware.</p>"},{"location":"devnet/python4NE/#why-we-use-programming-languages","title":"Why We Use Programming Languages","text":"<ol> <li> <p>Abstraction: Programming languages provide a higher level of abstraction than machine language. They allow programmers to write instructions in a more human-readable and understandable format, using words and syntax similar to human languages.</p> </li> <li> <p>Portability: Code written in a high-level programming language can often be run on different types of computers and operating systems with little or no modification. Machine language, however, is specific to a particular computer's architecture.</p> </li> <li> <p>Productivity and Efficiency: Writing code in a high-level language is typically much faster and more efficient. It also allows for more complex operations to be performed with less code.</p> </li> <li> <p>Error Reduction: High-level languages have syntax and semantic rules that help in reducing errors. Debugging tools and environments also make it easier to find and fix errors.</p> </li> <li> <p>Maintainability: Code in high-level languages is easier to understand, update, and maintain, especially in large projects with multiple developers.</p> </li> </ol>"},{"location":"devnet/python4NE/#machine-language","title":"Machine Language","text":"<ul> <li> <p>Direct Hardware Control: Machine language operates directly on the hardware, with no abstraction layer. It consists of binary code (0s and 1s) and is the only language a computer's CPU directly understands.</p> </li> <li> <p>Speed and Efficiency: Machine language is the fastest in terms of execution speed since it doesn\u2019t need to be translated or interpreted.</p> </li> <li> <p>Hardware-Specific: It's specific to the architecture of the CPU. A program written in machine language for one type of CPU won\u2019t work on a different CPU.</p> </li> </ul>"},{"location":"devnet/python4NE/#example-comparison","title":"Example Comparison","text":"<p>Let's consider a simple task: adding two numbers.</p> <p>In a High-Level Language (Python):</p> <pre><code>a = 5\nb = 10\nc = a + b\n\nprint(c)\n</code></pre> <p>In Machine Language:</p> <p>This would be a series of binary digits representing the instruction for addition specific to the CPU's instruction set architecture. It's not human-readable and varies from one CPU to another. But we can do same example in Assembly:</p> <pre><code>section .data\n\na db 5\nb db 10\nc db 0\n\nsection .text\nglobal _start\n\n_start:\n\n; Move values into registers\n\nmov al, [a]\n\nmov bl, [b]\n\n; Add values\n\nadd al, bl\n\n; Move result into c\n\nmov [c], al\n\n; Print result\n\nmov eax, 4\nmov ebx, 1\nmov ecx, c\nmov edx, 1\nint 0x80\n\n; Exit program\nmov eax, 1\nxor ebx, ebx\nint 0x80\n</code></pre>"},{"location":"devnet/python4NE/#conclusion","title":"Conclusion","text":"<p>Programming languages are essential for practical and efficient software development. They abstract away the complexities of the machine language, making it easier and more efficient to write, maintain, and run software across various systems. Machine language, while critical as the fundamental layer of computer operation, is impractical for direct use in software development due to its complexity and lack of portability.</p> <p>Installing Python on Windows is a straightforward process. Here's a step-by-step guide to installing Python on a Windows platform:</p>"},{"location":"devnet/python4NE/#python-installation","title":"Python &amp; installation","text":"<p>Python is an excellent language for network engineers due to its simplicity, readability, and vast library support for network-related tasks. Here\u2019s a breakdown of how Python can be leveraged from a network engineer's perspective and an introduction to programming logic.</p> <p>Automation:</p> <ul> <li>Automate repetitive tasks such as configuration changes, backups, and monitoring.</li> <li>Use libraries like <code>paramiko</code> for SSH connections, <code>netmiko</code> for simplified device communications, and <code>napalm</code> for multi-vendor network automation.</li> </ul> <p>Network Monitoring and Data Collection:</p> <ul> <li>Use SNMP with libraries like pysnmp to collect data from network devices.</li> <li>Use APIs provided by network devices for data collection and configuration management. Python\u2019s requests library is helpful for HTTP API interactions.</li> </ul> <p>Configuration Management:</p> <ul> <li>Automate configuration changes using libraries and tools like netmiko, NAPALM, or Ansible with Python scripts.</li> <li>Generate and push configurations to devices programmatically.</li> </ul> <p>Network Testing:</p> <ul> <li>Use libraries such as scapy for packet crafting and network protocol analysis.</li> <li>Automate testing of network setups and troubleshoot issues with scripts.</li> </ul> <p>Data Analysis:</p> <ul> <li>Collect logs and performance metrics, then analyze them using Python\u2019s data analysis libraries like pandas.</li> <li>Visualize network data using libraries like matplotlib or seaborn.</li> </ul> <p>Download Python</p> <ul> <li>Go to the official Python website at python.org.</li> <li>Hover over the \"Downloads\" menu, and you should see an option to download Python for Windows. It usually detects your OS and suggests the best version for your system.</li> <li>Click on the \"Download Python\" button.</li> </ul> <p>Run the Installer</p> <ul> <li>Once the installer is downloaded, run the executable file to start the installation.</li> <li>A dialog will appear. Important: Make sure to check the box that says \"Add Python x.x to PATH\" before you click \"Install Now.\" This will make it easier to run Python from the command line.</li> <li>Optionally, you can click on \"Customize installation\" if you want to select specific parts of Python to install, although the default installation is sufficient for most users.</li> </ul> <p>Wait for the Installation to Complete</p> <ul> <li>After clicking \"Install Now,\" the installer will set up Python on your system. This may take a few minutes.</li> <li>Once the installation is complete, you may see a screen with a checkbox for \"Disable path length limit.\" It's generally a good idea to enable this to avoid potential issues with the Windows path length limit.</li> </ul> <p>Verify the Installation</p> <ul> <li>To check that Python is installed, open the Command Prompt (you can search for 'cmd' in the Start menu).</li> <li>Type python --version or python -V and press Enter. You should see the Python version number that you installed.</li> <li>To check if pip (Python's package installer) is installed, type pip --version in the Command Prompt and press Enter.</li> </ul> <p>Update pip (Optional but Recommended)</p> <ul> <li>It's a good practice to ensure you have the latest version of pip. You can upgrade pip by typing the following command into your Command Prompt:</li> </ul> <pre><code>python -m pip install --upgrade pip\n</code></pre> <ul> <li>This command will download and install the latest version of pip.</li> </ul> <p>After these steps, you should have Python installed and ready to use on your Windows system. To use Python, you can start the IDLE (Python's Integrated Development and Learning Environment) from the Start menu, or you can write Python scripts in a text editor and run them from the Command Prompt using the <code>python</code> command.</p>"},{"location":"devnet/python4NE/#install-virtualenv","title":"Install virtualenv","text":"<p><code>virtualenv</code> is a tool to create isolated Python environments. This can be very useful when you are working on multiple projects that require different dependencies, versions of Python, etc. Here's how you can install virtualenv and set up a virtual environment on your Windows system:</p> <p>Open Command Prompt</p> <p>First, open your command prompt. You can do this by searching for 'cmd' in the Start menu.</p> <p>Ensure pip is Installed</p> <p>Since virtualenv is installed via pip, you need to ensure pip is installed on your system. Type the following command and hit Enter to check if pip is installed:</p> <pre><code>pip --version\n</code></pre> <p>If pip is installed, you'll see a version number. If it's not, you'll need to install it (though it should come with Python if you've installed Python from python.org).</p> <p>Install virtualenv</p> <p>Type the following command into your Command Prompt to install virtualenv:</p> <pre><code>pip install virtualenv\n</code></pre> <p>This command uses pip to download and install the latest version of virtualenv from the Python Package Index (PyPI).</p> <p>Create a Virtual Environment</p> <p>Once virtualenv is installed, you can create a virtual environment for your project. Navigate to your project directory, or where you'd like to store your environments, using the <code>cd</code> command. Then create a new virtual environment with the following command:</p> <pre><code>virtualenv myenv\n</code></pre> <p>Replace myenv with whatever you wish to name your environment. This will create a directory called myenv (or your chosen name) which will contain the Python executable files, and a copy of the pip library which you can use to install other packages.</p> <p>Activate the Virtual Environment</p> <p>To begin using the virtual environment, it needs to be activated:</p> <pre><code>myenv\\Scripts\\activate\n</code></pre> <p>Once activated, you will notice the command prompt's prompt will change and show the name of your virtual environment, indicating that the environment is active. For example:</p> <pre><code>(myenv) C:\\Users\\YourName\\YourProject&gt;\n</code></pre> <p>Deactivate the Virtual Environment</p> <p>When you're done working in the virtual environment for the session, you can deactivate it by simply running:</p> <pre><code>deactivate\n</code></pre> <p>This will revert your command prompt back to the default system settings. Now you have virtualenv installed and configured, and you can create isolated Python environments for different projects. Each environment can have its own set of packages and can be managed separately without affecting the global Python environment on your system.</p>"},{"location":"devnet/python4NE/#pip-usage","title":"Pip Usage","text":"<p>pip is the package installer for Python and is an essential tool for any developer, including network engineers. It allows you to install and manage additional libraries and dependencies that are not included in the standard Python library. These external libraries can greatly extend the functionality of Python, particularly for network automation and management tasks.</p> <p>Here's how a network engineer might use pip in their workflow:</p> <p>Installation of Network Libraries</p> <p>Network engineers can use pip to install libraries that provide functionality for automating network tasks. Some popular libraries include:</p> <ul> <li>Netmiko: A multi-vendor library to simplify Paramiko SSH connections to network devices.</li> <li>NAPALM (Network Automation and Programmability Abstraction Layer with Multivendor support): It allows for a unified way to interact with different network device operating systems using Python.</li> <li>PySNMP: Offers a set of tools for SNMP (Simple Network Management Protocol) operations within Python.</li> <li>Ansible: Although not exclusively a Python library, it's a powerful automation engine for which <code>pip</code> can be used to install various Ansible modules and plugins.</li> </ul>"},{"location":"devnet/python4NE/#command-line-usage","title":"Command-Line Usage","text":"<p>Here are some common <code>pip</code> commands:</p> <ul> <li>Installing a package: <code>pip install &lt;package-name&gt;</code></li> <li>Uninstalling a package: <code>pip uninstall &lt;package-name&gt;</code></li> <li>Listing installed packages: <code>pip list</code></li> <li>Showing package information: <code>pip show &lt;package-name&gt;</code></li> <li>Upgrading a package: <code>pip install --upgrade &lt;package-name&gt;</code></li> <li>Installing a specific version: <code>pip install &lt;package-name&gt;==&lt;version&gt;</code></li> <li>Installing packages using a requirements file: <code>pip install -r requirements.txt</code></li> </ul>"},{"location":"devnet/python4NE/#pip-freeze-usage","title":"PIP Freeze Usage","text":"<p>Output installed packages in requirements format. Packages are listed in a case-insensitive sorted order. You can share 'requirements.txt' file and it might be easily installed.</p> <pre><code>env1/bin/python -m pip freeze &gt; requirements.txt\nenv2/bin/python -m pip install -r requirements.txt\n</code></pre>"},{"location":"devnet/python4NE/#character-codding-standards","title":"Character Codding Standards","text":"<p>1. ASCII (American Standard Code for Information Interchange)</p> <p>Definition: A 7-bit character encoding standard used to represent text in computers.</p> <p>Character Range: </p> <ul> <li>0\u2013127 (7 bits).</li> <li>Includes control characters (0\u201331) and printable characters (32\u2013127), such as letters, digits, and basic symbols.</li> </ul> <p>Purpose: Designed for English text and basic communication.</p> <p>Example:</p> <ul> <li><code>A</code> = <code>65</code> (<code>01000001</code> in binary)</li> <li><code>a</code> = <code>97</code> (<code>01100001</code> in binary)</li> </ul> <p>2. Extended ASCII</p> <p>Definition: An 8-bit extension of ASCII, adding 128 extra characters (128\u2013255).</p> <p>Character Range: </p> <ul> <li>0\u2013255 (8 bits).</li> <li>Includes the original ASCII characters (0\u2013127) plus additional characters like accented letters, symbols, and graphical characters.</li> </ul> <p>Purpose: Provides support for more languages and symbols than ASCII.</p> <p>Variants: Different systems implement different Extended ASCII sets.</p> <ul> <li>Code Page 437 (IBM PCs).</li> <li>Windows-1252 (Microsoft).</li> </ul> <p>Example (Code Page 437):</p> <ul> <li><code>\u00c7</code> = <code>128</code></li> <li><code>\u00e9</code> = <code>130</code></li> </ul> <p>3. Unicode</p> <p>Definition: A universal character set that assigns a unique code point to every character across all languages and scripts. Character Range: Over 1.1 million possible code points, 21 bit, (<code>U+0000</code> to <code>U+10FFFF</code>). Purpose: Ensures consistent encoding, representation, and handling of text worldwide. Key Features:      - Backward-compatible with ASCII.</p> <p>Example:   - <code>A</code> = <code>U+0041</code>.</p> <p>4. UTF-8</p> <p>Definition: A variable-length encoding for Unicode.</p> <p>Key Features:</p> <ul> <li>Uses 1 to 4 bytes per character.</li> <li>ASCII characters (0\u2013127) use 1 byte.</li> <li>Efficient for languages using Latin scripts.</li> </ul> <p>Example:</p> <ul> <li><code>A</code> (<code>U+0041</code>) = <code>41</code> (1 byte)</li> </ul> <p>5. UTF-16</p> <p>Definition: A variable-length encoding for Unicode. Key Features:</p> <ul> <li>Uses 2 or 4 bytes per character.</li> <li>Characters in the Basic Multilingual Plane (BMP) use 2 bytes.</li> <li>Supplementary characters use 4 bytes.</li> </ul> <p>Example:</p> <ul> <li><code>A</code> (<code>U+0041</code>) = <code>0041</code> (2 bytes).</li> </ul> <p>6. UTF-32</p> <p>Definition: A fixed-length encoding for Unicode. Key Features:</p> <ul> <li>Uses 4 bytes per character.</li> <li>Simplifies character handling since each character is the same size.</li> </ul> <p>Example:</p> <ul> <li><code>A</code> (<code>U+0041</code>) = <code>00000041</code> (4 bytes)</li> </ul> <p>7. ISO 8859 (ISO/IEC 8859)</p> <p>Definition: A series of 8-bit character encodings standardized by ISO.</p> <p>Character Range: 0\u2013255 (8 bits).</p> <p>Purpose: Supports different languages and scripts, depending on the variant.</p> <p>Variants:</p> <ul> <li>ISO 8859-1 (Latin-1): Western European languages.</li> <li>ISO 8859-5: Cyrillic scripts.</li> </ul> <p>Example (ISO 8859-1):</p> <ul> <li><code>A</code> = <code>65</code></li> <li><code>\u00c7</code> = <code>199</code> (<code>C7</code> in hex)</li> </ul> <p>Summary of Differences</p> Encoding Bits/Bytes per Character Character Range Standardization Supports Unicode Variable or Fixed Length ASCII 7 bits (1 byte) 0\u2013127 Yes (ANSI Standard) No Fixed Extended ASCII 8 bits (1 byte) 0\u2013255 No (varies by system) No Fixed ISO 8859 8 bits (1 byte) 0\u2013255 Yes (ISO Standard) No Fixed UTF-8 1 to 4 bytes 0\u201310FFFF Yes (Unicode Standard) Yes Variable UTF-16 2 or 4 bytes 0\u201310FFFF Yes (Unicode Standard) Yes Variable UTF-32 4 bytes 0\u201310FFFF Yes (Unicode Standard) Yes Fixed"},{"location":"devnet/python4NE/#notations-in-python","title":"Notations in Python","text":"<p>In Python, \"notation\" generally refers to different conventions or styles used for naming variables, functions, classes, etc. These conventions help improve code readability and maintainability. Some common notations in Python include:</p> <p>Hungarian Notation : Prefixing variable names with a tag indicating their data type.</p> <ul> <li>Example: str_name, int_age, where str_ indicates a string type and int_ indicates an integer type.</li> </ul> <p>CamelCase : Words in the variable name are joined without spaces, and each word's initial letter, except the first word, is capitalized.</p> <ul> <li>Example: networkDeviceIpAddress, validateDeviceConfiguration</li> </ul> <p>snake_case : Words in the variable name are separated by underscores, and all letters are lowercase.</p> <ul> <li>Example: network_device_ip_address, validate_device_configuration</li> </ul> <p>PascalCase : Similar to CamelCase, but the first letter of each word, including the first word, is capitalized.</p> <ul> <li>Example: NetworkDeviceIPAddress, ValidateDeviceConfiguration</li> </ul> <p>kebab-case : Words in the variable name are separated by hyphens, and all letters are lowercase.</p> <ul> <li>Example: network-device-ip-address, validate-device-configuration</li> </ul> <p>These notations are used to make code more understandable and consistent. In Python, snake_case and CamelCase are the most commonly used conventions, while the others are less prevalent. Choosing the appropriate notation depends on the specific context and the conventions followed by the project or coding environment.</p> <p>In programming, especially in Python, giving meaningful and clear variable names is an essential skill that significantly enhances code readability, maintainability, and collaboration. As a network engineer and someone working in fields like Cisco VoIP technologies, DevNet, Python, Linux, and Git, you'll benefit greatly from mastering this skill. Let's dive into the art of giving variable names with examples relevant to networking and development.</p>"},{"location":"devnet/python4NE/#key-principles-for-naming-variables","title":"Key Principles for Naming Variables","text":"<p>Clarity and Descriptiveness:</p> <ul> <li>The name should clearly describe the variable's purpose or what it represents.</li> <li>Avoid abbreviations unless they are universally understood in your domain.</li> </ul> <p>Consistency:</p> <ul> <li>Stick to a consistent naming convention (e.g., snake_case for variables and functions, PascalCase for classes).</li> <li>Consistent naming conventions make your code predictable and easier to read.</li> </ul> <p>Avoiding Reserved Words:</p> <ul> <li>Do not use Python reserved words (e.g., class, def, return) as variable names.</li> </ul> <p>Meaningful Context:</p> <ul> <li>Provide context so that the variable's role in the code is immediately apparent.</li> <li>In networking, include protocol names, device types, or data types if relevant.</li> </ul> <p>Short but Comprehensive:</p> <ul> <li>Aim for a balance between brevity and descriptiveness.</li> <li>Short enough to be easily readable but comprehensive enough to be clear.</li> </ul>"},{"location":"devnet/python4NE/#examples-in-a-networking-context","title":"Examples in a Networking Context","text":"<pre><code>a = \"192.168.1.1\"\nb = \"192.168.1.2\"\n</code></pre> <pre><code>router_ip = \"192.168.1.1\"\nswitch_ip = \"192.168.1.2\"\n</code></pre> <p>In this example, router_ip and switch_ip clearly indicate that these variables hold the IP addresses of a router and a switch, respectively.</p> <p>Example 2 :</p> <pre><code>x = \"255.255.255.0\"\ny = \"GigabitEthernet0/1\"\n</code></pre> <pre><code>subnet_mask = \"255.255.255.0\"\ninterface_name = \"GigabitEthernet0/1\"\n</code></pre> <p>Here, subnet_mask and interface_name are clear and descriptive, making it obvious what each variable represents.</p> <p>Example 3 : </p> <pre><code>a = True\nb = False\n</code></pre> <pre><code>is_router_online = True\nis_switch_online = False\n</code></pre> <p>These names provide context, indicating that the variables represent the online status of a router and a switch.</p>"},{"location":"devnet/python4NE/#additional-tips","title":"Additional Tips","text":"<p>Use Singular and Plural Forms Appropriately:</p> <ul> <li>If a variable holds a single item, use a singular noun. If it holds multiple items (e.g., a list or a set), use a plural noun.</li> </ul> <pre><code>device = \"Router1\"\ndevices = [\"Router1\", \"Switch1\", \"Firewall1\"]\n</code></pre> <p>Avoid Magic Numbers:</p> <ul> <li>Use descriptive variable names instead of embedding numbers directly in your code.</li> </ul> <pre><code>DEFAULT_PORT = 22\nMAX_CONNECTIONS = 100\n</code></pre> <p>Camel Case vs. Snake Case:</p> <ul> <li>Use snake_case for variable names and function names in Python to follow PEP 8 guidelines.</li> </ul> <pre><code>current_user = \"admin\"\nconnect_to_device()\n</code></pre> <p>Prefixes and Suffixes:</p> <ul> <li>Use prefixes or suffixes to add context or scope to variable names.</li> </ul> <pre><code>config_file_path = \"/etc/network/config\"\nerror_message = \"Connection timed out\"\n</code></pre> <p>Example : </p> <p>Python Script for Network Configuration</p> <pre><code># Configuration for Router\nrouter_ip = \"192.168.1.1\"\nrouter_subnet_mask = \"255.255.255.0\"\nrouter_interface = \"GigabitEthernet0/1\"\n\n# Configuration for Switch\nswitch_ip = \"192.168.1.2\"\nswitch_subnet_mask = \"255.255.255.0\"\nswitch_interface = \"GigabitEthernet0/2\"\n\n# Check Device Status\nis_router_online = True\nis_switch_online = False\n\n# Print Configuration\nprint(f\"Router IP: {router_ip}, Interface: {router_interface}, Online: {is_router_online}\")\nprint(f\"Switch IP: {switch_ip}, Interface: {switch_interface}, Online: {is_switch_online}\")\n</code></pre> <p>In this example, variable names are clear and descriptive, making it easy to understand the configuration and status of the network devices.</p>"},{"location":"devnet/python4NE/#conclusion_1","title":"Conclusion","text":"<p>Choosing good variable names is an art that combines clarity, consistency, and contextual relevance. As a network engineer, applying these principles to your scripts and programs will make your code more understandable and easier to maintain. Always strive for names that are as descriptive as necessary to convey their purpose without being overly verbose.</p>"},{"location":"devnet/python4NE/#git-usage","title":"Git Usage","text":"<p>Ok now we started the writing code, how we store our codes, or share them to someone? let's dive into the world of Git!</p> <p>What is Git</p> <p>Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It's like a time machine for your code\u2014it keeps track of every change to every file in a project, so you can revert to older versions or collaborate with others without overwriting each other's work.</p> <p>Git Protocol</p> <p>In the context of Git, the \"protocol\" usually refers to the method by which Git repositories are accessed and data is transferred. There are a few different protocols you can use with Git:</p> <ol> <li> <p>HTTP/HTTPS: The same protocol used for web traffic, it's firewall-friendly and can be secured with SSL/TLS.</p> </li> <li> <p>SSH: Secure Shell protocol is a common method for secure logins to remote machines. With Git, it's used for securely transferring repository data.</p> </li> <li> <p>Git: This is a special daemon that comes with Git. It listens on a dedicated port (9418) and is a lightweight protocol for transferring data.</p> </li> </ol> <p>Each of these protocols has its own pros and cons regarding speed, security, and setup complexity.  </p> <p>Here's a small lab  for using the Git protocol on Windows, with a focus on practicing and repeating Git commands:</p> <p>Installing Git on Windows</p> <ol> <li>Download the latest version of Git from git-scm.com.</li> <li>Run the downloaded <code>.exe</code> file and follow the installation instructions.</li> </ol>"},{"location":"devnet/python4NE/#git-configuration","title":"Git Configuration","text":"<ol> <li>Open Git Bash (or use the Windows Command Prompt) and set up your Git user information:</li> </ol> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\ngit config --global user.name # check username\ngit config --global user.email # check email\ngit config --global --list # list config file\ngit config --global unset user.name # remove user.name\n</code></pre> <p>PS : git config file store in \".gitconfig\" </p>"},{"location":"devnet/python4NE/#creating-a-git-repository","title":"Creating a Git Repository","text":"<ol> <li>Create a new directory:</li> </ol> <pre><code>mkdir Python_Lab\ncd Python_Lab\n</code></pre> <ol> <li>Initialize a new Git repository in this directory:</li> </ol> <pre><code>git init\n</code></pre>"},{"location":"devnet/python4NE/#adding-files-and-committing-changes","title":"Adding Files and Committing Changes","text":"<ol> <li>Create a new file in the repository:</li> </ol> <pre><code>echo \"Hello Git!\" &gt; hello.txt\ntouch script_a.py, script_b.py, script_c.py\n</code></pre> <p>but all file untracked  <pre><code>git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        hello_git.txt\n        script_a.py,\n        script_b.py,\n        script_c.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\n</code></pre></p> <ol> <li>Add the file to the staging area:</li> </ol> <p><pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit add hello_git.txt\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   hello_git.txt\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        script_a.py,\n        script_b.py,\n        script_c.py\n</code></pre> Now hello_git.txt track but others not. For adding all file you can use \"git add .\"</p> <ol> <li>Commit the file to the repository:</li> </ol> <p><pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit add .\n\ngit commit -m \"first commit for files\"\n[master (root-commit) 0380918] first commit for files\n 4 files changed, 1 insertion(+)\n create mode 100644 hello_git.txt\n create mode 100644 script_a.py,\n create mode 100644 script_b.py,\n create mode 100644 script_c.py\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\n</code></pre> </p>"},{"location":"devnet/python4NE/#checking-status-and-viewing-history","title":"Checking Status and Viewing History","text":"<ol> <li>Check the status of the repository:</li> </ol> <pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit status\nOn branch master\nnothing to commit, working tree clean\n</code></pre> <ol> <li>View the commit history:</li> </ol> <pre><code>git log\ncommit 03809183db43306adbb38bb1e2d493993962bf20 (HEAD -&gt; master)\nAuthor: ilker mansur &lt;saintcisco68@gmail.com&gt;\nDate:   Fri May 24 19:02:13 2024 +0300\n\n    first commit for files\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\n</code></pre> <p>PS : If you want to add something in the same <code>commit</code> after commiting use <code>amend</code>. For example :</p> <p>do changing what you want then use <code>git add .</code> then <code>git commit --amend</code> . This command add your codes in <code>previous commit</code>. For changing only message not body, in this case use <code>git commit --amend -m \"Edited commit message\"</code> </p>"},{"location":"devnet/python4NE/#branching","title":"Branching","text":"<ol> <li>Create a new branch and switch to it:</li> </ol> <pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit branch br1\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit checkout br1\nSwitched to branch 'br1'\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (br1)\n</code></pre> <ol> <li>You can use both operation with one command  <pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (br1)\ngit switch -c br2 # or git checkout -b br2\nSwitched to a new branch 'br2'\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (br2)\n</code></pre></li> </ol> <p>Making Changes on a Branch</p> <ol> <li>Edit hello_git.txt and save some changes.</li> <li>Add the file to the staging area and commit:</li> </ol> <p><pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (br1)\ngit commit -m \"hello_git.txt file is edited\"\n[br1 3f7a8be] hello_git.txt file is edited\n 1 file changed, 1 insertion(+)\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (br1)\n</code></pre> There are two hello_git.txt file now</p> <pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (br1)\n\n\"hello git\"\nedited by ilker\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (br1)\ngit switch master\nSwitched to branch 'master'\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\n\n\"hello git\"\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\n</code></pre>"},{"location":"devnet/python4NE/#merging-changes","title":"Merging Changes","text":"<ol> <li>Switch back to the master branch and merge:</li> </ol> <p><pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit merge br1\nUpdating 0380918..3f7a8be\nFast-forward\n hello_git.txt | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre> git log give us info about commit</p> <p><pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit log\ncommit 3f7a8bef105c75be870d8ff50274172877559db8 (HEAD -&gt; master, br1)\nAuthor: ilker mansur &lt;saintcisco68@gmail.com&gt;\nDate:   Fri May 24 19:13:43 2024 +0300\n\n    hello_git.txt file is edited\n</code></pre> for more info about merging process</p> <pre><code>git show 3f7a8bef105c75be870d8ff50274172877559db8\ncommit 3f7a8bef105c75be870d8ff50274172877559db8 (HEAD -&gt; master, br1)\nAuthor: ilker mansur &lt;saintcisco68@gmail.com&gt;\nDate:   Fri May 24 19:13:43 2024 +0300\n\n    hello_git.txt file is edited\n\ndiff --git a/hello_git.txt b/hello_git.txt\nindex 0bbefe6..1774627 100644\n--- a/hello_git.txt\n+++ b/hello_git.txt\n@@ -1 +1,2 @@\n \"hello git\"\n+edited by ilker\n</code></pre>"},{"location":"devnet/python4NE/#restore-mechanism","title":"Restore Mechanism","text":"<p>In master branch, i edited hello_git.txt file, save it, but do not add git bye git add hello_git.txt command.</p> <p><pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit status\nOn branch master\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   hello_git.txt\n\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit restore hello_git.txt\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   hello_git.txt\n</code></pre> I restored changes bye using \"git restore hello_git.txt\"</p> <p>Again \u0131 did some changes but this time I add to git with \"git add hello_git.txt\" command.  <pre><code>C:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit add hello_git.txt\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   hello_git.txt\n\n\nC:\\Users\\workstation01\\Desktop\\scripts\\git_folder (master)\ngit restore --stage hello_git.txt\ngit restore hello_git.txt\n</code></pre></p>"},{"location":"devnet/python4NE/#manage-commit","title":"Manage Commit","text":"<p><pre><code>git log\ncommit ae84834afb14b6044c09de602a5cbc88ade21a5f (HEAD -&gt; master)\nAuthor: ilker mansur &lt;saintcisco68@gmail.com&gt;\nDate:   Fri May 24 20:23:04 2024 +0300\n\n    this is second commit\n\ncommit c6507bdcb74ab8983b0936413a404ee5928debb3\nAuthor: ilker mansur &lt;saintcisco68@gmail.com&gt;\nDate:   Fri May 24 20:22:00 2024 +0300\n\n    this is first commit\n\nC:\\Users\\workstation01\\Desktop\\scripts\\hello_git (master)\ngit checkout c6507bdcb74ab8983b0936413a404ee5928debb3\n\n=== omitted output ===\n\n\n\nOr undo this operation with:\n\n  git switch -\n</code></pre> if you want to turm other commit temporary you can should use \"git checkout commit SHA\". \u0131n this stage </p> <pre><code>git switch -c &lt;new-branch-name&gt; # continue on new branch\ngit switch -                    # turn from temporary stage\n</code></pre> <pre><code>git reset --hard c6507bdcb74ab8983b0936413a404ee5928debb3\nHEAD is now at c6507bd this is first commit\n\nC:\\Users\\workstation01\\Desktop\\scripts\\hello_git (master)\n\n\"this is first  line\"\n</code></pre>"},{"location":"devnet/python4NE/#pushing-to-a-remote-repository-like-github","title":"Pushing to a Remote Repository (like GitHub)","text":"<ol> <li>Create a repository on GitHub (or another remote Git service).</li> <li> <p>Add the remote repository (replace <code>YourUsername</code> and <code>YourRepo</code> with your GitHub username and the new repository name): <pre><code>git remote add origin https://github.com/YourUsername/YourRepo.git\n</code></pre></p> </li> <li> <p>Push the changes to the remote repository:</p> </li> </ol> <p><pre><code>git push -u origin master \n</code></pre> PS : for authentication there are two option :</p> <ol> <li>Github username / password</li> <li> <p>Use generated token :</p> <p>Github profile / Settings / Tokens</p> </li> </ol>"},{"location":"devnet/python4NE/#cloning-a-remote-repository","title":"Cloning a Remote Repository","text":"<ol> <li>Clone a remote repository to your local machine (replace the URL with the actual repository URL):</li> </ol> <pre><code>git clone https://github.com/Username/Repo.git\n</code></pre> <p>Fetching and Pulling from Remote</p> <ol> <li>Fetch changes from the remote repository without merging: <pre><code>git fetch origin\n</code></pre></li> <li>Pull changes and merge them into the current branch: <pre><code>git pull origin master\n</code></pre></li> </ol> <p>PS : This guide covers the basics of starting with Git on Windows, including installation, configuration, and common commands for managing files within a repository and syncing with remote repositories. Remember to practice these commands to become more comfortable with Git.</p>"},{"location":"devnet/python4NE/#data-format","title":"Data Format","text":"<p>A data format is a structured way of organizing and storing information so it can be easily accessed, interpreted, and processed by software.</p>"},{"location":"devnet/python4NE/#json","title":"Json","text":"<pre><code>{\n    \"devices\" : [\n    {\n    \"name\" : \"router1\",\n    \"ip\" : \"10.0.0.1\"\n    },\n    {\n    \"name\" : \"router2\",\n    \"ip\" : \"10.0.0.2\"\n    }\n    ]\n}\n</code></pre>"},{"location":"devnet/python4NE/#yaml","title":"yaml","text":"<pre><code>devices :\n    - name: router1\n      ip: 10.0.0.1\n    - name: router2\n      ip: 10.0.0.2\n</code></pre>"},{"location":"devnet/python4NE/#xml-extensible-markup-language","title":"xml (extensible markup language)","text":"<p>There is a little bit difference in <code>XML</code>.</p> <ul> <li>It categorizes data where as others, but xml is also a markup language </li> <li>Everything is an element in XML.</li> <li>Elements consist of three part:<ul> <li>tag</li> <li>text</li> <li>attribution</li> </ul> </li> </ul> <p>For Example :</p> <p>python for network engineer </p> <p>PS : Attributions must be in oppening tag</p> <p>ProLog Line</p> <p>Prolog is in begining of the xml doc. It describe xml doc. It is not necessary for basic doc. Default encoding is <code>UTF-8</code> or <code>UTF-16</code>. Not using <code>proLog</code> could be a problem for other encoding format.</p> <p><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</code></p> <p>Self-Closed Element</p> <p>Easy to use for empty element</p> <p><code>&lt;img src=\"logo.png\" /&gt;</code></p> <p>Example XML File</p> <pre><code>&lt;devices&gt;\n    &lt;device&gt;\n        &lt;name&gt;router1&lt;/name&gt;\n        &lt;ip&gt;10.0.0.1&lt;/ip&gt;\n    &lt;/device&gt;\n    &lt;device&gt;\n        &lt;name&gt;router2&lt;/name&gt;\n        &lt;ip&gt;10.0.0.2&lt;/ip&gt;\n    &lt;/device&gt;\n&lt;/devices&gt;\n</code></pre>"},{"location":"devnet/python4NE/#data-types-in-python","title":"Data Types in PYTHON","text":"<p>Python data types with examples and explanations tailored to a network engineer working on network device automation. Python's data types are foundational for writing scripts that interact with network devices, process data, and automate tasks. Here are the main data types:</p>"},{"location":"devnet/python4NE/#1-integers-int","title":"1. Integers (<code>int</code>)","text":"<p>Description: Represents whole numbers without a fractional part.</p> <p>Example Use Case: When dealing with network configurations, you might need to specify an interface number or set a timer interval in seconds.</p> <pre><code>interface_number = 1\ninterval = 30  # seconds\n\nprint(f\"Configuring interface GigabitEthernet0/{interface_number}\")\nprint(f\"Setting interval to {interval} seconds\")\n</code></pre> <p>Sure, let's dive into some common methods and operations associated with integers in Python and how they can be used in network automation contexts. While integers in Python don't have methods in the same way objects in other languages do, there are several built-in functions and operations that are frequently used with integers.</p>"},{"location":"devnet/python4NE/#common-integer-operations","title":"Common Integer Operations","text":"<ol> <li>Basic Arithmetic Operations</li> <li>Comparison Operations</li> <li>Binary Operations</li> <li>Conversion to Other Types</li> </ol>"},{"location":"devnet/python4NE/#1-basic-arithmetic-operations","title":"1. Basic Arithmetic Operations","text":"<p>Description: Operations like addition, subtraction, multiplication, and division are fundamental for manipulating integer values.</p> <p>Example Use Case: Calculating the number of available IP addresses in a subnet or the total bandwidth required.</p> <pre><code># Calculate the number of IP addresses in a /24 subnet\nsubnet_size = 256  # 2^8\nreserved_addresses = 2  # Network and Broadcast addresses\nusable_addresses = subnet_size - reserved_addresses\n\nprint(f\"Usable IP addresses in a /24 subnet: {usable_addresses}\")\n\n# Calculate total bandwidth required for a link\nlink_speed_mbps = 100  # Megabits per second\nnum_links = 4\ntotal_bandwidth = link_speed_mbps * num_links\n\nprint(f\"Total bandwidth: {total_bandwidth} Mbps\")\n</code></pre>"},{"location":"devnet/python4NE/#2-comparison-operations","title":"2. Comparison Operations","text":"<p>Description: Used to compare two integer values.</p> <p>Example Use Case: Determining if the current load on a device exceeds a threshold.</p> <pre><code>cpu_load = 85  # in percentage\nthreshold = 80\n\nif cpu_load &gt; threshold:\n    print(\"CPU load exceeds the threshold!\")\nelse:\n    print(\"CPU load is within acceptable limits.\")\n</code></pre>"},{"location":"devnet/python4NE/#3-binary-operations","title":"3. Binary Operations","text":"<p>Description: Binary form is commonly use for bit operation of ip address</p> <p>Example Use Case:</p> <pre><code># Example of a binary  operation\nbinary_val = 0b10101010  \nprint (binary_val) # 170\n\nfirst_octet = 192\nbin_first_octet = bin(first_octet)[2:] # 11000000\n# or\nbin_first_octet = format (first_octet,\"b\")\nsecond_octet = 168\nthird_octet= 1\nfourth_octet = 1  \n\nprint(first_octet,second_octet,third_octet,fourth_octet,sep=\".\") # 192.168.1.1\n</code></pre>"},{"location":"devnet/python4NE/#4-conversion-to-other-types","title":"4. Conversion to Other Types","text":"<p>Description: Converting integers to other data types, such as strings or binary representations.</p> <p>Example Use Case: Converting an integer to a string for generating configuration commands.</p> <pre><code>interface_number = 3\n\n# Converting integer to string\ninterface_name = \"GigabitEthernet0/\" + str(interface_number)\n\nprint(f\"Configuring interface: {interface_name}\")\n\n# Converting integer to binary representation\nip_octet = 192\nbinary_representation = bin(ip_octet)\n\nprint(f\"Binary representation of {ip_octet}: {binary_representation}\")\n</code></pre>"},{"location":"devnet/python4NE/#2-floating-point-numbers-float","title":"2. Floating Point Numbers (<code>float</code>)","text":"<p>Description: Represents numbers with a decimal point.</p> <p>Example Use Case: Useful for precision values like signal strength or bandwidth utilization percentages.</p> <pre><code>cpu_utilization = 75.5  # percentage\n\nprint(f\"CPU Utilization is {cpu_utilization}%\")\n</code></pre>"},{"location":"devnet/python4NE/#3-strings-str","title":"3. Strings (<code>str</code>)","text":"<p>Description: Represents sequences of characters, used for text.</p> <p>Example Use Case: Essential for handling IP addresses, device names, and configuration commands.</p> <pre><code>device_name = \"Router1\"\nip_address = \"192.168.1.1\"\n\n# f-string or format() usage\n\nprint(f\"Connecting to device: {device_name} with IP: {ip_address}\")\nprint (\"Connecting to device: {} with IP: {}\".format(device_name,ip_address))\nprint (\"Connecting to device: {0} with IP: {1}\".format(device_name,ip_address))\n</code></pre> <p>Sure, let's explore common methods associated with strings in Python and how they can be used in network automation contexts. Strings are particularly important in network automation for handling commands, device names, IP addresses, and more.</p>"},{"location":"devnet/python4NE/#common-string-methods","title":"Common String Methods","text":"<ol> <li><code>str.upper()</code> and <code>str.lower()</code></li> <li><code>str.strip()</code></li> <li><code>str.replace()</code></li> <li><code>str.split()</code></li> <li><code>str.join()</code></li> <li><code>str.find()</code></li> <li><code>str.format()</code></li> <li><code>str.startswith()</code> and <code>str.endswith()</code></li> </ol>"},{"location":"devnet/python4NE/#1-strupper-and-strlower","title":"1. <code>str.upper()</code> and <code>str.lower()</code>","text":"<p>Description: Convert a string to uppercase or lowercase.</p> <p>Example Use Case: Standardizing device names or commands.</p> <pre><code>device_name = \"Router1\"\ncommand = \"show version\"\n\nprint(device_name.upper())  # Output: ROUTER1\nprint(command.lower())  # Output: show version\n</code></pre>"},{"location":"devnet/python4NE/#2-strstrip","title":"2. <code>str.strip()</code>","text":"<p>Description: Remove leading and trailing whitespace.</p> <p>Example Use Case: Cleaning up user input or data retrieved from devices.</p> <pre><code>raw_input = \" show running-config !\"\n\ncleaned_input1 = raw_input.strip()\ncleaned_input2 = raw_input.strip(\"!\")\n\nprint (cleaned_input1) # Output: \"show running-config !\"\nprint (cleaned_input2) # Output:\" show running-config\"\n</code></pre>"},{"location":"devnet/python4NE/#3-strreplace","title":"3. <code>str.replace()</code>","text":"<p>Description: Replace occurrences of a substring with another substring.</p> <p>Example Use Case: Modifying parts of a configuration command or template.</p> <pre><code>template = \"interface GigabitEthernet0/X\"\nconfigured_interface = template.replace(\"X\", \"1\")\n\nprint(configured_interface)  # Output: interface GigabitEthernet0/1\n</code></pre>"},{"location":"devnet/python4NE/#4-strsplit","title":"4. <code>str.split()</code>","text":"<p>Description: Split a string into a list based on a delimiter.</p> <p>Example Use Case: Parsing command output or configurations.</p> <pre><code>ip_addresses = \"192.168.1.1,192.168.1.2,192.168.1.3\"\nip_list = ip_addresses.split(\",\")\nprint (ip_list) # ['192.168.1.1', '192.168.1.2', '192.168.1.3']\n\nfor ip in ip_list:\n    print(f\"Pinging {ip}\")\n# Output:\n# Pinging 192.168.1.1\n# Pinging 192.168.1.2\n# Pinging 192.168.1.3\n</code></pre>"},{"location":"devnet/python4NE/#5-strjoin","title":"5. <code>str.join()</code>","text":"<p>Description: Join a <code>list</code> of strings into a single string with a specified delimiter.</p> <p>Example Use Case: Creating a single command from multiple parts.</p> <pre><code>commands = [\"configure terminal\", \"interface GigabitEthernet 1/1\",\n            \"ip address 10.0.0.1 255.255.255.0\"]\n\ncommands_set = \"\\n\".join(commands) # join list items with enter\nprint (type(commands_set))         # Output: &lt;class 'str'&gt;\nprint (commands_set)               # &gt; configure terminal\n                                   # &gt; interface GigabitEthernet 1/1\n                                   # &gt; ip address 10.0.0.1 255.255.255.0  \n</code></pre>"},{"location":"devnet/python4NE/#6-strfind","title":"6. <code>str.find()</code>","text":"<p>Description: Find the first occurrence of a substring and return its index, or <code>-1</code> if not found.</p> <p>Example Use Case: Checking if a certain keyword or IP address exists in command output.</p> <pre><code>output = \"GigabitEthernet0/0 is up\"\n\nkeyword = \"up\"\nkeyword2 = \"down\"\n\nprint (output.find(keyword))   # Output 22 (index of `keyword`)\nprint (output.find(keyword2))  # Output -1 (not exist `keyword2`)\n\nif output.find(keyword) != -1: # != means not\n    print (\"interface is up\")  # interface is up\nelse:\n    print (\"interface is down\")\n</code></pre>"},{"location":"devnet/python4NE/#7-strformat","title":"7. <code>str.format()</code>","text":"<p>Description: Format a string using placeholders.</p> <p>Example Use Case: Creating dynamic configuration commands or messages.</p> <pre><code>hostname = \"Router1\"\nip_address = \"192.168.1.1\"\n\nmessage = \"Device {hostname} has IP {ip_address}\".format(hostname=hostname, ip_address=ip_address)\nprint(message)\n# Output: Device Router1 has IP 192.168.1.1\n</code></pre>"},{"location":"devnet/python4NE/#8-strstartswith-and-strendswith","title":"8. <code>str.startswith()</code> and <code>str.endswith()</code>","text":"<p>Description: Check if a string starts or ends with a specific substring.</p> <p>Example Use Case: Filtering commands or device names based on patterns.</p> <pre><code>interface = \"GigabitEthernet0/0\"\nif interface.startswith(\"GigabitEthernet\"):\n    print(\"Configuring a GigabitEthernet interface\")\n# Output: Configuring a GigabitEthernet interface\n</code></pre>"},{"location":"devnet/python4NE/#4-booleans-bool","title":"4. Booleans (<code>bool</code>)","text":"<p>Description: Represents <code>True</code> or <code>False</code> values.</p> <p>Example Use Case: Often used in control flow to determine if a condition is met, such as checking if a device is reachable.</p> <pre><code>device_reachable = True\n\nif device_reachable:\n    print(\"Device is reachable\")\nelse:\n    print(\"Device is not reachable\")\n</code></pre>"},{"location":"devnet/python4NE/#5-lists-list","title":"5. Lists (<code>list</code>)","text":"<p>Description: Ordered collection of items, which can be of mixed types.</p> <p>Example Use Case: Useful for storing lists of IP addresses, interface names, or configuration commands.</p> <pre><code>ip_addresses = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"]\ncommands = [\"show ip interface brief\", \"show version\", \"show running-config\"]\n\nfor ip in ip_addresses:\n    print(f\"Pinging {ip}\")\n\nfor command in commands:\n    print(f\"Executing command: {command}\")\n</code></pre> <p>Lists are a fundamental data type in Python that allow you to store and manipulate collections of items. In network automation, lists are particularly useful for handling multiple devices, commands, IP addresses, and more. Let's explore some common list methods and operations with examples relevant to network automation.</p>"},{"location":"devnet/python4NE/#common-list-methods","title":"Common List Methods","text":"<ol> <li><code>append()</code></li> <li><code>extend()</code></li> <li><code>insert()</code></li> <li><code>remove()</code></li> <li><code>pop()</code></li> <li><code>index()</code></li> <li><code>count()</code></li> <li><code>sort()</code></li> <li><code>reverse()</code></li> <li><code>clear()</code></li> </ol>"},{"location":"devnet/python4NE/#1-append","title":"1. <code>append()</code>","text":"<p>Description: Adds an element to the end of the list.</p> <p>Example Use Case: Adding new devices to a list of devices to be configured.</p> <pre><code>devices = [\"Router1\", \"Switch1\"]\nnew_device = \"Router2\"\n\ndevices.append(new_device)\nprint(devices)  # Output: ['Router1', 'Switch1', 'Router2']\n</code></pre>"},{"location":"devnet/python4NE/#2-extend","title":"2. <code>extend()</code>","text":"<p>Description: Adds all elements from another list to the end of the current list.</p> <p>Example Use Case: Merging lists of commands or IP addresses.</p> <pre><code>base_commands = [\"show ip interface brief\", \"show version\"]\nadditional_commands = [\"show running-config\", \"show interfaces\"]\n\nbase_commands.extend(additional_commands)\nprint(base_commands)\n# Output: ['show ip interface brief', 'show version', 'show running-config', 'show interfaces']\n</code></pre>"},{"location":"devnet/python4NE/#3-insert","title":"3. <code>insert()</code>","text":"<p>Description: Inserts an element at a specified position in the list.</p> <p>Example Use Case: Inserting a specific command at the beginning of a command list.</p> <pre><code>commands = [\"show version\", \"show running-config\"]\npriority_command = \"show ip interface brief\"\n\ncommands.insert(0, priority_command)\nprint(commands)\n# Output: ['show ip interface brief', 'show version', 'show running-config']\n</code></pre>"},{"location":"devnet/python4NE/#4-remove","title":"4. <code>remove()</code>","text":"<p>Description: Removes the first occurrence of a specified element from the list.</p> <p>Example Use Case: Removing a device from a list after it has been configured.</p> <pre><code>devices = [\"Router1\", \"Switch1\", \"Router2\"]\nconfigured_device = \"Switch1\"\n\ndevices.remove(configured_device)\nprint(devices)  # Output: ['Router1', 'Router2']\n</code></pre>"},{"location":"devnet/python4NE/#5-pop","title":"5. <code>pop()</code>","text":"<p>Description: Removes and returns the element at a specified position. If no index is specified, it removes and returns the last item.</p> <p>Example Use Case: Fetching and removing the next command to be executed.</p> <pre><code>commands = [\"show version\", \"show running-config\", \"show interfaces\"]\nnext_command = commands.pop(0)  # Remove and return the first command\n\nprint(next_command)  # Output: show version\nprint(commands)  # Output: ['show running-config', 'show interfaces']\n</code></pre>"},{"location":"devnet/python4NE/#6-index","title":"6. <code>index()</code>","text":"<p>Description: Returns the index of the first occurrence of a specified element.</p> <p>Example Use Case: Finding the position of a specific device in a list.</p> <pre><code>devices = [\"Router1\", \"Switch1\", \"Router2\"]\ndevice_to_find = \"Switch1\"\n\nindex = devices.index(device_to_find)\nprint(index)  # Output: 1\n</code></pre>"},{"location":"devnet/python4NE/#7-count","title":"7. <code>count()</code>","text":"<p>Description: Returns the number of occurrences of a specified element.</p> <p>Example Use Case: Counting how many times a specific command appears in a list.</p> <pre><code>commands = [\"show version\", \"show running-config\", \"show version\"]\ncommand_to_count = \"show version\"\n\ncount = commands.count(command_to_count)\nprint(count)  # Output: 2\n</code></pre>"},{"location":"devnet/python4NE/#8-sort","title":"8. <code>sort()</code>","text":"<p>Description: Sorts the list in ascending order by default. Can be customized with a key and reverse flag.</p> <p>Example Use Case: Sorting a list of IP addresses or device names.</p> <pre><code>devices = [\"Router3\", \"Router1\", \"Router2\"]\ndevices.sort()\n\nprint(devices)  # Output: ['Router1', 'Router2', 'Router3']\n</code></pre>"},{"location":"devnet/python4NE/#9-reverse","title":"9. <code>reverse()</code>","text":"<p>Description: Reverses the elements of the list in place.</p> <p>Example Use Case: Reversing the order of commands to execute them in the reverse order.</p> <pre><code>commands = [\"show version\", \"show running-config\", \"show interfaces\"]\ncommands.reverse()\n\nprint(commands)  # Output: ['show interfaces', 'show running-config', 'show version']\n</code></pre>"},{"location":"devnet/python4NE/#10-clear","title":"10. <code>clear()</code>","text":"<p>Description: Removes all elements from the list.</p> <p>Example Use Case: Clearing a list of commands after they have been executed.</p> <pre><code>commands = [\"show version\", \"show running-config\", \"show interfaces\"]\ncommands.clear()\n\nprint(commands)  # Output: []\n</code></pre>"},{"location":"devnet/python4NE/#6-tuples-tuple","title":"6. Tuples (<code>tuple</code>)","text":"<p>Description: Similar to lists but immutable (cannot be changed after creation).</p> <p>Example Use Case: Ideal for storing fixed collections of data, such as interface tuples (interface name, status).</p> <pre><code>interfaces = [(\"GigabitEthernet0/0\", \"up\"), (\"GigabitEthernet0/1\", \"down\")]\n\nfor interface in interfaces:\n    print(f\"Interface {interface[0]} is {interface[1]}\")\n</code></pre> <p>Tuples in Python are similar to lists but are immutable, meaning once they are created, their elements cannot be changed. Tuples are often used to store related pieces of data together, making them useful for situations where a group of values needs to be handled as a single entity. Let's explore some common methods and operations associated with tuples, with examples relevant to network automation.</p>"},{"location":"devnet/python4NE/#common-tuple-operations","title":"Common Tuple Operations","text":"<ol> <li>Accessing Elements</li> <li>Unpacking Tuples</li> <li>Tuple Concatenation</li> <li>Tuple Methods: <code>count()</code> and <code>index()</code></li> <li>Checking Membership</li> <li>Length of a Tuple</li> </ol>"},{"location":"devnet/python4NE/#1-accessing-elements","title":"1. Accessing Elements","text":"<ul> <li>Access elements in a tuple using indexing.</li> </ul> <p>Example Use Case: Storing and accessing network device details like name, IP address, and status.</p> <pre><code>device_info = (\"Router1\", \"192.168.1.1\", \"up\")\n\ndevice_name = device_info[0]\nip_address = device_info[1]\nstatus = device_info[2]\n\nprint(f\"Device: {device_name}, IP: {ip_address}, Status: {status}\")\n# Output: Device: Router1, IP: 192.168.1.1, Status: up\n</code></pre>"},{"location":"devnet/python4NE/#2-unpacking-tuples","title":"2. Unpacking Tuples","text":"<ul> <li>Assign tuple elements to individual variables in a single step.</li> </ul> <p>Example Use Case: Easily extracting multiple related values from a tuple.</p> <pre><code>device_info = (\"Router1\", \"192.168.1.1\", \"up\")\n\ndevice_name, ip_address, status = device_info\n\nprint(f\"Device: {device_name}, IP: {ip_address}, Status: {status}\")\n# Output: Device: Router1, IP: 192.168.1.1, Status: up\n</code></pre>"},{"location":"devnet/python4NE/#3-tuple-concatenation","title":"3. Tuple Concatenation","text":"<ul> <li>Combine two or more tuples to create a new tuple.</li> </ul> <p>Example Use Case: Merging network configuration data from different sources.</p> <pre><code>basic_info = (\"Router1\", \"192.168.1.1\")\nstatus_info = (\"up\", \"GigabitEthernet0/0\")\n\nfull_info = basic_info + status_info\n\nprint(full_info)\n# Output: ('Router1', '192.168.1.1', 'up', 'GigabitEthernet0/0')\n</code></pre>"},{"location":"devnet/python4NE/#4-tuple-methods-count-and-index","title":"4. Tuple Methods: <code>count()</code> and <code>index()</code>","text":"<ul> <li><code>count()</code> returns the number of times a specified value appears in a tuple, and <code>index()</code> returns the index of the first occurrence of a specified value.</li> </ul> <p>Example Use Case: Counting occurrences of a status or finding the position of a specific interface.</p> <pre><code>statuses = (\"up\", \"down\", \"up\", \"up\", \"down\")\n\nup_count = statuses.count(\"up\")\nfirst_down_index = statuses.index(\"down\")\n\nprint(f\"'up' count: {up_count}\")\nprint(f\"First 'down' index: {first_down_index}\")\n# Output:\n# 'up' count: 3\n# First 'down' index: 1\n</code></pre>"},{"location":"devnet/python4NE/#5-checking-membership","title":"5. Checking Membership","text":"<p>Use the <code>in</code> keyword to check if an element exists in a tuple.</p> <p>Example Use Case: Verifying if a specific IP address is part of a tuple.</p> <pre><code>ip_addresses = (\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\")\n\nip_to_check = \"192.168.1.2\"\n\nif ip_to_check in ip_addresses:\n    print(f\"IP address {ip_to_check} is in the list.\")\nelse:\n    print(f\"IP address {ip_to_check} is not in the list.\")\n# Output: IP address 192.168.1.2 is in the list.\n</code></pre>"},{"location":"devnet/python4NE/#6-length-of-a-tuple","title":"6. Length of a Tuple","text":"<ul> <li>Use the <code>len()</code> function to get the number of elements in a tuple.</li> </ul> <p>Example Use Case: Determining the number of interfaces configured on a device.</p> <pre><code>interfaces = (\"GigabitEthernet0/0\", \"GigabitEthernet0/1\", \"GigabitEthernet0/2\")\n\nnum_interfaces = len(interfaces)\n\nprint(f\"Number of interfaces: {num_interfaces}\")\n# Output: Number of interfaces: 3\n</code></pre>"},{"location":"devnet/python4NE/#7-dictionaries-dict","title":"7. Dictionaries (<code>dict</code>)","text":"<ul> <li>Unordered collection of key-value pairs, useful for storing related data.</li> </ul> <p>Example Use Case: Perfect for mapping device configurations or storing device information.</p> <pre><code>device_info = {\n    \"hostname\": \"Router1\",\n    \"ip_address\": \"192.168.1.1\",\n    \"model\": \"ISR4451-X\",\n    \"interfaces\": [\"GigabitEthernet0/0\", \"GigabitEthernet0/1\"]\n}\n\nprint(f\"Device {device_info['hostname']} has IP {device_info['ip_address']}\")\n</code></pre> <p>Dictionaries in Python are a collection of key-value pairs, making them ideal for representing structured data such as device configurations, IP addresses, and other network-related information. Let's explore some common dictionary methods and operations with examples relevant to network automation.</p>"},{"location":"devnet/python4NE/#common-dictionary-methods","title":"Common Dictionary Methods","text":"<ol> <li><code>dict.get()</code></li> <li><code>dict.keys()</code></li> <li><code>dict.values()</code></li> <li><code>dict.items()</code></li> <li><code>dict.update()</code></li> <li><code>dict.pop()</code></li> <li><code>dict.popitem()</code></li> <li><code>dict.clear()</code></li> </ol>"},{"location":"devnet/python4NE/#1-dictget","title":"1. <code>dict.get()</code>","text":"<ul> <li>Returns the value for a specified key if the key is in the dictionary. If the key is not found, it returns a default value (None if no default is provided).</li> </ul> <p>Example Use Case: Retrieving configuration details for a specific device.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n    \"Switch1\": {\"IP\": \"192.168.1.2\", \"Status\": \"down\"},\n}\n\nrouter1_config = device_configs.get(\"Router1\")\nrouter2_config = device_configs.get(\"Router2\", \"Not found\")\n\nprint(router1_config)  # Output: {'IP': '192.168.1.1', 'Status': 'up'}\nprint(router2_config)  # Output: Not found\n</code></pre>"},{"location":"devnet/python4NE/#2-dictkeys","title":"2. <code>dict.keys()</code>","text":"<ul> <li>Returns a view object that displays a list of all the keys in the dictionary.</li> </ul> <p>Example Use Case: Listing all devices in the network inventory.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n    \"Switch1\": {\"IP\": \"192.168.1.2\", \"Status\": \"down\"},\n}\n\ndevice_names = device_configs.keys()\nprint(device_names)  # Output: dict_keys(['Router1', 'Switch1'])\n</code></pre>"},{"location":"devnet/python4NE/#3-dictvalues","title":"3. <code>dict.values()</code>","text":"<p>Description: Returns a view object that displays a list of all the values in the dictionary.</p> <p>Example Use Case: Getting all device statuses in the network.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n    \"Switch1\": {\"IP\": \"192.168.1.2\", \"Status\": \"down\"},\n}\n\ndevice_statuses = []\n\nfor config in device_configs.values():\nstatuses.append(config[\"Status\"])\n\n# OR\n\ndevice_statuses = [config[\"Status\"] for config in device_configs.values()]\nprint(device_statuses)  # Output: ['up', 'down']\n</code></pre>"},{"location":"devnet/python4NE/#4-dictitems","title":"4. <code>dict.items()</code>","text":"<p>Description: Returns a view object that displays a list of the dictionary's key-value tuple pairs.</p> <p>Example Use Case: Iterating over all devices and their configurations.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n    \"Switch1\": {\"IP\": \"192.168.1.2\", \"Status\": \"down\"},\n}\n\nfor device, config in device_configs.items():\n    print(f\"Device: {device}, Config: {config}\")\n# Output:\n# Device: Router1, Config: {'IP': '192.168.1.1', 'Status': 'up'}\n# Device: Switch1, Config: {'IP': '192.168.1.2', 'Status': 'down'}\n</code></pre>"},{"location":"devnet/python4NE/#5-dictupdate","title":"5. <code>dict.update()</code>","text":"<p>Description: Updates the dictionary with elements from another dictionary or an iterable of key-value pairs.</p> <p>Example Use Case: Updating the configuration of a specific device.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n}\n\nnew_config = {\"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"down\"}}\ndevice_configs.update(new_config)\n\nprint(device_configs)\n# Output: {'Router1': {'IP': '192.168.1.1', 'Status': 'down'}}\n</code></pre>"},{"location":"devnet/python4NE/#6-dictpop","title":"6. <code>dict.pop()</code>","text":"<p>Description: Removes the specified key and returns the corresponding value. If the key is not found, it raises a KeyError unless a default value is provided.</p> <p>Example Use Case: Removing a device from the inventory after decommissioning.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n    \"Switch1\": {\"IP\": \"192.168.1.2\", \"Status\": \"down\"},\n}\n\nremoved_device = device_configs.pop(\"Switch1\", \"Not found\")\nprint(removed_device)  # Output: {'IP': '192.168.1.2', 'Status': 'down'}\nprint(device_configs)  # Output: {'Router1': {'IP': '192.168.1.1', 'Status': 'up'}}\n\n# PS: pop's second parameter define response when first parameter does not find\n</code></pre>"},{"location":"devnet/python4NE/#7-dictpopitem","title":"7. <code>dict.popitem()</code>","text":"<p>Description: Removes and returns the last inserted key-value pair as a tuple. If the dictionary is empty, it raises a KeyError.</p> <p>Example Use Case: Removing the most recently added device configuration.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n    \"Switch1\": {\"IP\": \"192.168.1.2\", \"Status\": \"down\"},\n}\n\nlast_added = device_configs.popitem()\nprint(last_added)  # Output: ('Switch1', {'IP': '192.168.1.2', 'Status': 'down'})\nprint(device_configs)  # Output: {'Router1': {'IP': '192.168.1.1', 'Status': 'up'}}\n</code></pre>"},{"location":"devnet/python4NE/#8-dictclear","title":"8. <code>dict.clear()</code>","text":"<p>Description: Removes all elements from the dictionary.</p> <p>Example Use Case: Clearing the entire network inventory.</p> <pre><code>device_configs = {\n    \"Router1\": {\"IP\": \"192.168.1.1\", \"Status\": \"up\"},\n    \"Switch1\": {\"IP\": \"192.168.1.2\", \"Status\": \"down\"},\n}\n\ndevice_configs.clear()\nprint(device_configs)  # Output: {}\n</code></pre>"},{"location":"devnet/python4NE/#8-sets-set","title":"8. Sets (<code>set</code>)","text":"<p>Description: Unordered collection of unique items.</p> <p>Example Use Case: Useful for ensuring unique values, such as unique IP addresses in a subnet.</p> <pre><code>unique_ips = {\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"}\n\nunique_ips.add(\"192.168.1.4\")  # Adding a new IP\nunique_ips.add(\"192.168.1.1\")  # Duplicate IP, won't be added\n\nprint(f\"Unique IPs: {unique_ips}\")\n</code></pre> <p>Sets in Python are a collection of unique elements, which makes them useful for managing distinct items such as IP addresses, device names, and other network-related data. Sets are unordered, meaning they do not maintain any specific order of elements. Let's explore some common set methods and operations with examples relevant to network automation.</p>"},{"location":"devnet/python4NE/#common-set-methods","title":"Common Set Methods","text":"<ol> <li><code>add()</code></li> <li><code>update()</code></li> <li><code>remove()</code></li> <li><code>discard()</code></li> <li><code>pop()</code></li> <li><code>clear()</code></li> <li><code>union()</code></li> <li><code>intersection()</code></li> <li><code>difference()</code></li> <li><code>issubset()</code></li> <li><code>issuperset()</code></li> </ol>"},{"location":"devnet/python4NE/#1-add","title":"1. <code>add()</code>","text":"<p>Description: Adds an element to the set.</p> <p>Example Use Case: Adding a new IP address to a set of monitored IPs.</p> <pre><code>monitored_ips = {\"192.168.1.1\", \"192.168.1.2\"}\nnew_ip = \"192.168.1.3\"\n\nmonitored_ips.add(new_ip)\nprint(monitored_ips)  # Output: {'192.168.1.1', '192.168.1.2', '192.168.1.3'}\n</code></pre>"},{"location":"devnet/python4NE/#2-update","title":"2. <code>update()</code>","text":"<p>Description: Adds multiple elements (from another set, list, or any iterable) to the set.</p> <p>Example Use Case: Adding multiple new IP addresses to a set of monitored IPs.</p> <pre><code>monitored_ips = {\"192.168.1.1\", \"192.168.1.2\"}\nnew_ips = {\"192.168.1.3\", \"192.168.1.4\"}\n\nmonitored_ips.update(new_ips)\nprint(monitored_ips)  # Output: {'192.168.1.1', '192.168.1.2', '192.168.1.3', '192.168.1.4'}\n</code></pre>"},{"location":"devnet/python4NE/#3-remove","title":"3. <code>remove()</code>","text":"<p>Description: Removes a specified element from the set. Raises a <code>KeyError</code> if the element is not found.</p> <p>Example Use Case: Removing a device from a set of configured devices.</p> <pre><code>configured_devices = {\"Router1\", \"Switch1\", \"Router2\"}\nconfigured_devices.remove(\"Switch1\")\nprint(configured_devices)  # Output: {'Router1', 'Router2'}\n</code></pre>"},{"location":"devnet/python4NE/#4-discard","title":"4. <code>discard()</code>","text":"<p>Description: Removes a specified element from the set if it is present. Does not raise an error if the element is not found.</p> <p>Example Use Case: Removing a device from a set of configured devices safely.</p> <pre><code>configured_devices = {\"Router1\", \"Switch1\", \"Router2\"}\nconfigured_devices.discard(\"Switch1\")\nconfigured_devices.discard(\"Switch3\")  # No error even though Switch3 is not in the set\nprint(configured_devices)  # Output: {'Router1', 'Router2'}\n</code></pre>"},{"location":"devnet/python4NE/#5-pop_1","title":"5. <code>pop()</code>","text":"<p>Description: Removes and returns an arbitrary element from the set. Raises a <code>KeyError</code> if the set is empty.</p> <p>Example Use Case: Removing any IP address from a set for processing.</p> <pre><code>monitored_ips = {\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"}\nip = monitored_ips.pop()\nprint(f\"Removed IP: {ip}\")\nprint(monitored_ips)  # Output: (one of the IPs will be removed, the rest will remain)\n</code></pre>"},{"location":"devnet/python4NE/#6-clear","title":"6. <code>clear()</code>","text":"<p>Description: Removes all elements from the set.</p> <p>Example Use Case: Clearing the set of monitored IPs at the end of a monitoring session.</p> <pre><code>monitored_ips = {\"192.168.1.1\", \"192.168.1.2\"}\nmonitored_ips.clear()\nprint(monitored_ips)  # Output: set()\n</code></pre>"},{"location":"devnet/python4NE/#7-union","title":"7. <code>union()</code>","text":"<p>Description: Returns a new set with elements from the set and all others (union of sets).</p> <p>Example Use Case: Combining sets of IP addresses from different sources.</p> <pre><code>set1 = {\"192.168.1.1\", \"192.168.1.2\"}\nset2 = {\"192.168.1.3\", \"192.168.1.4\"}\n\nall_ips = set1.union(set2)\nprint(all_ips)  # Output: {'192.168.1.1', '192.168.1.2', '192.168.1.3', '192.168.1.4'}\n</code></pre>"},{"location":"devnet/python4NE/#8-intersection","title":"8. <code>intersection()</code>","text":"<p>Description: Returns a new set with elements common to the set and all others (intersection of sets).</p> <p>Example Use Case: Finding common IP addresses in different monitoring lists.</p> <pre><code>set1 = {\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"}\nset2 = {\"192.168.1.2\", \"192.168.1.3\", \"192.168.1.4\"}\n\ncommon_ips = set1.intersection(set2)\nprint(common_ips)  # Output: {'192.168.1.2', '192.168.1.3'}\n</code></pre>"},{"location":"devnet/python4NE/#9-difference","title":"9. <code>difference()</code>","text":"<p>Description: Returns a new set with elements in the set that are not in the others (difference of sets).</p> <p>Example Use Case: Finding IP addresses that are in one list but not in another.</p> <pre><code>set1 = {\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"}\nset2 = {\"192.168.1.2\", \"192.168.1.3\", \"192.168.1.4\"}\n\nunique_ips = set1.difference(set2)\nprint(unique_ips)  # Output: {'192.168.1.1'}\n</code></pre>"},{"location":"devnet/python4NE/#10-issubset","title":"10. <code>issubset()</code>","text":"<p>Description: Returns <code>True</code> if the set is a subset of another set.</p> <p>Example Use Case: Checking if a set of IPs is fully contained within another set.</p> <pre><code>set1 = {\"192.168.1.1\", \"192.168.1.2\"}\nset2 = {\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"}\n\nis_subset = set1.issubset(set2)\nprint(is_subset)  # Output: True\n</code></pre>"},{"location":"devnet/python4NE/#11-issuperset","title":"11. <code>issuperset()</code>","text":"<p>Description: Returns <code>True</code> if the set is a superset of another set.</p> <p>Example Use Case: Checking if a set contains all elements of another set.</p> <pre><code>set1 = {\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"}\nset2 = {\"192.168.1.1\", \"192.168.1.2\"}\n\nis_superset = set1.issuperset(set2)\nprint(is_superset)  # Output: True\n</code></pre>"},{"location":"devnet/python4NE/#9-nonetype-none","title":"9. NoneType (<code>None</code>)","text":"<p>Description: Represents the absence of a value.</p> <p>Example Use Case: Often used to initialize variables or to signify that a value is not set.</p> <pre><code>response = None  # No response initially\n\n# Simulate a function call that might set the response\nresponse = \"Success\"\n\nif response is not None:\n    print(f\"Response received: {response}\")\nelse:\n    print(\"No response received\")\n</code></pre>"},{"location":"devnet/python4NE/#conditional-statements","title":"Conditional Statements","text":"<p>Conditional statements in Python allow you to execute specific blocks of code based on certain conditions. For a network engineer, this can be incredibly useful for making decisions based on network data or device status. Here's a detailed explanation of conditional statements in Python, along with examples relevant to network tasks.</p>"},{"location":"devnet/python4NE/#conditional-statements-overview","title":"Conditional Statements Overview","text":"<ol> <li><code>if</code> Statement:</li> <li>Executes a block of code if a specified condition is <code>True</code>.</li> <li><code>elif</code> (else if) Statement:</li> <li>Checks another condition if the previous <code>if</code> or <code>elif</code> statement is <code>False</code>.</li> <li><code>else</code> Statement:</li> <li>Executes a block of code if none of the preceding conditions are <code>True</code>.</li> </ol>"},{"location":"devnet/python4NE/#basic-syntax","title":"Basic Syntax","text":"<pre><code>if condition1:\n    # Code to execute if condition1 is True\nelif condition2:\n    # Code to execute if condition2 is True\nelse:\n    # Code to execute if neither condition1 nor condition2 is True\n</code></pre>"},{"location":"devnet/python4NE/#example-checking-interface-status","title":"Example: Checking Interface Status","text":"<p>Let's consider a network task where you want to check the status of interfaces on a router and take action based on their status.</p> <ol> <li>Define the Task:</li> <li>Check if an interface is up or down.</li> <li>Print a message indicating the status.</li> <li> <p>Perform additional actions if the interface is down.</p> </li> <li> <p>Sample Data:</p> </li> <li>A list of dictionaries representing the interface statuses.</li> </ol>"},{"location":"devnet/python4NE/#python-code","title":"Python Code","text":"<pre><code># Sample data representing interface statuses\ninterfaces = [\n    {\"name\": \"Gig0/0\", \"status\": \"up\"},\n    {\"name\": \"Gig0/1\", \"status\": \"down\"},\n    {\"name\": \"Gig0/2\", \"status\": \"up\"},\n    {\"name\": \"Gig0/3\", \"status\": \"down\"},\n]\n\n# Iterate over the interfaces and check their status\nfor interface in interfaces:\n    if interface[\"status\"] == \"up\":\n        print(f\"Interface {interface['name']} is up.\")\n    elif interface[\"status\"] == \"down\":\n        print(f\"Interface {interface['name']} is down. Taking corrective action.\")\n        # Example corrective action: log the issue or attempt to bring the interface up\n        # This is just a placeholder for the actual action you might take\n        corrective_action = f\"Attempting to bring {interface['name']} up...\"\n        print(corrective_action)\n    else:\n        print(f\"Interface {interface['name']} has an unknown status.\")\n</code></pre>"},{"location":"devnet/python4NE/#explanation","title":"Explanation","text":"<ul> <li>Data Structure: The <code>interfaces</code> list contains dictionaries, each representing an interface with its <code>name</code> and <code>status</code>.</li> <li>Iteration: The <code>for</code> loop iterates over each interface in the list.</li> <li>Conditionals:</li> <li><code>if interface[\"status\"] == \"up\"</code>: Checks if the interface is up and prints a message.</li> <li><code>elif interface[\"status\"] == \"down\"</code>: Checks if the interface is down, prints a message, and performs a corrective action.</li> <li><code>else</code>: Handles any unknown status (a catch-all for unexpected cases).</li> </ul>"},{"location":"devnet/python4NE/#conclusion_2","title":"Conclusion","text":"<p>Conditional statements are fundamental in automating network tasks and making decisions based on network data. By using <code>if</code>, <code>elif</code>, and <code>else</code>, you can write scripts that handle various network scenarios and automate responses to different network conditions. These examples demonstrate how you can use Python to check interface statuses and device reachability, but the same principles can be applied to a wide range of network automation tasks.</p>"},{"location":"devnet/python4NE/#loops-in-python","title":"Loops in Python","text":"<p>Loops in Python are essential for network engineers as they enable repetitive tasks to be automated, such as iterating over a list of devices to perform configurations, collect data, or troubleshoot network issues. Let's explore loops in Python and provide a network task example to illustrate their usage.</p>"},{"location":"devnet/python4NE/#loops-overview","title":"Loops Overview","text":"<ol> <li><code>for</code> Loop:</li> <li> <p>Executes a block of code a specified number of times, iterating over an iterable object (e.g., lists, tuples, dictionaries).</p> </li> <li> <p><code>while</code> Loop:</p> </li> <li>Executes a block of code as long as a specified condition is <code>True</code>.</li> </ol>"},{"location":"devnet/python4NE/#for-loop-syntax","title":"<code>for</code> Loop Syntax","text":"<pre><code>for item in iterable:\n    # Code block to execute for each item\n</code></pre>"},{"location":"devnet/python4NE/#while-loop-syntax","title":"<code>while</code> Loop Syntax","text":"<pre><code>while condition:\n    # Code block to execute as long as condition is True\n</code></pre>"},{"location":"devnet/python4NE/#example-configuring-multiple-devices","title":"Example: Configuring Multiple Devices","text":"<p>Let's consider a common network task where you need to configure multiple network devices with the same set of parameters.</p> <ol> <li>Define the Task:</li> <li> <p>Configure VLAN 100 on a list of switches.</p> </li> <li> <p>Sample Data:</p> </li> <li>A list of switch IP addresses.</li> </ol>"},{"location":"devnet/python4NE/#python-code_1","title":"Python Code","text":"<pre><code>import netmiko\n\n# List of switch IP addresses\nswitches = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"]\n\n# Configuration commands\nvlan_config = [\n    \"vlan 100\",\n    \"name Data_VLAN\",\n    \"exit\"\n]\n\n# Iterate over the switches and configure VLAN 100\nfor switch in switches:\n    # Establish SSH connection to the switch\n    connection = netmiko.ConnectHandler(\n        device_type='cisco_ios',\n        host=switch,\n        username='admin',\n        password='password'\n    )\n\n    # Send configuration commands\n    output = connection.send_config_set(vlan_config)\n\n    print(f\"Configured VLAN 100 on switch {switch}\")\n    print(\"Output:\", output)\n\n    # Close the connection\n    connection.disconnect()\n</code></pre>"},{"location":"devnet/python4NE/#explanation_1","title":"Explanation","text":"<ul> <li>Data Structure: The <code>switches</code> list contains IP addresses of switches.</li> <li>Iteration: The <code>for</code> loop iterates over each switch in the list.</li> <li>SSH Connection: Inside the loop, an SSH connection is established to each switch using <code>netmiko</code>.</li> <li>Configuration Commands: The <code>vlan_config</code> list contains commands to configure VLAN 100.</li> <li>Configuration: The <code>send_config_set</code> method sends the configuration commands to each switch.</li> <li>Output: The output of the configuration commands is printed.</li> <li>Connection Close: Finally, the SSH connection is closed.</li> </ul>"},{"location":"devnet/python4NE/#example-polling-network-devices","title":"Example: Polling Network Devices","text":"<p>Another example is polling network devices to collect data at regular intervals.</p> <pre><code>import time\nimport netmiko\n\ndevices = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"]\n\nwhile True:\n    for device in devices:\n        connection = netmiko.ConnectHandler(\n            device_type='cisco_ios',\n            host=device,\n            username='admin',\n            password='password'\n        )\n\n        output = connection.send_command(\"show interface status\")\n        print(f\"Device: {device}\")\n        print(output)\n\n        connection.disconnect()\n\n    time.sleep(300)  # Sleep for 5 minutes before polling again\n</code></pre> <ul> <li>In this example, a <code>while</code> loop is used to continuously poll the devices every 5 minutes (<code>time.sleep(300)</code>).</li> <li>Inside the loop, a <code>for</code> loop iterates over each device in the <code>devices</code> list.</li> <li>An SSH connection is established to each device, and the <code>show interface status</code> command is sent to collect data.</li> </ul>"},{"location":"devnet/python4NE/#conclusion_3","title":"Conclusion","text":"<p>Loops are indispensable for network engineers when automating repetitive tasks such as configuration management, data collection, and device monitoring. By leveraging loops in Python, network engineers can efficiently manage and monitor network infrastructure, saving time and reducing the likelihood of errors.</p>"},{"location":"devnet/python4NE/#functions-in-python","title":"Functions in Python","text":"<p>Functions in Python are crucial for network engineers as they allow for the organization and reuse of code, making it easier to automate repetitive tasks, manage configurations, and perform network operations. Let's delve into functions in Python and provide a network task example to demonstrate their utility.</p>"},{"location":"devnet/python4NE/#functions-overview","title":"Functions Overview","text":"<ol> <li>Function Definition:</li> <li>A block of reusable code that performs a specific task.</li> <li> <p>Functions are defined using the <code>def</code> keyword followed by the function name and parameters.</p> </li> <li> <p>Function Call:</p> </li> <li> <p>To execute a function, you call it by its name and pass any required arguments.</p> </li> <li> <p>Return Statement:</p> </li> <li>Functions can return data back to the caller using the <code>return</code> statement.</li> </ol>"},{"location":"devnet/python4NE/#function-syntax","title":"Function Syntax","text":"<pre><code>def function_name(parameters):\n    # Function body\n    # Perform tasks using parameters\n    return result  # Optional\n\n# Example \n\ndef your_age(birth_year, current_year): \n    age = current_year - birth_year print(age) \n    # return age \n\nage = your_age(1980, 2024) \nprint(age)\n</code></pre>"},{"location":"devnet/python4NE/#example-configuring-interfaces-function","title":"Example: Configuring Interfaces Function","text":"<p>Let's consider a network task where you frequently need to configure interfaces on routers. You can create a function to streamline this process.</p> <ol> <li>Define the Task:</li> <li>Configure an interface with an IP address and description.</li> </ol>"},{"location":"devnet/python4NE/#python-code_2","title":"Python Code","text":"<pre><code>def configure_interface(interface, ip_address):\n\n    # Generate configuration commands\n\n    config_commands_set = [\n    f\"interface {interface}\",\n    f\"ip address {ip_address}\",\n    f\"description \\\"{interface} description\\\"\",\n    \"no shutdown\",\n    \"exit\"\n    ]\n\n    # configuration commands\n    config_commands = \"\\n\".join (config_commands_set)\n    print (config_commands)\n\n# There is a lists for generating configuration\n\ninterfaces = [\"Gi 0/1\", \"Gi 0/2\", \"Gi 0/3\"]\n\nip_addresses = [\"10.0.0.1 255.255.255.0\", \"10.0.1.1 255.255.255.0\",\n\"10.0.2.1 255.255.255.0\"]\n\n\n# Use `zip` function for merging lists\nmerge_lists = zip (interfaces,ip_addresses)\n\nfor intf, ip_addr in merge_lists:\nconfigure_interface(intf, ip_addr)\n</code></pre>"},{"location":"devnet/python4NE/#conclusion_4","title":"Conclusion","text":"<p>Functions are invaluable for network engineers, enabling them to encapsulate reusable code, simplify complex tasks, and enhance code readability. By defining functions for common network operations, engineers can automate tasks more efficiently, streamline configuration management, and maintain cleaner and more modular codebases.</p>"},{"location":"devnet/python4NE/#args-and-kwargs-in-python","title":"Args and kwargs in Python","text":"<p>In Python, <code>*args</code> and <code>**kwargs</code> are special syntax used in function definitions to handle variable numbers of arguments. These can be particularly useful for network engineers when dealing with functions that need to accept a flexible number of parameters, such as when configuring multiple devices with different settings. Let's explore <code>*args</code> and <code>**kwargs</code> in Python and provide a network task example to illustrate their usage.</p>"},{"location":"devnet/python4NE/#args-and-kwargs-overview","title":"<code>*args</code> and <code>**kwargs</code> Overview","text":"<ol> <li><code>*args</code>:</li> <li>Used to pass a variable number of non-keyword arguments to a function.</li> <li> <p><code>*args</code> collects these arguments into a tuple.</p> </li> <li> <p><code>**kwargs</code>:</p> </li> <li>Used to pass a variable number of keyword arguments to a function.</li> <li><code>**kwargs</code> collects these arguments into a dictionary.</li> </ol> <p>let's  example to better illustrate <code>*args</code> and <code>**kwargs</code>:</p> <pre><code>def addition (a, b):\n    c = a + b\n    print (f\"result: {c}\")\n\naddition (15,20) # result: 35\n\ndef addition_arguments (*args):\n\n    print (args) # (10, 15, 20, 25, 30)\n    result = 0\n    for arg in args:\n        result += arg\n        print (f\"result: {result}\")\n\n\n\naddition_arguments (10,15,20,25,30) # result: 100\n\ndef ssh_session (**kwargs):\n    print (kwargs) # {'host': '10.0.01', 'username': 'admin', 'password': 'Aa123456'}\n    for key,value in kwargs.items():\n        print (f\"{key}: {value}\")\n\nssh_session(host='10.0.01',username='admin',password='Aa123456')\n</code></pre> <p>Output:</p> <pre><code>result: 35\n(10, 15, 20, 25, 30)\nresult: 100\n{'host': '10.0.01', 'username': 'admin', 'password': 'Aa123456'}\nhost: 10.0.01\nusername: admin\npassword: Aa123456\n</code></pre> <p>This simple example demonstrates how <code>*args</code> collects additional positional arguments into a tuple and <code>**kwargs</code> collects additional keyword arguments into a dictionary, allowing for flexible function parameter handling.</p>"},{"location":"devnet/python4NE/#conclusion_5","title":"Conclusion","text":"<p><code>*args</code> and <code>**kwargs</code> are powerful features in Python that allow functions to accept a variable number of arguments, making them versatile and flexible. In the context of network engineering, these features can be used to create functions that can handle different configurations, settings, or operations across multiple devices in a concise and efficient manner.</p>"},{"location":"devnet/python4NE/#try-except-usage","title":"<code>Try</code> - <code>Except</code> Usage","text":"<p>The <code>try-except</code> block in Python is used for handling exceptions (errors) that may occur during the execution of a program. This is particularly useful in network engineering where you often deal with unpredictable situations such as network failures, unreachable devices, or malformed data. By using <code>try-except</code>, you can ensure your program continues to run smoothly even when an error occurs.</p> <pre><code>try:\n\n    def addition (a, b):\n\n    try:\n        c = a + b\n        print (f\"result: {c}\")\n    except TypeError:\n        print (\"Be careful for typing and enter number\")\n    except Exception as e:\n        print (f\"error is:{e}\")\nexcept Exception as e:\nprint (e)\n\naddition (15,\"test\")\naddition (15,20)\n</code></pre> <p>Output:</p> <pre><code>Be careful for typing and enter number\nresult: 35\n</code></pre>"},{"location":"devnet/python4NE/#why-use-try-except","title":"Why Use Try-Except?","text":"<ul> <li>Error Handling: It allows your program to handle errors gracefully without crashing.</li> <li>Debugging: It provides meaningful error messages that can help you debug issues.</li> <li>User Experience: It improves the user experience by informing users of what went wrong instead of abruptly terminating the program.</li> </ul> <p>By using <code>try-except</code>, you ensure your script can handle common errors (like a missing file or invalid data) and continue running or provide useful feedback to the user.</p>"},{"location":"devnet/python4NE/#break-continue-usage","title":"<code>Break</code>- <code>Continue</code> Usage","text":"<p>In Python, <code>break</code> and <code>continue</code> are control flow statements used within loops (<code>for</code> and <code>while</code>) to alter the flow of execution. These statements are particularly useful in network engineering scripts for tasks such as iterating through a list of IP addresses, processing packets, or handling log files. Let's explore both statements with examples.</p>"},{"location":"devnet/python4NE/#break-statement","title":"<code>break</code> Statement","text":"<p>The <code>break</code> statement is used to exit the loop prematurely when a certain condition is met. This is useful when you need to stop processing once a specific condition is satisfied.</p>"},{"location":"devnet/python4NE/#example-breaking-out-of-a-loop","title":"Example: Breaking Out of a Loop","text":"<p>Imagine you have a list of IP addresses, and you want to check if each IP address is reachable. If an unreachable IP address is encountered, you want to stop the loop immediately.</p> <pre><code>ip_addresses = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\", \"10.0.0.1\"]\n\nfor ip in ip_addresses:\n    print(f\"Checking IP: {ip}\")\n    if ip == \"192.168.1.3\":  # Simulate an unreachable IP address\n        print(f\"IP {ip} is unreachable. Stopping check.\")\n        break  # Exit the loop\n    print(f\"IP {ip} is reachable.\")\n\nprint(\"Finished checking IP addresses.\")\n</code></pre> <p>Output:</p> <pre><code>Checking IP: 192.168.1.1\nIP 192.168.1.1 is reachable.\nChecking IP: 192.168.1.2\nIP 192.168.1.2 is reachable.\nChecking IP: 192.168.1.3\nIP 192.168.1.3 is unreachable. Stopping check.\nFinished checking IP addresses.\n</code></pre>"},{"location":"devnet/python4NE/#explanation_2","title":"Explanation","text":"<ol> <li>Loop Through IP Addresses:</li> <li>The <code>for</code> loop iterates through each IP address in the <code>ip_addresses</code> list.</li> <li>Check Reachability:</li> <li>For each IP address, a message is printed indicating that the IP is being checked.</li> <li>Condition to Break:</li> <li>If the IP address is <code>\"192.168.1.3\"</code>, a message is printed indicating that the IP is unreachable, and the <code>break</code> statement is executed to exit the loop.</li> <li>Post-loop Execution:</li> <li>After the loop, a message indicating the completion of the IP address check is printed.</li> </ol>"},{"location":"devnet/python4NE/#continue-statement","title":"<code>continue</code> Statement","text":"<p>The <code>continue</code> statement is used to skip the rest of the code inside the loop for the current iteration and move to the next iteration. This is useful when you want to skip certain items in the loop without exiting the loop entirely.</p>"},{"location":"devnet/python4NE/#example-skipping-certain-ip-addresses","title":"Example: Skipping Certain IP Addresses","text":"<p>Imagine you have a list of IP addresses, and you want to skip processing certain reserved IP addresses (e.g., <code>192.168.1.2</code>).</p> <pre><code>ip_addresses = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\", \"10.0.0.1\"]\n\nfor ip in ip_addresses:\n    if ip == \"192.168.1.2\":  # Reserved IP address\n        print(f\"Skipping reserved IP: {ip}\")\n        continue  # Skip the rest of the code in the loop for this iteration\n    print(f\"Processing IP: {ip}\")\n\nprint(\"Finished processing IP addresses.\")\n</code></pre> <p>Output:</p> <pre><code>Processing IP: 192.168.1.1\nSkipping reserved IP: 192.168.1.2\nProcessing IP: 192.168.1.3\nProcessing IP: 10.0.0.1\nFinished processing IP addresses.\n</code></pre>"},{"location":"devnet/python4NE/#explanation_3","title":"Explanation","text":"<ol> <li>Loop Through IP Addresses:</li> <li>The <code>for</code> loop iterates through each IP address in the <code>ip_addresses</code> list.</li> <li>Condition to Continue:</li> <li>If the IP address is <code>\"192.168.1.2\"</code>, a message is printed indicating that the IP is reserved, and the <code>continue</code> statement is executed to skip the rest of the code in the loop for this iteration.</li> <li>Processing Other IPs:</li> <li>For IP addresses that are not reserved, a message is printed indicating that the IP is being processed.</li> <li>Post-loop Execution:</li> <li>After the loop, a message indicating the completion of the IP address processing is printed.</li> </ol>"},{"location":"devnet/python4NE/#use-cases-in-network-engineering","title":"Use Cases in Network Engineering","text":"<ul> <li><code>break</code>: Terminate a network scan or stop processing packets when a specific condition (e.g., critical error, specific response) is met.</li> <li><code>continue</code>: Skip processing certain packets, IP addresses, or log entries that match specific criteria (e.g., reserved addresses, malformed packets).</li> </ul> <p>Using <code>break</code> and <code>continue</code> helps in writing efficient and readable scripts for network operations by controlling the flow of loops based on dynamic conditions.</p>"},{"location":"devnet/python4NE/#pass-usage","title":"<code>Pass</code> Usage","text":"<p>The <code>pass</code> statement in Python is a placeholder that does nothing when executed. It is used in situations where a statement is required syntactically, but you don't want any code to run. This can be useful in a variety of scenarios, such as defining a function, class, or loop that you plan to implement later, or in conditionals where you want to skip certain cases without performing any action.</p>"},{"location":"devnet/python4NE/#example-using-pass-in-a-network-engineering-context","title":"Example: Using <code>pass</code> in a Network Engineering Context","text":"<p>Imagine you are writing a script to process a list of IP addresses. For now, you only want to implement processing for certain IPs, but you want to leave placeholders for other parts of the code that you will implement later.</p>"},{"location":"devnet/python4NE/#example-1-placeholder-in-a-loop","title":"Example 1: Placeholder in a Loop","text":"<p>Let's say you have a list of IP addresses and you want to process only the ones that are reachable. For the unreachable ones, you might want to add handling later.</p> <pre><code>ip_addresses = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\", \"10.0.0.1\"]\n\nfor ip in ip_addresses:\n    if ip == \"192.168.1.3\":  # Simulate an unreachable IP address\n        # Placeholder for future handling of unreachable IP addresses\n        pass\n        print (f\"processing other funtions\")\n    else:\n        print(f\"Processing IP: {ip}\")\n</code></pre> <p>Output:</p> <pre><code>Processing IP: 192.168.1.1\nProcessing IP: 192.168.1.2\nprocessing other funtions\nProcessing IP: 10.0.0.1\n</code></pre>"},{"location":"devnet/python4NE/#explanation_4","title":"Explanation","text":"<ol> <li>Loop Through IP Addresses:</li> <li>The <code>for</code> loop iterates through each IP address in the <code>ip_addresses</code> list.</li> <li>Condition for Unreachable IP:</li> <li>If the IP address is <code>\"192.168.1.3\"</code>, the <code>pass</code> statement is executed, indicating that you will handle unreachable IP addresses later.</li> <li>Processing Reachable IPs:</li> <li>For IP addresses that are not <code>\"192.168.1.3\"</code>, a message is printed indicating that the IP is being processed.</li> </ol>"},{"location":"devnet/python4NE/#example-2-placeholder-in-function-definition","title":"Example 2: Placeholder in Function Definition","text":"<p>You might want to define a function for future use but not implement its logic right away.</p> <pre><code>def check_ip_reachability(ip):\n    # Placeholder for future implementation\n    pass\n\n# Example usage\nip_list = [\"192.168.1.1\", \"192.168.1.2\", \"192.168.1.3\"]\nfor ip in ip_list:\n    check_ip_reachability(ip)\n    print(f\"Checked reachability for IP: {ip}\")\n</code></pre>"},{"location":"devnet/python4NE/#explanation_5","title":"Explanation","text":"<ol> <li>Function Definition:</li> <li>The <code>check_ip_reachability</code> function is defined with a <code>pass</code> statement, indicating that you will implement the function's logic later.</li> <li>Example Usage:</li> <li>The function is called for each IP in <code>ip_list</code>. For now, it does nothing, but it serves as a placeholder for future logic.</li> </ol>"},{"location":"devnet/python4NE/#libraries-in-python","title":"Libraries in Python","text":"<p>Libraries in Python are collections of pre-written code that provide functionalities to accomplish specific tasks. For network engineers, libraries play a crucial role in simplifying the development of network automation scripts, managing network configurations, monitoring network devices, and analyzing network data. Let's explore libraries in Python and provide a network task example to illustrate their usage.</p>"},{"location":"devnet/python4NE/#libraries-overview","title":"Libraries Overview","text":"<ol> <li>Standard Libraries:</li> <li> <p>These are part of the Python Standard Library and come bundled with Python installation. They provide basic functionalities for various tasks.</p> </li> <li> <p>Third-Party Libraries:</p> </li> <li>These are developed by third-party developers and provide additional functionalities beyond the standard library. They cover a wide range of domains, including networking.</li> </ol>"},{"location":"devnet/python4NE/#common-libraries-for-network-engineers","title":"Common Libraries for Network Engineers","text":"<ol> <li><code>netmiko</code>: A multi-vendor library to simplify SSH connections to network devices and execute commands.</li> <li><code>paramiko</code>: A Python implementation of SSHv2 for secure connections and file transfers.</li> <li><code>requests</code>: A powerful HTTP library for making HTTP requests, commonly used for interacting with REST APIs on network devices.</li> <li><code>pandas</code>: A data manipulation and analysis library often used for handling and analyzing network data.</li> </ol>"},{"location":"devnet/python4NE/#pandas","title":"<code>Pandas</code>","text":"<p>Pandas is a powerful data manipulation and analysis library in Python that provides easy-to-use data structures and functions to work with structured data, such as tables and time series data. For network engineers, Pandas can be incredibly useful for handling network data, analyzing network performance metrics, and generating reports. Let's explore Pandas from a network engineer's perspective and provide a network task example to illustrate its usage.</p>"},{"location":"devnet/python4NE/#pandas-overview","title":"Pandas Overview","text":"<ol> <li> <p>Data Structures:</p> </li> <li> <p>Pandas provides two primary data structures: Series and DataFrame.</p> </li> <li>Series represents a one-dimensional array, similar to a column in a spreadsheet.</li> <li> <p>DataFrame is a two-dimensional labeled data structure with columns of potentially different types, resembling a spreadsheet or SQL table.</p> </li> <li> <p>Data Manipulation:</p> </li> <li> <p>Pandas offers a wide range of functions for data manipulation, including indexing, slicing, filtering, merging, grouping, and aggregation.</p> </li> <li> <p>Data Analysis:</p> </li> <li> <p>Pandas enables descriptive and exploratory data analysis, statistical analysis, data visualization, and time series analysis.</p> </li> </ol> <p>Let's extend the example to demonstrate how to use specific columns from the Excel and CSV files to perform network device configuration tasks.</p>"},{"location":"devnet/python4NE/#example-configuring-network-devices-using-data-from-files","title":"Example: Configuring Network Devices Using Data from Files","text":"<p>We'll continue with the scenario where you have information about routers in an Excel file and information about switches in a CSV file. We'll use specific columns from these files to configure network devices.</p> <ol> <li>Define the Task:</li> <li>Read specific columns from Excel and CSV files containing network device information.</li> <li>Use this information to configure network devices.</li> </ol>"},{"location":"devnet/python4NE/#python-code_3","title":"Python Code","text":"<pre><code>import pandas as pd\n\nexcel_data = pd.read_excel(\"excel_data.xlsx\")\n\n# usecols = [0,1] or # usecols = [\"APIC\",\"NodeId\"]\n\nprint (excel_data)\n\n\"\"\"\nAPIC Serial NodeName NodeId Podid\n0 192.168.1.10 1234abcd ACI_node-1 111 1\n1 192.168.1.10 2234abcd ACI_node-2 112 1\n2 192.168.1.10 3234abcd ACI_node-3 113 1\n3 192.168.1.10 4234abcd ACI_node-4 114 1\n4 192.168.1.10 5234abcd ACI_node-5 211 2\n5 192.168.1.10 6234abcd ACI_node-6 212 2\n6 192.168.1.10 7234abcd ACI_node-7 213 2\n7 192.168.1.10 8234abcd ACI_node-8 214 2\n\n\"\"\"\n</code></pre> <p>For just first two row</p> <pre><code>first_two_row = excel_data.head(2)\nprint (first_two_row)\n\n\"\"\"\nAPIC Serial NodeName NodeId Podid\n0 192.168.1.10 1234abcd ACI_node-1 111 1\n1 192.168.1.10 2234abcd ACI_node-2 112 1\n\"\"\"\n</code></pre> <p>For make list the headers</p> <pre><code>list_headers = excel_data.columns.to_list()\n\nprint (list_headers)\n# ['APIC', 'Serial', 'NodeName', 'NodeId', 'Podid']\n</code></pre> <p>For making list from rows</p> <pre><code>list_rows = excel_data.values.to_list()\nprint (list_rows)\n# print (list_values[0]) # just first row\n# print (list_values[1]) # second row etc.\n\"\"\"\n[\n\n    ['192.168.1.10', '1234abcd', 'ACI_node-1', 111, 1],\n    ['192.168.1.10', '2234abcd', 'ACI_node-2', 112, 1],\n    ['192.168.1.10', '3234abcd', 'ACI_node-3', 113, 1],\n    ['192.168.1.10', '4234abcd', 'ACI_node-4', 114, 1],\n    ['192.168.1.10', '5234abcd', 'ACI_node-5', 211, 2],\n    ['192.168.1.10', '6234abcd', 'ACI_node-6', 212, 2],\n    ['192.168.1.10', '7234abcd', 'ACI_node-7', 213, 2],\n    ['192.168.1.10', '8234abcd', 'ACI_node-8', 214, 2]\n]\n\"\"\"\n</code></pre> <p>for making list from specific column's values</p> <pre><code>Serials = excel_data['Serial'].to_list()\n\nprint (Serials)\n\n# ['1234abcd', '2234abcd', '3234abcd', '4234abcd',\n#  '5234abcd', '6234abcd', '7234abcd', '8234abcd']\n</code></pre> <p>some useful method </p> <pre><code>convert_to_dict = excel_data.to_dict()\nconvert_to_csv = excel_data.to_csv()\n</code></pre> <p>you can use same method for \"CSV\" files.</p>"},{"location":"devnet/python4NE/#mini-lab-with-pandas","title":"Mini LAB with PANDAS","text":"<p>read excel file and generate config file with below template :</p> <p></p> <pre><code>interface GigabitEthernet x/y\nip address a.b.c.d 255.255.255.0\ndesc xxx\nexit\n</code></pre>"},{"location":"devnet/python4NE/#solution","title":"Solution","text":"<pre><code>import pandas as pd\n\nexcel_data = pd.read_excel(\"excel_data_interface.xlsx\")\nprint (excel_data)\n\n\"\"\"\nINTERFACE IP_ADDR MASK DESCRIPTION\n\n0 GigabitEthernet 0/1 10.0.0.1 255.255.255.0 DATA\n1 GigabitEthernet 0/2 10.0.1.1 255.255.255.0 VOICE\n2 GigabitEthernet 0/3 10.0.2.1 255.255.255.0 SERVER\n\"\"\"\n\ninterface_rows = excel_data.values.tolist()\nprint (interface_rows)\n\n\"\"\"\n[\n    ['GigabitEthernet 0/1', '10.0.0.1', '255.255.255.0', 'DATA'],\n    ['GigabitEthernet 0/2', '10.0.1.1', '255.255.255.0', 'VOICE'],\n    ['GigabitEthernet 0/3', '10.0.2.1', '255.255.255.0', 'SERVER']\n]\n\"\"\"\n\nfor intf, ip, mask, desc in interface_rows:\n    config_set = f\"interface {intf} \\nip address {ip} {mask}\\ndesc {desc}\\nexit\\n\"\n    print (config_set)\n\n\"\"\"\n\ninterface GigabitEthernet 0/1\nip address 10.0.0.1 255.255.255.0\ndesc DATA\nexit\ninterface GigabitEthernet 0/2\nip address 10.0.1.1 255.255.255.0\ndesc VOICE\nexit\ninterface GigabitEthernet 0/3\nip address 10.0.2.1 255.255.255.0\ndesc SERVER\nexit\n\"\"\"\n</code></pre>"},{"location":"devnet/python4NE/#conclusion_6","title":"Conclusion","text":"<p>By leveraging Pandas to read specific columns from Excel and CSV files, network engineers can easily extract relevant information for configuring network devices. This approach simplifies the process of handling network device configurations and enables efficient automation of network management tasks.</p>"},{"location":"devnet/python4NE/#json_1","title":"<code>json</code>","text":"<p>The <code>json</code> library in Python provides functionalities to work with JSON (JavaScript Object Notation) data, which is commonly used for storing and exchanging data over the network. For network engineers, the <code>json</code> library is essential for parsing JSON data received from network devices, interacting with REST APIs, and exchanging structured data in a human-readable format. Let's explore the <code>json</code> library from a network engineer's perspective and provide a network task example to illustrate its usage.</p> <ol> <li>Serialization and Deserialization:</li> <li><code>json.dumps()</code>: Serialize Python objects to a JSON formatted string.</li> <li><code>json.loads()</code>: Deserialize a JSON formatted string to Python objects.</li> </ol> <pre><code>import json\n\ndict_data = {\n    \"devices\": [\n        {\n            \"R1\": [\n                 {\n                     \"host\": \"10.0.0.1\",\n                     \"username\": \"admin\",\n                     \"password\": \"cisco123\"\n                 }\n              ]\n            },\n            {\n            \"R2\": [\n                {\n                    \"host\": \"10.0.0.2\",\n                    \"username\": \"admin\",\n                    \"password\": \"cisco123\"\n                }\n              ]\n            }\n          ]\n        }\n\nprint (type(dict_data)) # &lt;class 'dict'&gt;\n\njson_data = json.dumps(dict_data)\nprint (type(json_data)) # &lt;class 'str'&gt;\n\ndict_data_again = json.loads(json_data) # &lt;class 'dict'&gt;\nprint (type(dict_data_again))\n</code></pre> <ol> <li>File I/O:</li> <li><code>json.dump()</code>: Write Python objects to a JSON file.</li> <li><code>json.load()</code>: Read data from a JSON file and parse it into Python objects.</li> </ol> <pre><code>import json\n\nwith open (\"devices.json\", \"r\") as f:\n    json_data = json.load(f)\n\"\"\"\n{'devices': [{'R1': [{'host': '10.0.0.1', 'username': 'admin', 'password': 'cisco123'}]},\n{'R2': [{'host': '10.0.0.2', 'username': 'admin', 'password': 'cisco123'}]}]}\n\"\"\"\n\nnew_device = {\n              'R3' : [\n              {'host' : '10.0.0.3',\n               'username' : 'admin',\n               'password' : 'cisco123'\n            }\n          ]\n        }\n\n# add new device to json file\n\ndevice_list = json_data[\"devices\"]\ndevice_list.append(new_device)\n\n# print (device_list)\n\nprint (json_data)\nwith open (\"devices.json\", \"w\") as f:\njson.dump(json_data,f,indent=4)\n</code></pre>"},{"location":"devnet/python4NE/#conclusion_7","title":"Conclusion","text":"<p>The <code>json</code> library in Python facilitates the parsing and manipulation of JSON data, which is commonly used in network programming for interacting with network devices, REST APIs, and exchanging structured data. By mastering the <code>json</code> library, network engineers can efficiently handle JSON data, extract relevant information, and automate network management tasks.</p>"},{"location":"devnet/python4NE/#netmiko","title":"<code>netmiko</code>","text":"<p>Netmiko is a Python library that simplifies the process of connecting to network devices and executing commands. It is built on top of the Paramiko SSH library and provides additional functionality specific to network devices from various vendors like Cisco, Juniper, Arista, and more. Netmiko is particularly useful for network engineers who want to automate tasks such as configuration changes, data retrieval, and more.</p>"},{"location":"devnet/python4NE/#key-features-of-netmiko","title":"Key Features of Netmiko:","text":"<ul> <li>Simplified SSH connection management.</li> <li>Execution of show and configuration commands.</li> <li>Support for various network device types.</li> <li>Handling of common network automation tasks.</li> </ul>"},{"location":"devnet/python4NE/#installation","title":"Installation","text":"<p>To install Netmiko, you can use pip: <pre><code>pip install netmiko\n</code></pre></p>"},{"location":"devnet/python4NE/#basic-example","title":"Basic Example","text":"<p>Here\u2019s a basic example to demonstrate how to use Netmiko to connect to a Cisco device, run a command, and retrieve the output.</p>"},{"location":"devnet/python4NE/#prerequisites","title":"Prerequisites","text":"<ol> <li>A network device (e.g., a Cisco router or switch) with SSH enabled.</li> <li>Python installed on your machine.</li> <li>Netmiko installed.</li> </ol>"},{"location":"devnet/python4NE/#example-code","title":"Example Code","text":"<pre><code>from netmiko import ConnectHandler\n\n# Define the device to connect to\ncisco_device = {\n    'device_type': 'cisco_ios',  # Device type (can be found in Netmiko documentation)\n    'host': '192.168.1.1',       # IP address of the device\n    'username': 'admin',         # SSH username\n    'password': 'password',      # SSH password\n    'secret': 'secret',          # Enable password (if needed)\n}\n\n# Establish the SSH connection\nnet_connect = ConnectHandler(**cisco_device)\n\n# Enter enable mode\nnet_connect.enable()\n\n# Run a command and get the output\noutput = net_connect.send_command('show ip interface brief')\nprint(output)\n\n\"\"\"\nInterface IP-Address OK? Method Status Protocol\nGigabitEthernet1 unassigned YES manual administratively down down\nGigabitEthernet2 192.168.71.178 YES DHCP up up\nGigabitEthernet3 unassigned YES manual down down\nLoopback0 unassigned YES manual up up\n\"\"\"\n\n# Disconnect from the device\nnet_connect.disconnect()\n</code></pre>"},{"location":"devnet/python4NE/#another-example-configuration-change","title":"Another Example: Configuration Change","text":"<p>In this example, we'll make a configuration change on a Cisco device.</p> <pre><code>from netmiko import ConnectHandler\n\n# Define the device to connect to\ncisco_device = {\n    'device_type': 'cisco_ios',\n    'host': '192.168.1.1',\n    'username': 'admin',\n    'password': 'password',\n    'secret': 'secret',\n}\n\n# Establish the SSH connection\nnet_connect = ConnectHandler(**cisco_device)\n\n# Enter enable mode\nnet_connect.enable()\n\n# Configuration commands to be sent\nconfig_commands = [\n    'interface GigabitEthernet0/1',\n    'description Connected to server',\n    'ip address 192.168.2.1 255.255.255.0',\n    'no shutdown'\n]\n\n# Send configuration commands\noutput = net_connect.send_config_set(config_commands)\nprint(output)\n\n# Verify the configuration\nverify_output = net_connect.send_command('show running-config interface GigabitEthernet0/1')\nprint(verify_output)\n\n# Disconnect from the device\nnet_connect.disconnect()\n</code></pre>"},{"location":"devnet/python4NE/#explanation_6","title":"Explanation","text":"<ol> <li>Device Connection: Similar to the basic example, we connect to the device.</li> <li>Configuration Commands: We define a list of configuration commands to be executed.</li> <li>Send Configuration: The <code>send_config_set()</code> method is used to send the list of configuration commands to the device.</li> <li>Verify Configuration: We verify the configuration change by running <code>show running-config</code> on the specific interface.</li> <li>Output: The outputs of the configuration change and verification command are printed.</li> </ol>"},{"location":"devnet/python4NE/#tips","title":"Tips","text":"<ul> <li>Always test scripts in a lab environment before deploying them in production.</li> <li>Use exception handling to manage errors gracefully.</li> <li>Consider logging the output for troubleshooting and auditing purposes.</li> </ul> <p>Netmiko is a powerful tool that can significantly streamline network automation tasks, making it a valuable addition to any network engineer\u2019s toolkit.</p>"},{"location":"devnet/python4NE/#file","title":"<code>file</code>","text":"<p>In Python, file handling is done through the built-in <code>open()</code> function, which allows you to open files in various modes for reading, writing, appending, and more. Understanding these modes is crucial for performing different file operations efficiently.</p>"},{"location":"devnet/python4NE/#basic-syntax_1","title":"Basic Syntax","text":"<p><pre><code>file_object = open(file_name, mode)\n</code></pre> - <code>file_name</code>: The name (and path) of the file you want to open. - <code>mode</code>: A string that specifies the mode in which the file is opened.</p>"},{"location":"devnet/python4NE/#file-modes","title":"File Modes","text":"<ol> <li>Read Mode (<code>'r'</code>)</li> <li>Opens the file for reading only.</li> <li>The file pointer is placed at the beginning of the file.</li> <li> <p>If the file does not exist, an error occurs.    <pre><code>file_object = open('example.txt', 'r')\n</code></pre></p> </li> <li> <p>Write Mode (<code>'w'</code>)</p> </li> <li>Opens the file for writing.</li> <li>The file pointer is placed at the beginning of the file and the content of the file is truncated (the file is emptied).</li> <li> <p>If the file does not exist, it creates a new file.    <pre><code>file_object = open('example.txt', 'w')\n</code></pre></p> </li> <li> <p>Append Mode (<code>'a'</code>)</p> </li> <li>Opens the file for writing.</li> <li>The file pointer is placed at the end of the file.</li> <li>If the file does not exist, it creates a new file.</li> <li> <p>The content written is appended to the end of the file.    <pre><code>file_object = open('example.txt', 'a')\n</code></pre></p> </li> <li> <p>Read and Write Mode (<code>'r+'</code>)</p> </li> <li>Opens the file for both reading and writing.</li> <li>The file pointer is placed at the beginning of the file.</li> <li>If the file does not exist, an error occurs.    <pre><code>file_object = open('example.txt', 'r+')\n</code></pre></li> </ol>"},{"location":"devnet/python4NE/#file-handling-overview","title":"File Handling Overview","text":"<ol> <li>Opening and Closing Files:</li> <li>Use the <code>open()</code> function to open a file and specify the mode (read, write, append, etc.).</li> <li>Always close the file using the <code>close()</code> method to release system resources.</li> <li> <p>Use <code>open-with</code> that you don't want to closed file. </p> </li> <li> <p>Reading from Files:</p> </li> <li>Use methods like <code>read()</code>, <code>readline()</code>, or <code>readlines()</code> to read data from a file.</li> </ol> <pre><code>from netmiko import ConnectHandler\n\ncisco_ios_xe = {\n    \"device_type\" : \"cisco_xe\",\n    \"host\" : \"192.168.71.178\",\n    \"username\" : \"cisco\",\n    \"password\" : \"cisco1\"\n}\n\nsession = ConnectHandler(**cisco_ios_xe)\noutput = session.send_command(\"show run\")\n\nwith open (\"config_backup.txt\", \"r\") as f:\n    print (f.read()) # for reading all data in the file\n    print(f.readline()) # for reading first row in the file\n    print (f.readlines()) # convert o lines in the file to a list\n</code></pre> <ol> <li>Writing to Files:</li> <li>Use methods like <code>write()</code> or <code>writelines()</code> to write data to a file.</li> </ol> <p>In Python, file writing operations can be performed using the <code>write()</code> and <code>writelines()</code> functions. Each function handles writing to files in different ways. Here are the differences between them and some examples to illustrate their use:</p>"},{"location":"devnet/python4NE/#write","title":"<code>write()</code>","text":"<ul> <li>Description: Writes a single string to the file.</li> <li>Usage:</li> </ul> <pre><code>with open('example.txt', 'w') as file:\n    file.write(\"This is a line of text.\\n\")\n</code></pre> <ul> <li>Features:</li> <li>Writes a single string.</li> <li>Takes a string as an argument.</li> <li>You need to manually add newline characters (<code>\\n</code>) if you want to write multiple lines.</li> </ul>"},{"location":"devnet/python4NE/#writelines","title":"<code>writelines()</code>","text":"<ul> <li>Description: Writes a list or any iterable of strings to the file.</li> <li>Usage:</li> <li> <pre><code>lines = [\"This is the first line.\\n\", \"This is the second line.\\n\", \"This is the third line.\\n\"]\nwith open('example.txt', 'w') as file:\n    file.writelines(lines)\n</code></pre> </li> <li> <p>Features:</p> </li> <li>Writes multiple strings at once.</li> <li>Takes a list or any iterable of strings as an argument.</li> <li>You need to manually add newline characters (<code>\\n</code>) to each string; otherwise, they will be written as a continuous block of text.</li> </ul>"},{"location":"devnet/python4NE/#requests","title":"<code>requests</code>","text":"<p>The <code>requests</code> library in Python is a powerful tool for making HTTP requests, which is incredibly useful for network engineers working with APIs, web services, and other network-related tasks. Let's explore it with a network task example, both with and without using a class.</p> <pre><code>import requests\nimport urllib3\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\nresponse = requests.get(url=\"https://api.chucknorris.io/jokes/random\")\n\nprint (response.text)\n\n\"\"\"\n{\"categories\":[],\"created_at\":\"2020-01-05 13:42:28.420821\",\"icon_url\":\"https://assets.chucknorris.host/img/avatar/chuck-norris.png\",\"id\":\"Hpuq-8ohR2KI-L6Otc3Jig\",\"updated_at\":\"2020-01-05 13:42:28.420821\",\"url\":\"https://api.chucknorris.io/jokes/Hpuq-8ohR2KI-L6Otc3Jig\",\"value\":\"Chuck Norris once took a crap on a crap table.. and won nine million dollars.\"}\n\"\"\"\n</code></pre> <p>The <code>requests</code> library in Python provides several parameters that you can use to customize your HTTP requests. While none of these parameters are mandatory for making a basic request, some are commonly used to specify headers, query parameters, request body, and more. Here are some of the most commonly used parameters:</p> <ol> <li><code>url</code> (mandatory): The URL of the resource you want to request.</li> <li><code>params</code>: A dictionary or bytes to be sent in the query string of the request URL.</li> <li><code>data</code>: A dictionary, bytes, or file-like object to send in the body of the request.</li> <li><code>json</code>: A JSON serializable object to send in the body of the request. This will override <code>data</code>.</li> <li><code>headers</code>: A dictionary of HTTP headers to send with the request.</li> <li><code>cookies</code>: A dictionary or CookieJar object to send with the request.</li> <li><code>files</code>: A dictionary of file-like objects for multipart encoding upload.</li> <li><code>auth</code>: A tuple of HTTP Basic Auth username and password.</li> <li><code>timeout</code>: The maximum amount of time (in seconds) to wait for a response from the server.</li> <li><code>allow_redirects</code>: A boolean indicating whether redirects should be followed automatically.</li> <li><code>proxies</code>: A dictionary mapping protocol or protocol and hostname to the URL of the proxy.</li> <li><code>verify</code>: A boolean or string indicating whether SSL certificate verification should be performed.</li> <li><code>stream</code>: A boolean indicating whether to immediately download the response content.</li> <li><code>cert</code>: A tuple containing SSL certificate and private key files.</li> </ol> <p>You can find the full list of parameters and their details in the <code>requests</code> library documentation. To know which parameters are mandatory for a specific request, you typically need to refer to the documentation of the API or service you're interacting with. Usually, APIs will specify the required parameters and their formats in their documentation.</p> <p>For example, if you're working with the GitHub API to create a new repository, the documentation would specify which parameters are mandatory (e.g., <code>name</code> for the repository name) and any other optional parameters you can include (e.g., <code>description</code>, <code>private</code>, etc.).</p>"},{"location":"devnet/python4NE/#conclusion_8","title":"Conclusion","text":"<p>Libraries in Python provide a wealth of functionalities that empower network engineers to automate tasks, manage configurations, monitor network devices, and analyze network data with ease. By leveraging the right libraries, network engineers can streamline their workflows, improve productivity, and enhance the efficiency and reliability of network operations.</p>"},{"location":"devnet/python4NE/#class-in-python","title":"Class in Python","text":"<p>In Python, a class is a blueprint for creating objects that have attributes (variables) and methods (functions). Classes are fundamental for organizing and modeling real-world entities, and they play a crucial role in network engineering for encapsulating network devices, configurations, and operations. Let's explore classes in Python and provide a network task example both with and without using a class.</p>"},{"location":"devnet/python4NE/#classes-overview","title":"Classes Overview","text":"<ol> <li>Class Definition:</li> <li>A class is defined using the <code>class</code> keyword, followed by the class name.</li> <li> <p>Inside a class, you define attributes and methods that describe the properties and behaviors of objects created from that class.</p> </li> <li> <p>Object (Instance):</p> </li> <li>An object is an instance of a class. It represents a specific instance of the class with its unique attributes and methods.</li> </ol>"},{"location":"devnet/python4NE/#example-network-device-management","title":"Example: Network Device Management","text":"<p>Let's consider a network task where you need to manage multiple network devices, such as routers and switches. We'll create a simplified example to illustrate how classes can be used to model network devices.</p>"},{"location":"devnet/python4NE/#without-using-class","title":"Without Using Class","text":"<pre><code># Without using class\ndevices = [\n    {\"type\": \"router\", \"ip\": \"192.168.1.1\", \"username\": \"admin\", \"password\": \"password\"},\n    {\"type\": \"switch\", \"ip\": \"192.168.1.2\", \"username\": \"admin\", \"password\": \"password\"}\n]\n\ndef configure_device(device):\n    # Logic to configure the device\n    print(f\"Configuring {device['type']} with IP address {device['ip']}\")\n\n# Example usage\nfor device in devices:\n    configure_device(device)\n</code></pre>"},{"location":"devnet/python4NE/#explanation_7","title":"Explanation","text":"<ul> <li>In this approach, we represent each network device as a dictionary with attributes like type, IP address, username, and password.</li> <li>We define a function <code>configure_device</code> to perform configuration tasks based on the device dictionary passed to it.</li> <li>We iterate over the list of devices and call the <code>configure_device</code> function for each device.</li> </ul>"},{"location":"devnet/python4NE/#using-class","title":"Using Class","text":"<pre><code>class NetworkDevice:\n    def __init__(self, device_type, ip, username, password):\n        self.device_type = device_type\n        self.ip = ip\n        self.username = username\n        self.password = password\n\n    def configure(self):\n        # Logic to configure the device\n        print(f\"Configuring {self.device_type} with IP address {self.ip}\")\n\n# Example usage\ndevices = [\n    NetworkDevice(\"router\", \"192.168.1.1\", \"admin\", \"password\"),\n    NetworkDevice(\"switch\", \"192.168.1.2\", \"admin\", \"password\")\n]\n\nfor device in devices:\n    device.configure()\n</code></pre>"},{"location":"devnet/python4NE/#explanation_8","title":"Explanation","text":"<ul> <li>We define a <code>NetworkDevice</code> class with attributes (<code>device_type</code>, <code>ip</code>, <code>username</code>, <code>password</code>) and a method <code>configure</code>.</li> <li>The <code>__init__</code> method is a special method called the constructor, which initializes the object with the provided attributes.</li> <li>The <code>configure</code> method performs configuration tasks specific to the device.</li> <li>We create instances of the <code>NetworkDevice</code> class for each network device, passing attributes during instantiation.</li> <li>We call the <code>configure</code> method for each device object to perform configuration tasks.</li> </ul>"},{"location":"devnet/python4NE/#conclusion_9","title":"Conclusion","text":"<p>Using classes in Python allows network engineers to model and manage network entities more effectively by encapsulating related attributes and behaviors within objects. Classes provide a clean and structured approach to organizing code, promoting code reusability, and simplifying complex tasks in network automation, configuration management, and monitoring.</p>"},{"location":"hidden/tutorial/","title":"MD Tutorial","text":"<p>This is code example </p> Python Code Test<pre><code>def addition (a,b): # (1)\n    # This is defination\n    result = a + b\n    print (result)\n    return result\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> plain textunordered listordered list <p>some plain text</p> <ul> <li>first item</li> <li>second item</li> <li>third item</li> </ul> <ol> <li>ilk item</li> <li>ikinci item</li> <li>\u00fc\u00e7\u00fcnc\u00fc item</li> </ol> Important Notes <p>this is the important note. Dont forget it.</p> <p>another text here </p> <pre><code>graph LR\n\nA[Start]--&gt;B{open?}\nB --&gt; C[Yes]\nB --&gt; D[No]\n</code></pre> <p>highlight</p> <p>Ctrl+C and Ctrl+V</p> <p>Option+, for back tic</p> <p>2<sup>4</sup> = 16</p> <p>H<sub>2</sub>O</p> <p>delete and adding</p>"},{"location":"hidden/tutorial/#image-resize-and-alignment","title":"Image resize and Alignment","text":"<p> some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum.</p> <p>some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum some text in here lorem ipsum.</p>"},{"location":"hidden/Clcor/clcor/","title":"CLCOR","text":"<p> ilker MANSUR CCIE-Collaboration #63555 mail: imansur\\@btegitim.com mobile: 544 208 44 97</p>"},{"location":"hidden/Clcor/clcor/#introduction-to-concepts","title":"Introduction to Concepts","text":"<ul> <li>Role of PBX</li> <li>What is CUCM and its components</li> <li>General Architecture of collaboration (Cloud or Onpremise)</li> </ul>"},{"location":"hidden/Clcor/clcor/#role-of-pbx","title":"Role of PBX","text":"<p>Is it possible for one SIP endpoint to call another SIP endpoint without any additional equipment?</p> <pre><code>flowchart LR\nA[Alice Sip Endpoint]\nB[Bob Sip Endpoint]\n\nA -- sip call --&gt; B\nA -- h323 call --&gt; B\n</code></pre>"},{"location":"hidden/Clcor/clcor/#role-of-pbx_1","title":"Role of PBX","text":"<ul> <li>Call Privilege</li> <li>Corporate Directory</li> <li>Time Based Operation</li> <li>Call Forward </li> <li>Call Detailed Record &amp; Call Management Record</li> <li>Hunt Group, Conference etc.</li> </ul>"},{"location":"hidden/Clcor/clcor/#cucm-components","title":"CUCM Components","text":"<pre><code>graph TD\n\nA[CUCM] -- XMPP --&gt; B[CUP]\nA -- SIP --&gt; C[CUC]\nA -- Jtapi --&gt; D[UCCX]\nA -- SIP --&gt; E[CMS]\nA -- SIP --&gt; F[Expressway C]\nA -- SIP / H323 --&gt; G((Voive-Gw))\n</code></pre>"},{"location":"hidden/Clcor/clcor/#general-architecture-of-collaboration","title":"General Architecture of Collaboration","text":"<pre><code>graph LR\n\nA[Collaboration] --&gt; B[Cloud]\nA --&gt; C[On Premise]\nB --&gt; D[WebEX]\nC --&gt; E[CUCM]\nD --&gt; F[WebEX Meeting]\nD --&gt; G[WebEX Calling]\nD --&gt; H[WebEX CC]\nC --&gt; I[CMS]\nC --&gt; J[UCCX, UCCE]</code></pre>"},{"location":"hidden/Clcor/clcor/#cucm-architechture","title":"CUCM Architechture","text":"<ul> <li> <p>Important Network Protocols (TFTP, DHCP, NTP, RTP)</p> </li> <li> <p>Used Port</p> </li> </ul>"},{"location":"hidden/Clcor/clcor/#publisher","title":"Publisher","text":"<ul> <li>Cisco Database Layer Monitor (DBL)</li> <li>Cisco DRF Master (Disaster Recovery Framework Master)</li> <li>Extension mobility</li> </ul> <p>User-facing Features : Call Forward All(CFA), Message Waiting Indication (MWI), Do Not Disturb, Hunt Group logout, Device Mobility. </p>"},{"location":"hidden/Clcor/clcor/#subscriber","title":"Subscriber","text":"<ul> <li>Cisco CallManager (CCM)</li> <li>Cisco TFTP</li> <li>Cisco Computer telephony Integration Manager (CTI)</li> <li>Cisco Administrative XML Web Service (AXL)</li> <li>Cisco IP Voice Media Streaming App</li> </ul>"},{"location":"hidden/Clcor/clcor/#db-replication","title":"DB Replication","text":""},{"location":"hidden/Clcor/clcor/#database-access-control","title":"Database Access Control","text":"<p>Database access between members of af a cluster is protected:</p> <ul> <li>By Internet Protocol (IP) access control</li> <li>By security Password</li> </ul> <p></p>"},{"location":"hidden/Clcor/clcor/#cucm-signaling-and-media-path","title":"CUCM Signaling and Media Path","text":""},{"location":"hidden/Clcor/clcor/#deployment-options","title":"Deployment Options","text":"<p>There are three kind of deployment model acording to your company and number of IPT</p> <p>Models :</p> <ul> <li>Single-site Deployment</li> <li>Multisite WAN centralize call process</li> <li>Multisite WAN with distributed call Process</li> </ul>"},{"location":"hidden/Clcor/clcor/#single-site-deployment","title":"Single-Site Deployment","text":"<ul> <li>CUCM servers, applications, DSP resource are at the same physical location.</li> </ul>"},{"location":"hidden/Clcor/clcor/#multisite-wan-with-centralized-call-processing","title":"Multisite WAN with Centralized Call Processing","text":"<ul> <li>CUCM at the central site, DSP sources distributed.</li> </ul>"},{"location":"hidden/Clcor/clcor/#multisite-wan-with-distributed-call-processing","title":"Multisite WAN with Distributed Call Processing","text":"<ul> <li>CUCM servers and DSP resources distributed</li> </ul>"},{"location":"hidden/Clcor/clcor/#clustering-over-the-ip-wan","title":"Clustering over the IP WAN","text":"<ul> <li>IP carries intracluster server communication.</li> </ul>"},{"location":"hidden/Clcor/clcor/#redundancy-design","title":"Redundancy Design","text":"<ul> <li>(1:1 or 2:1)</li> </ul>"},{"location":"hidden/Clcor/clcor/#cucm-panel","title":"CUCM Panel","text":"<ul> <li>Application User</li> <li>Administrator User</li> </ul>"},{"location":"hidden/Clcor/clcor/#enterprise-parameters","title":"Enterprise Parameters","text":"<ul> <li>It affects all cluster parameters</li> </ul>"},{"location":"hidden/Clcor/clcor/#service-parameters","title":"Service Parameters","text":"<ul> <li>It affects specific servers</li> </ul>"},{"location":"hidden/Clcor/clcor/#day-0-configuration","title":"Day 0 Configuration","text":"<ul> <li>Don't forget service activation!</li> <li>Change server info from name to ip</li> <li>Change Enterprise p from name to ip</li> <li>Enable CDR for every server</li> <li>Change Max Ad-Hoc conference</li> <li>Adjust T302 inter-digit timeout</li> </ul>"},{"location":"hidden/Clcor/clcor/#user-management","title":"User Management","text":"<pre><code>\ngraph TD\n\nA[Privilege]\nB[Users]\nC[Application Users]\nD[End Users]\nE[Special users]\nF[AXL-JTAPI]\nG[Phone Admin]\nA --&gt; B\nA --&gt; C\nB --&gt; D\nB --&gt; E\nC --example--&gt; F\nE --example--&gt; G</code></pre>"},{"location":"hidden/Clcor/clcor/#ldap-for-users","title":"LDAP For Users","text":"<p><pre><code>flowchart LR\n\nA[LDAP server]\nB[CUCM]\n\nB --  TCP 389 or TLS 636 .--&gt; A\nA --  TCP 389 or TLS 636 .--&gt; B</code></pre> </p> <ul> <li>Enable Syncronizing from LDAP Server</li> <li>Configure LDAP Directory (for User)</li> <li>Configure LDAP Directory (for Authentication)</li> <li>Configure LDAP Filter (for filtering)</li> </ul>"},{"location":"hidden/Clcor/clcor/#ldap-filter","title":"LDAP Filter","text":"<p>Ldap filter should be used for creating special corporate Directory.</p> <p>Example Base DN :</p> <pre><code>OU=NetworkUsers, DC=example, DC=com\n</code></pre> <p>Example Attribute : <pre><code>(objectClass=User,Computer,Group)\n(telephonyNumber=*)\n(mail=*)\n</code></pre></p>"},{"location":"hidden/Clcor/clcor/#bulk-administration-tool","title":"Bulk Administration Tool","text":"<ul> <li>For bulk process you should use BAT or AXL</li> </ul>"},{"location":"hidden/Clcor/clcor/#phone-registeration-process","title":"Phone Registeration Process","text":"<p>```mermaid sequenceDiagram</p> <p>Phone -&gt;&gt; Switch : What is voice-vlan ID Switch -&gt;&gt; Phone :   Phone -&gt;&gt; DHCP : What is option 150? (TFTP Server) DHCP -&gt;&gt; Phone :  Phone -&gt;&gt; TFTP Server : Give me mac_address.cnf.xml TFTP Server -&gt;&gt; Phone : Send configuration file or default configuration file Phone -&gt;&gt; CUCM : Register to cucm if it has conf file or auto-registration is enable"},{"location":"hidden/Clcor/clcor/#auto-registration","title":"Auto Registration","text":""},{"location":"hidden/Clcor/clcor/#deployment","title":"Deployment","text":"Feature Single Site Multi Site Call Manager Group high high Date Time Group low high Region low high Location low high Phone Button Template high high Softkey Template high high Phone Security Profile high high"},{"location":"hidden/Clcor/clcor/#call-privilege","title":"Call Privilege","text":""},{"location":"hidden/Clcor/clcor/#phone-button-template","title":"Phone Button Template","text":""},{"location":"hidden/Clcor/clcor/#softkey-template","title":"Softkey Template","text":""},{"location":"hidden/Clcor/clcor/#phone-configuration","title":"Phone Configuration","text":""}]}